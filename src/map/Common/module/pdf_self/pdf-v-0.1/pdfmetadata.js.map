{"version":3,"sources":["Common/module/pdf_self/pdf-v-0.1/pdfmetadata.js"],"names":["$","meta","type","name","setType","this","cre","single","setArray","fn","arr","apply","arguments","each","nodeType","isXMLDoc","metaDone","data","m","exec","className","getElementsByTagName","e","length","trim","innerHTML","undefined","getAttribute","attr","test","eval","extend","jQuery"],"mappings":"CAwDA,SAAUA,GAENA,EAAEC,KAAO,CACLC,KAAM,QACNC,KAAM,OACNC,QAAS,SAASF,EAAKC,GACnBE,KAAKH,KAAOA,EACZG,KAAKF,KAAOA,GAEhBG,IAAK,SACLC,OAAQ,QAIZ,IAAIC,SAAWR,EAAES,GAAGD,SAGpBR,EAAES,GAAGD,SAAW,SAASE,KACrB,OAAOF,SAASG,MAAON,KAAMO,WAAYC,KAAK,WAC1C,GAAsB,GAAjBR,KAAKS,WAAiBd,EAAEe,SAASV,QAASA,KAAKW,SAApD,CAEA,IAAIC,KAAO,KAEX,GAAoB,SAAfjB,EAAEC,KAAKC,KAAkB,CAC1B,IAAIgB,EAAIlB,EAAEC,KAAKK,IAAIa,KAAMd,KAAKe,WACzBF,IACDD,KAAOC,EAAE,SACV,GAAoB,QAAflB,EAAEC,KAAKC,KAAiB,CAChC,IAAKG,KAAKgB,qBAAuB,OACjC,IAAIC,EAAIjB,KAAKgB,qBAAqBrB,EAAEC,KAAKE,MACpCmB,EAAEC,SACHN,KAAOjB,EAAEwB,KAAKF,EAAE,GAAGG,iBACpB,GAA0BC,MAArBrB,KAAKsB,aAA4B,CACzC,IAAIC,KAAOvB,KAAKsB,aAAc3B,EAAEC,KAAKE,MAChCyB,OACDX,KAAOW,MAGT,KAAKC,KAAMZ,QACbA,KAAO,IAAMA,KAAO,KAExBa,KAAK,UAAYb,MAEZjB,EAAEC,KAAKM,OACRF,KAAML,EAAEC,KAAKM,QAAWU,KAExBjB,EAAE+B,OAAQ1B,KAAMY,MAEpBZ,KAAKW,UAAW,MAYxBhB,EAAES,GAAGQ,KAAO,WACR,OAAOZ,KAAK,GAAGL,EAAEC,KAAKM,QAAU,SA7DxC,CA+DGyB","file":"../../../../../../temporaryJs/Common/module/pdf_self/pdf-v-0.1/pdfmetadata.js","sourcesContent":["/*\r\n * Metadata - jQuery plugin for parsing metadata from elements\r\n *\r\n * Copyright (c) 2006 John Resig, Yehuda Katz, Jé°Žn Zaefferer\r\n *\r\n * Dual licensed under the MIT and GPL licenses:\r\n *   http://www.opensource.org/licenses/mit-license.php\r\n *   http://www.gnu.org/licenses/gpl.html\r\n *\r\n * Revision: $Id$\r\n *\r\n */\r\n\r\n/**\r\n * Sets the type of metadata to use. Metadata is encoded in JSON, and each property\r\n * in the JSON will become a property of the element itself.\r\n *\r\n * There are three supported types of metadata storage:\r\n *\r\n *   attr:  Inside an attribute. The name parameter indicates *which* attribute.\r\n *\r\n *   class: Inside the class attribute, wrapped in curly braces: { }\r\n *\r\n *   elem:  Inside a child element (e.g. a script tag). The\r\n *          name parameter indicates *which* element.\r\n *\r\n * The metadata for an element is loaded the first time the element is accessed via jQuery.\r\n *\r\n * As a result, you can define the metadata type, use $(expr) to load the metadata into the elements\r\n * matched by expr, then redefine the metadata type and run another $(expr) for other elements.\r\n *\r\n * @name $.meta.setType\r\n *\r\n * @example <p id=\"one\" class=\"some_class {item_id: 1, item_label: 'Label'}\">This is a p</p>\r\n * @before $.meta.setType(\"class\")\r\n * @after $(\"#one\").data().item_id == 1; $(\"#one\")[0].item_label == \"Label\"\r\n * @desc Reads metadata from the class attribute\r\n *\r\n * @example <p id=\"one\" class=\"some_class\" data=\"{item_id: 1, item_label: 'Label'}\">This is a p</p>\r\n * @before $.meta.setType(\"attr\", \"data\")\r\n * @after $(\"#one\").data().item_id == 1; $(\"#one\")[0].item_label == \"Label\"\r\n * @desc Reads metadata from a \"data\" attribute\r\n *\r\n * @example <p id=\"one\" class=\"some_class\"><script>{item_id: 1, item_label: 'Label'}</script>This is a p</p>\r\n * @before $.meta.setType(\"elem\", \"script\")\r\n * @after $(\"#one\").data().item_id == 1; $(\"#one\")[0].item_label == \"Label\"\r\n * @desc Reads metadata from a nested script element\r\n *\r\n * @param String type The encoding type\r\n * @param String name The name of the attribute to be used to get metadata (optional)\r\n * @cat Plugins/Metadata\r\n * @descr Sets the type of encoding to be used when loading metadata for the first time\r\n * @type undefined\r\n * @see data()\r\n */\r\n\r\n(function($) {\r\n    // settings\r\n    $.meta = {\r\n        type: \"class\",\r\n        name: \"data\",\r\n        setType: function(type,name){\r\n            this.type = type;\r\n            this.name = name;\r\n        },\r\n        cre: /({.*})/,\r\n        single: 'data'\r\n    };\r\n\r\n    // reference to original setArray()\r\n    var setArray = $.fn.setArray;\r\n\r\n    // define new setArray()\r\n    $.fn.setArray = function(arr){\r\n        return setArray.apply( this, arguments ).each(function(){\r\n            if ( this.nodeType == 9 || $.isXMLDoc(this) || this.metaDone ) return;\r\n\r\n            var data = \"{}\";\r\n\r\n            if ( $.meta.type == \"class\" ) {\r\n                var m = $.meta.cre.exec( this.className );\r\n                if ( m )\r\n                    data = m[1];\r\n            } else if ( $.meta.type == \"elem\" ) {\r\n                if( !this.getElementsByTagName ) return;\r\n                var e = this.getElementsByTagName($.meta.name);\r\n                if ( e.length )\r\n                    data = $.trim(e[0].innerHTML);\r\n            } else if ( this.getAttribute != undefined ) {\r\n                var attr = this.getAttribute( $.meta.name );\r\n                if ( attr )\r\n                    data = attr;\r\n            }\r\n\r\n            if ( !/^{/.test( data ) )\r\n                data = \"{\" + data + \"}\";\r\n\r\n            eval(\"data = \" + data);\r\n\r\n            if ( $.meta.single )\r\n                this[ $.meta.single ] = data;\r\n            else\r\n                $.extend( this, data );\r\n\r\n            this.metaDone = true;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Returns the metadata object for the first member of the jQuery object.\r\n     *\r\n     * @name data\r\n     * @descr Returns element's metadata object\r\n     * @type jQuery\r\n     * @cat Plugins/Metadata\r\n     */\r\n    $.fn.data = function(){\r\n        return this[0][$.meta.single || \"data\"];\r\n    };\r\n})(jQuery);"]}