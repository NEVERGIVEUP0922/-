{"version":3,"sources":["Common/module/uploadify/jquery.uploadifive.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","$","methods","init","options","this","each","$this","data","inputs","inputCount","fileID","queue","count","selected","replaced","errors","queued","cancelled","uploads","current","attempts","successful","$data","settings","extend","auto","buttonClass","buttonText","checkScript","dnd","dropTarget","fileObjName","fileSizeLimit","fileType","formData","height","itemTemplate","method","multi","overrideEvents","queueID","queueSizeLimit","removeCompleted","simUploadLimit","truncateLength","uploadLimit","uploadScript","width","isNaN","fileSizeLimitBytes","parseInt","indexOf","inputTemplate","css","font-size","opacity","position","right","top","z-index","createInput","input","clone","inputName","name","attr","bind","limit","files","length","inArray","alert","onError","call","n","file","addQueueItem","upload","onSelect","currentInput","hide","button","append","destroyInput","key","remove","drop","e","fileData","dataTransfer","onDrop","preventDefault","stopPropagation","fileExistsInQueue","existingFile","complete","removeExistingFile","cancel","queueItem","id","find","fileName","substring","html","queueEl","onAddQueueItem","size","error","removeQueueItem","instant","delay","fadeTime","fadeOut","filesToUpload","skip","checkExists","ajaxSetup","async","checkData","filename","post","fileExists","exists","confirm","onCheck","uploadFile","uploadAll","uploading","attempted","xhr","XMLHttpRequest","FormData","i","open","addEventListener","lengthComputable","progress","readyState","status","responseText","uploadComplete","send","reader","FileReader","onload","boundary","Date","getTime","dashes","eol","binFile","target","result","param","setRequestHeader","onUploadFile","sendAsBinary","readAsBinaryString","percent","Math","round","loaded","total","onProgress","errorType","errorMsg","addClass","slideUp","onUploadComplete","setTimeout","queueComplete","onQueueComplete","window","File","FileList","Blob","onFallback","line-height","overflow","text-align","before","appendTo","after","$dropTarget","get","datastr","ords","Array","map","x","charCodeAt","ui8a","Uint8Array","buffer","onInit","debug","console","log","clearQueue","onClearQueue","fast","filesCancelled","abort","onCancel","keepVars","successsful","onUpload","not","_file","checking","skipFile","destroy","siblings","show","insertBefore","onDestroy","fn","uploadifive","apply","slice","arguments","jQuery"],"mappings":"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","file":"../../../../../temporaryJs/Common/module/uploadify/jquery.uploadifive.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\r\nUploadiFive 1.2.2\r\nCopyright (c) 2012 Reactive Apps, Ronnie Garcia\r\nReleased under the UploadiFive Standard License <http://www.uploadify.com/uploadifive-standard-license>\r\n*/\n;(function ($) {\n\n    var methods = {\n\n        init: function init(options) {\n\n            return this.each(function () {\n\n                // Create a reference to the jQuery DOM object\n                var $this = $(this);\n                $this.data('uploadifive', {\n                    inputs: {}, // The object that contains all the file inputs\n                    inputCount: 0, // The total number of file inputs created\n                    fileID: 0,\n                    queue: {\n                        count: 0, // Total number of files in the queue\n                        selected: 0, // Number of files selected in the last select operation\n                        replaced: 0, // Number of files replaced in the last select operation\n                        errors: 0, // Number of files that returned an error in the last select operation\n                        queued: 0, // Number of files added to the queue in the last select operation\n                        cancelled: 0 // Total number of files that have been cancelled or removed from the queue\n                    },\n                    uploads: {\n                        current: 0, // Number of files currently being uploaded\n                        attempts: 0, // Number of file uploads attempted in the last upload operation\n                        successful: 0, // Number of files successfully uploaded in the last upload operation\n                        errors: 0, // Number of files returning errors in the last upload operation\n                        count: 0 // Total number of files uploaded successfully\n                    }\n                });\n                var $data = $this.data('uploadifive');\n\n                // Set the default options\n                var settings = $data.settings = $.extend({\n                    'auto': true, // Automatically upload a file when it's added to the queue\n                    'buttonClass': false, // A class to add to the UploadiFive button\n                    'buttonText': 'Select Files', // The text that appears on the UploadiFive button\n                    'checkScript': false, // Path to the script that checks for existing file names \n                    'dnd': true, // Allow drag and drop into the queue\n                    'dropTarget': false, // Selector for the drop target\n                    'fileObjName': 'Filedata', // The name of the file object to use in your server-side script\n                    'fileSizeLimit': 0, // Maximum allowed size of files to upload\n                    'fileType': false, // Type of files allowed (image, etc), separate with a pipe character |\n                    'formData': {}, // Additional data to send to the upload script\n                    'height': 30, // The height of the button\n                    'itemTemplate': false, // The HTML markup for the item in the queue\n                    'method': 'post', // The method to use when submitting the upload\n                    'multi': true, // Set to true to allow multiple file selections\n                    'overrideEvents': [], // An array of events to override\n                    'queueID': false, // The ID of the file queue\n                    'queueSizeLimit': 0, // The maximum number of files that can be in the queue\n                    'removeCompleted': false, // Set to true to remove files that have completed uploading\n                    'simUploadLimit': 0, // The maximum number of files to upload at once\n                    'truncateLength': 0, // The length to truncate the file names to\n                    'uploadLimit': 0, // The maximum number of files you can upload\n                    'uploadScript': 'uploadifive.php', // The path to the upload script\n                    'width': 100 // The width of the button\n\n                    /*\r\n                    // Events\r\n                    'onAddQueueItem'   : function(file) {},                        // Triggered for each file that is added to the queue\r\n                    'onCancel'         : function(file) {},                        // Triggered when a file is cancelled or removed from the queue\r\n                    'onCheck'          : function(file, exists) {},                // Triggered when the server is checked for an existing file\r\n                    'onClearQueue'     : function(queue) {},                       // Triggered during the clearQueue function\r\n                    'onDestroy'        : function() {}                             // Triggered during the destroy function\r\n                    'onDrop'           : function(files, numberOfFilesDropped) {}, // Triggered when files are dropped into the file queue\r\n                    'onError'          : function(file, fileType, data) {},        // Triggered when an error occurs\r\n                    'onFallback'       : function() {},                            // Triggered if the HTML5 File API is not supported by the browser\r\n                    'onInit'           : function() {},                            // Triggered when UploadiFive if initialized\r\n                    'onQueueComplete'  : function() {},                            // Triggered once when an upload queue is done\r\n                    'onProgress'       : function(file, event) {},                 // Triggered during each progress update of an upload\r\n                    'onSelect'         : function() {},                            // Triggered once when files are selected from a dialog box\r\n                    'onUpload'         : function(file) {},                        // Triggered when an upload queue is started\r\n                    'onUploadComplete' : function(file, data) {},                  // Triggered when a file is successfully uploaded\r\n                    'onUploadFile'     : function(file) {},                        // Triggered for each file being uploaded\r\n                    */\n                }, options);\n\n                // Calculate the file size limit\n                if (isNaN(settings.fileSizeLimit)) {\n                    var fileSizeLimitBytes = parseInt(settings.fileSizeLimit) * 1.024;\n                    if (settings.fileSizeLimit.indexOf('KB') > -1) {\n                        settings.fileSizeLimit = fileSizeLimitBytes * 1000;\n                    } else if (settings.fileSizeLimit.indexOf('MB') > -1) {\n                        settings.fileSizeLimit = fileSizeLimitBytes * 1000000;\n                    } else if (settings.fileSizeLimit.indexOf('GB') > -1) {\n                        settings.fileSizeLimit = fileSizeLimitBytes * 1000000000;\n                    }\n                } else {\n                    settings.fileSizeLimit = settings.fileSizeLimit * 1024;\n                }\n\n                // Create a template for a file input\n                $data.inputTemplate = $('<input type=\"file\">').css({\n                    'font-size': settings.height + 'px',\n                    'opacity': 0,\n                    'position': 'absolute',\n                    'right': '-3px',\n                    'top': '-3px',\n                    'z-index': 999\n                });\n\n                // Create a new input\n                $data.createInput = function () {\n\n                    // Create a clone of the file input\n                    var input = $data.inputTemplate.clone();\n                    // Create a unique name for the input item\n                    var inputName = input.name = 'input' + $data.inputCount++;\n                    // Set the multiple attribute\n                    if (settings.multi) {\n                        input.attr('multiple', true);\n                    }\n                    // Set the accept attribute on the input\n                    if (settings.fileType) {\n                        input.attr('accept', settings.fileType);\n                    }\n                    // Set the onchange event for the input\n                    input.bind('change', function () {\n                        $data.queue.selected = 0;\n                        $data.queue.replaced = 0;\n                        $data.queue.errors = 0;\n                        $data.queue.queued = 0;\n                        // Add a queue item to the queue for each file\n                        var limit = this.files.length;\n                        $data.queue.selected = limit;\n                        if ($data.queue.count + limit > settings.queueSizeLimit && settings.queueSizeLimit !== 0) {\n                            if ($.inArray('onError', settings.overrideEvents) < 0) {\n                                alert('The maximum number of queue items has been reached (' + settings.queueSizeLimit + ').  Please select fewer files.');\n                            }\n                            // Trigger the error event\n                            if (typeof settings.onError === 'function') {\n                                settings.onError.call($this, 'QUEUE_LIMIT_EXCEEDED');\n                            }\n                        } else {\n                            for (var n = 0; n < limit; n++) {\n                                file = this.files[n];\n                                $data.addQueueItem(file);\n                            }\n                            $data.inputs[inputName] = this;\n                            $data.createInput();\n                        }\n                        // Upload the file if auto-uploads are enabled\n                        if (settings.auto) {\n                            methods.upload.call($this);\n                        }\n                        // Trigger the select event\n                        if (typeof settings.onSelect === 'function') {\n                            settings.onSelect.call($this, $data.queue);\n                        }\n                    });\n                    // Hide the existing current item and add the new one\n                    if ($data.currentInput) {\n                        $data.currentInput.hide();\n                    }\n                    $data.button.append(input);\n                    $data.currentInput = input;\n                };\n\n                // Remove an input\n                $data.destroyInput = function (key) {\n                    $($data.inputs[key]).remove();\n                    delete $data.inputs[key];\n                    $data.inputCount--;\n                };\n\n                // Drop a file into the queue\n                $data.drop = function (e) {\n                    $data.queue.selected = 0;\n                    $data.queue.replaced = 0;\n                    $data.queue.errors = 0;\n                    $data.queue.queued = 0;\n\n                    var fileData = e.dataTransfer;\n\n                    var inputName = fileData.name = 'input' + $data.inputCount++;\n                    // Add a queue item to the queue for each file\n                    var limit = fileData.files.length;\n                    $data.queue.selected = limit;\n                    if ($data.queue.count + limit > settings.queueSizeLimit && settings.queueSizeLimit !== 0) {\n                        // Check if the queueSizeLimit was reached\n                        if ($.inArray('onError', settings.overrideEvents) < 0) {\n                            alert('The maximum number of queue items has been reached (' + settings.queueSizeLimit + ').  Please select fewer files.');\n                        }\n                        // Trigger the onError event\n                        if (typeof settings.onError === 'function') {\n                            settings.onError.call($this, 'QUEUE_LIMIT_EXCEEDED');\n                        }\n                    } else {\n                        // Add a queue item for each file\n                        for (var n = 0; n < limit; n++) {\n                            file = fileData.files[n];\n                            $data.addQueueItem(file);\n                        }\n                        // Save the data to the inputs object\n                        $data.inputs[inputName] = fileData;\n                    }\n\n                    // Upload the file if auto-uploads are enabled\n                    if (settings.auto) {\n                        methods.upload.call($this);\n                    }\n\n                    // Trigger the onDrop event\n                    if (typeof settings.onDrop === 'function') {\n                        settings.onDrop.call($this, fileData.files, fileData.files.length);\n                    }\n\n                    // Stop FireFox from opening the dropped file(s)\n                    e.preventDefault();\n                    e.stopPropagation();\n                };\n\n                // Check if a filename exists in the queue\n                $data.fileExistsInQueue = function (file) {\n                    for (var key in $data.inputs) {\n                        input = $data.inputs[key];\n                        limit = input.files.length;\n                        for (var n = 0; n < limit; n++) {\n                            existingFile = input.files[n];\n                            // Check if the filename matches\n                            if (existingFile.name == file.name && !existingFile.complete) {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                };\n\n                // Remove an existing file in the queue\n                $data.removeExistingFile = function (file) {\n                    for (var key in $data.inputs) {\n                        input = $data.inputs[key];\n                        limit = input.files.length;\n                        for (var n = 0; n < limit; n++) {\n                            existingFile = input.files[n];\n                            // Check if the filename matches\n                            if (existingFile.name == file.name && !existingFile.complete) {\n                                $data.queue.replaced++;\n                                methods.cancel.call($this, existingFile, true);\n                            }\n                        }\n                    }\n                };\n\n                // Create the file item template\n                if (settings.itemTemplate == false) {\n                    $data.queueItem = $('<div class=\"uploadifive-queue-item\">\\\r\n                        <a class=\"close\" href=\"#\">X</a>\\\r\n                        <div><span class=\"filename\"></span><span class=\"fileinfo\"></span></div>\\\r\n                        <div class=\"progress\">\\\r\n                            <div class=\"progress-bar\"></div>\\\r\n                        </div>\\\r\n                    </div>');\n                } else {\n                    $data.queueItem = $(settings.itemTemplate);\n                }\n\n                // Add an item to the queue\n                $data.addQueueItem = function (file) {\n                    if ($.inArray('onAddQueueItem', settings.overrideEvents) < 0) {\n                        // Check if the filename already exists in the queue\n                        $data.removeExistingFile(file);\n                        // Create a clone of the queue item template\n                        file.queueItem = $data.queueItem.clone();\n                        // Add an ID to the queue item\n                        file.queueItem.attr('id', settings.id + '-file-' + $data.fileID++);\n                        // Bind the close event to the close button\n                        file.queueItem.find('.close').bind('click', function () {\n                            methods.cancel.call($this, file);\n                            return false;\n                        });\n                        var fileName = file.name;\n                        if (fileName.length > settings.truncateLength && settings.truncateLength != 0) {\n                            fileName = fileName.substring(0, settings.truncateLength) + '...';\n                        }\n                        file.queueItem.find('.filename').html(fileName);\n                        // Add a reference to the file\n                        file.queueItem.data('file', file);\n                        $data.queueEl.append(file.queueItem);\n                    }\n                    // Trigger the addQueueItem event\n                    if (typeof settings.onAddQueueItem === 'function') {\n                        settings.onAddQueueItem.call($this, file);\n                    }\n                    // Check the filesize\n                    if (file.size > settings.fileSizeLimit && settings.fileSizeLimit != 0) {\n                        $data.error('FILE_SIZE_LIMIT_EXCEEDED', file);\n                    } else {\n                        $data.queue.queued++;\n                        $data.queue.count++;\n                    }\n                };\n\n                // Remove an item from the queue\n                $data.removeQueueItem = function (file, instant, delay) {\n                    // Set the default delay\n                    if (!delay) delay = 0;\n                    var fadeTime = instant ? 0 : 500;\n                    if (file.queueItem) {\n                        if (file.queueItem.find('.fileinfo').html() != ' - Completed') {\n                            file.queueItem.find('.fileinfo').html(' - Cancelled');\n                        }\n                        file.queueItem.find('.progress-bar').width(0);\n                        file.queueItem.delay(delay).fadeOut(fadeTime, function () {\n                            $(this).remove();\n                        });\n                        delete file.queueItem;\n                        $data.queue.count--;\n                    }\n                };\n\n                // Count the number of files that need to be uploaded\n                $data.filesToUpload = function () {\n                    var filesToUpload = 0;\n                    for (var key in $data.inputs) {\n                        input = $data.inputs[key];\n                        limit = input.files.length;\n                        for (var n = 0; n < limit; n++) {\n                            file = input.files[n];\n                            if (!file.skip && !file.complete) {\n                                filesToUpload++;\n                            }\n                        }\n                    }\n                    return filesToUpload;\n                };\n\n                // Check if a file exists\n                $data.checkExists = function (file) {\n                    if ($.inArray('onCheck', settings.overrideEvents) < 0) {\n                        // This request needs to be synchronous\n                        $.ajaxSetup({\n                            'async': false\n                        });\n                        // Send the filename to the check script\n                        var checkData = $.extend(settings.formData, { filename: file.name });\n                        $.post(settings.checkScript, checkData, function (fileExists) {\n                            file.exists = parseInt(fileExists);\n                        });\n                        if (file.exists) {\n                            if (!confirm('A file named ' + file.name + ' already exists in the upload folder.\\nWould you like to replace it?')) {\n                                // If not replacing the file, cancel the upload\n                                methods.cancel.call($this, file);\n                                return true;\n                            }\n                        }\n                    }\n                    // Trigger the check event\n                    if (typeof settings.onCheck === 'function') {\n                        settings.onCheck.call($this, file, file.exists);\n                    }\n                    return false;\n                };\n\n                // Upload a single file\n                $data.uploadFile = function (file, uploadAll) {\n                    if (!file.skip && !file.complete && !file.uploading) {\n                        file.uploading = true;\n                        $data.uploads.current++;\n                        $data.uploads.attempted++;\n\n                        // Create a new AJAX request\n                        xhr = file.xhr = new XMLHttpRequest();\n\n                        // Start the upload\n                        // Use the faster FormData if it exists\n                        if (typeof FormData === 'function' || (typeof FormData === 'undefined' ? 'undefined' : _typeof(FormData)) === 'object') {\n\n                            // Create a new FormData object\n                            var formData = new FormData();\n\n                            // Add the form data\n                            formData.append(settings.fileObjName, file);\n\n                            // Add the rest of the formData\n                            for (i in settings.formData) {\n                                formData.append(i, settings.formData[i]);\n                            }\n\n                            // Open the AJAX call\n                            xhr.open(settings.method, settings.uploadScript, true);\n\n                            // On progress function\n                            xhr.upload.addEventListener('progress', function (e) {\n                                if (e.lengthComputable) {\n                                    $data.progress(e, file);\n                                }\n                            }, false);\n\n                            // On complete function\n                            xhr.addEventListener('load', function (e) {\n                                if (this.readyState == 4) {\n                                    file.uploading = false;\n                                    if (this.status == 200) {\n                                        if (file.xhr.responseText !== 'Invalid file type.') {\n                                            $data.uploadComplete(e, file, uploadAll);\n                                        } else {\n                                            $data.error(file.xhr.responseText, file, uploadAll);\n                                        }\n                                    } else if (this.status == 404) {\n                                        $data.error('404_FILE_NOT_FOUND', file, uploadAll);\n                                    } else if (this.status == 403) {\n                                        $data.error('403_FORBIDDEN', file, uploadAll);\n                                    } else {\n                                        $data.error('Unknown Error', file, uploadAll);\n                                    }\n                                }\n                            });\n\n                            // Send the form data (multipart/form-data)\n                            xhr.send(formData);\n                        } else {\n\n                            // Send as binary\n                            var reader = new FileReader();\n                            reader.onload = function (e) {\n\n                                // Set some file builder variables\n                                var boundary = '-------------------------' + new Date().getTime(),\n                                    dashes = '--',\n                                    eol = '\\r\\n',\n                                    binFile = '';\n\n                                // Build an RFC2388 String \n                                binFile += dashes + boundary + eol;\n                                // Generate the headers\n                                binFile += 'Content-Disposition: form-data; name=\"' + settings.fileObjName + '\"';\n                                if (file.name) {\n                                    binFile += '; filename=\"' + file.name + '\"';\n                                }\n                                binFile += eol;\n                                binFile += 'Content-Type: application/octet-stream' + eol + eol;\n                                binFile += e.target.result + eol;\n\n                                for (key in settings.formData) {\n                                    binFile += dashes + boundary + eol;\n                                    binFile += 'Content-Disposition: form-data; name=\"' + key + '\"' + eol + eol;\n                                    binFile += settings.formData[key] + eol;\n                                }\n\n                                binFile += dashes + boundary + dashes + eol;\n\n                                // On progress function\n                                xhr.upload.addEventListener('progress', function (e) {\n                                    $data.progress(e, file);\n                                }, false);\n\n                                // On complete function\n                                xhr.addEventListener('load', function (e) {\n                                    file.uploading = false;\n                                    var status = this.status;\n                                    if (status == 404) {\n                                        $data.error('404_FILE_NOT_FOUND', file, uploadAll);\n                                    } else {\n                                        if (file.xhr.responseText != 'Invalid file type.') {\n                                            $data.uploadComplete(e, file, uploadAll);\n                                        } else {\n                                            $data.error(file.xhr.responseText, file, uploadAll);\n                                        }\n                                    }\n                                }, false);\n\n                                // Open the ajax request\n                                var url = settings.uploadScript;\n                                if (settings.method == 'get') {\n                                    var params = $(settings.formData).param();\n                                    url += params;\n                                }\n                                xhr.open(settings.method, settings.uploadScript, true);\n                                xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n\n                                // Trigger the uploadFile event\n                                if (typeof settings.onUploadFile === 'function') {\n                                    settings.onUploadFile.call($this, file);\n                                }\n\n                                // Send the file for upload\n                                xhr.sendAsBinary(binFile);\n                            };\n                            reader.readAsBinaryString(file);\n                        }\n                    }\n                };\n\n                // Update a file upload's progress\n                $data.progress = function (e, file) {\n                    if ($.inArray('onProgress', settings.overrideEvents) < 0) {\n                        if (e.lengthComputable) {\n                            var percent = Math.round(e.loaded / e.total * 100);\n                        }\n                        file.queueItem.find('.fileinfo').html(' - ' + percent + '%');\n                        file.queueItem.find('.progress-bar').css('width', percent + '%');\n                    }\n                    // Trigger the progress event\n                    if (typeof settings.onProgress === 'function') {\n                        settings.onProgress.call($this, file, e);\n                    }\n                };\n\n                // Trigger an error\n                $data.error = function (errorType, file, uploadAll) {\n                    if ($.inArray('onError', settings.overrideEvents) < 0) {\n                        // Get the error message\n                        switch (errorType) {\n                            case '404_FILE_NOT_FOUND':\n                                errorMsg = '404 Error';\n                                break;\n                            case '403_FORBIDDEN':\n                                errorMsg = '403 Forbidden';\n                                break;\n                            case 'FORBIDDEN_FILE_TYPE':\n                                errorMsg = 'Forbidden File Type';\n                                break;\n                            case 'FILE_SIZE_LIMIT_EXCEEDED':\n                                errorMsg = 'File Too Large';\n                                break;\n                            default:\n                                errorMsg = 'Unknown Error';\n                                break;\n                        }\n\n                        // Add the error class to the queue item\n                        file.queueItem.addClass('error')\n                        // Output the error in the queue item\n                        .find('.fileinfo').html(' - ' + errorMsg);\n                        // Hide the \n                        file.queueItem.find('.progress').remove();\n                    }\n                    // Trigger the error event\n                    if (typeof settings.onError === 'function') {\n                        settings.onError.call($this, errorType, file);\n                    }\n                    file.skip = true;\n                    if (errorType == '404_FILE_NOT_FOUND') {\n                        $data.uploads.errors++;\n                    } else {\n                        $data.queue.errors++;\n                    }\n                    if (uploadAll) {\n                        methods.upload.call($this, null, true);\n                    }\n                };\n\n                // Trigger when a single file upload is complete\n                $data.uploadComplete = function (e, file, uploadAll) {\n                    if ($.inArray('onUploadComplete', settings.overrideEvents) < 0) {\n                        file.queueItem.find('.progress-bar').css('width', '100%');\n                        file.queueItem.find('.fileinfo').html(' - Completed');\n                        file.queueItem.find('.progress').slideUp(250);\n                        file.queueItem.addClass('complete');\n                    }\n                    // Trigger the complete event\n                    if (typeof settings.onUploadComplete === 'function') {\n                        settings.onUploadComplete.call($this, file, file.xhr.responseText);\n                    }\n                    if (settings.removeCompleted) {\n                        setTimeout(function () {\n                            methods.cancel.call($this, file);\n                        }, 3000);\n                    }\n                    file.complete = true;\n                    $data.uploads.successful++;\n                    $data.uploads.count++;\n                    $data.uploads.current--;\n                    delete file.xhr;\n                    if (uploadAll) {\n                        methods.upload.call($this, null, true);\n                    }\n                };\n\n                // Trigger when all the files are done uploading\n                $data.queueComplete = function () {\n                    // Trigger the queueComplete event\n                    if (typeof settings.onQueueComplete === 'function') {\n                        settings.onQueueComplete.call($this, $data.uploads);\n                    }\n                };\n\n                // ----------------------\n                // Initialize UploadiFive\n                // ----------------------\n\n                // Check if HTML5 is available\n                if (window.File && window.FileList && window.Blob && (window.FileReader || window.FormData)) {\n                    // Assign an ID to the object\n                    settings.id = 'uploadifive-' + $this.attr('id');\n\n                    // Wrap the file input in a div with overflow set to hidden\n                    $data.button = $('<div id=\"' + settings.id + '\" class=\"uploadifive-button\">' + settings.buttonText + '</div>');\n                    if (settings.buttonClass) $data.button.addClass(settings.buttonClass);\n\n                    // Style the button wrapper\n                    $data.button.css({\n                        'height': settings.height,\n                        'line-height': settings.height + 'px',\n                        'overflow': 'hidden',\n                        'position': 'relative',\n                        'text-align': 'center',\n                        'width': settings.width\n                    });\n\n                    // Insert the button above the file input\n                    $this.before($data.button)\n                    // Add the file input to the button\n                    .appendTo($data.button)\n                    // Modify the styles of the file input\n                    .hide();\n\n                    // Create a new input\n                    $data.createInput.call($this);\n\n                    // Create the queue container\n                    if (!settings.queueID) {\n                        settings.queueID = settings.id + '-queue';\n                        $data.queueEl = $('<div id=\"' + settings.queueID + '\" class=\"uploadifive-queue\" />');\n                        $data.button.after($data.queueEl);\n                    } else {\n                        $data.queueEl = $('#' + settings.queueID);\n                    }\n\n                    // Add drag and drop functionality\n                    if (settings.dnd) {\n                        var $dropTarget = settings.dropTarget ? $(settings.dropTarget) : $data.queueEl.get(0);\n                        $dropTarget.addEventListener('dragleave', function (e) {\n                            // Stop FireFox from opening the dropped file(s)\n                            e.preventDefault();\n                            e.stopPropagation();\n                        }, false);\n                        $dropTarget.addEventListener('dragenter', function (e) {\n                            // Stop FireFox from opening the dropped file(s)\n                            e.preventDefault();\n                            e.stopPropagation();\n                        }, false);\n                        $dropTarget.addEventListener('dragover', function (e) {\n                            // Stop FireFox from opening the dropped file(s)\n                            e.preventDefault();\n                            e.stopPropagation();\n                        }, false);\n                        $dropTarget.addEventListener('drop', $data.drop, false);\n                    }\n\n                    // Send as binary workaround for Chrome\n                    if (!XMLHttpRequest.prototype.sendAsBinary) {\n                        XMLHttpRequest.prototype.sendAsBinary = function (datastr) {\n                            function byteValue(x) {\n                                return x.charCodeAt(0) & 0xff;\n                            }\n                            var ords = Array.prototype.map.call(datastr, byteValue);\n                            var ui8a = new Uint8Array(ords);\n                            this.send(ui8a.buffer);\n                        };\n                    }\n\n                    // Trigger the oninit event\n                    if (typeof settings.onInit === 'function') {\n                        settings.onInit.call($this);\n                    }\n                } else {\n\n                    // Trigger the fallback event\n                    if (typeof settings.onFallback === 'function') {\n                        settings.onFallback.call($this);\n                    }\n                    return false;\n                }\n            });\n        },\n\n        // Write some data to the console\n        debug: function debug() {\n\n            return this.each(function () {\n\n                console.log($(this).data('uploadifive'));\n            });\n        },\n\n        // Clear all the items from the queue\n        clearQueue: function clearQueue() {\n\n            this.each(function () {\n\n                var $this = $(this),\n                    $data = $this.data('uploadifive'),\n                    settings = $data.settings;\n\n                for (var key in $data.inputs) {\n                    input = $data.inputs[key];\n                    limit = input.files.length;\n                    for (i = 0; i < limit; i++) {\n                        file = input.files[i];\n                        methods.cancel.call($this, file);\n                    }\n                }\n                // Trigger the onClearQueue event\n                if (typeof settings.onClearQueue === 'function') {\n                    settings.onClearQueue.call($this, $('#' + $data.settings.queueID));\n                }\n            });\n        },\n\n        // Cancel a file upload in progress or remove a file from the queue\n        cancel: function cancel(file, fast) {\n\n            this.each(function () {\n\n                var $this = $(this),\n                    $data = $this.data('uploadifive'),\n                    settings = $data.settings;\n\n                // If user passed a queue item ID instead of file...\n                if (typeof file === 'string') {\n                    if (!isNaN(file)) {\n                        fileID = 'uploadifive-' + $(this).attr('id') + '-file-' + file;\n                    }\n                    file = $('#' + fileID).data('file');\n                }\n\n                file.skip = true;\n                $data.filesCancelled++;\n                if (file.uploading) {\n                    $data.uploads.current--;\n                    file.uploading = false;\n                    file.xhr.abort();\n                    delete file.xhr;\n                    methods.upload.call($this);\n                }\n                if ($.inArray('onCancel', settings.overrideEvents) < 0) {\n                    $data.removeQueueItem(file, fast);\n                }\n\n                // Trigger the cancel event\n                if (typeof settings.onCancel === 'function') {\n                    settings.onCancel.call($this, file);\n                }\n            });\n        },\n\n        // Upload the files in the queue\n        upload: function upload(file, keepVars) {\n\n            this.each(function () {\n\n                var $this = $(this),\n                    $data = $this.data('uploadifive'),\n                    settings = $data.settings;\n\n                if (file) {\n\n                    $data.uploadFile.call($this, file);\n                } else {\n\n                    // Check if the upload limit was reached\n                    if ($data.uploads.count + $data.uploads.current < settings.uploadLimit || settings.uploadLimit == 0) {\n                        if (!keepVars) {\n                            $data.uploads.attempted = 0;\n                            $data.uploads.successsful = 0;\n                            $data.uploads.errors = 0;\n                            var filesToUpload = $data.filesToUpload();\n                            // Trigger the onUpload event\n                            if (typeof settings.onUpload === 'function') {\n                                settings.onUpload.call($this, filesToUpload);\n                            }\n                        }\n\n                        // Loop through the files\n                        $('#' + settings.queueID).find('.uploadifive-queue-item').not('.error, .complete').each(function () {\n                            _file = $(this).data('file');\n                            // Check if the simUpload limit was reached\n                            if ($data.uploads.current >= settings.simUploadLimit && settings.simUploadLimit !== 0 || $data.uploads.current >= settings.uploadLimit && settings.uploadLimit !== 0 || $data.uploads.count >= settings.uploadLimit && settings.uploadLimit !== 0) {\n                                return false;\n                            }\n                            if (settings.checkScript) {\n                                // Let the loop know that we're already processing this file\n                                _file.checking = true;\n                                skipFile = $data.checkExists(_file);\n                                _file.checking = false;\n                                if (!skipFile) {\n                                    $data.uploadFile(_file, true);\n                                }\n                            } else {\n                                $data.uploadFile(_file, true);\n                            }\n                        });\n                        if ($('#' + settings.queueID).find('.uploadifive-queue-item').not('.error, .complete').size() == 0) {\n                            $data.queueComplete();\n                        }\n                    } else {\n                        if ($data.uploads.current == 0) {\n                            if ($.inArray('onError', settings.overrideEvents) < 0) {\n                                if ($data.filesToUpload() > 0 && settings.uploadLimit != 0) {\n                                    alert('The maximum upload limit has been reached.');\n                                }\n                            }\n                            // Trigger the onError event\n                            if (typeof settings.onError === 'function') {\n                                settings.onError.call($this, 'UPLOAD_LIMIT_EXCEEDED', $data.filesToUpload());\n                            }\n                        }\n                    }\n                }\n            });\n        },\n\n        // Destroy an instance of UploadiFive\n        destroy: function destroy() {\n\n            this.each(function () {\n\n                var $this = $(this),\n                    $data = $this.data('uploadifive'),\n                    settings = $data.settings;\n\n                // Clear the queue\n                methods.clearQueue.call($this);\n                // Destroy the queue if it was created\n                if (!settings.queueID) $('#' + settings.queueID).remove();\n                // Remove extra inputs\n                $this.siblings('input').remove();\n                // Show the original file input\n                $this.show()\n                // Move the file input out of the button\n                .insertBefore($data.button);\n\n                $data.button.remove();\n                // Trigger the destroy event\n                if (typeof settings.onDestroy === 'function') {\n                    settings.onDestroy.call($this);\n                }\n            });\n        }\n\n    };\n\n    $.fn.uploadifive = function (method) {\n\n        if (methods[method]) {\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n        } else if ((typeof method === 'undefined' ? 'undefined' : _typeof(method)) === 'object' || !method) {\n            return methods.init.apply(this, arguments);\n        } else {\n            $.error('The method ' + method + ' does not exist in $.uploadify');\n        }\n    };\n})(jQuery);"]}