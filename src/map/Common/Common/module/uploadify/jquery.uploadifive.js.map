{"version":3,"sources":["Common/Common/module/uploadify/jquery.uploadifive.js"],"names":["$","methods","init","options","this","each","$this","data","inputs","inputCount","fileID","queue","count","selected","replaced","errors","queued","cancelled","uploads","current","attempts","successful","$data","settings","extend","auto","buttonClass","buttonText","checkScript","dnd","dropTarget","fileObjName","fileSizeLimit","fileType","formData","height","itemTemplate","method","multi","overrideEvents","queueID","queueSizeLimit","removeCompleted","simUploadLimit","truncateLength","uploadLimit","uploadScript","width","isNaN","fileSizeLimitBytes","parseInt","indexOf","inputTemplate","css","font-size","opacity","position","right","top","z-index","createInput","input","clone","inputName","name","attr","bind","limit","files","length","inArray","alert","onError","call","n","file","addQueueItem","upload","onSelect","currentInput","hide","button","append","destroyInput","key","remove","drop","e","fileData","dataTransfer","onDrop","preventDefault","stopPropagation","fileExistsInQueue","existingFile","complete","removeExistingFile","cancel","queueItem","id","find","fileName","substring","html","queueEl","onAddQueueItem","size","error","removeQueueItem","instant","delay","fadeTime","fadeOut","filesToUpload","skip","checkExists","ajaxSetup","async","checkData","filename","post","fileExists","exists","confirm","onCheck","uploadFile","uploadAll","uploading","attempted","xhr","XMLHttpRequest","FormData","i","open","addEventListener","lengthComputable","progress","readyState","status","responseText","uploadComplete","send","reader","FileReader","onload","boundary","Date","getTime","dashes","eol","binFile","target","result","param","setRequestHeader","onUploadFile","sendAsBinary","readAsBinaryString","percent","Math","round","loaded","total","onProgress","errorType","errorMsg","addClass","slideUp","onUploadComplete","setTimeout","queueComplete","onQueueComplete","window","File","FileList","Blob","onFallback","line-height","overflow","text-align","before","appendTo","after","$dropTarget","get","prototype","datastr","ords","Array","map","x","charCodeAt","ui8a","Uint8Array","buffer","onInit","debug","console","log","clearQueue","onClearQueue","fast","filesCancelled","abort","onCancel","keepVars","successsful","onUpload","not","_file","checking","skipFile","destroy","siblings","show","insertBefore","onDestroy","fn","uploadifive","apply","slice","arguments","jQuery"],"mappings":"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","file":"../../../../../../temporaryJs/Common/Common/module/uploadify/jquery.uploadifive.js","sourcesContent":["/*\r\nUploadiFive 1.2.2\r\nCopyright (c) 2012 Reactive Apps, Ronnie Garcia\r\nReleased under the UploadiFive Standard License <http://www.uploadify.com/uploadifive-standard-license>\r\n*/\r\n;(function($) {\r\n\r\n    var methods = {\r\n\r\n        init : function(options) {\r\n            \r\n            return this.each(function() {\r\n\r\n                // Create a reference to the jQuery DOM object\r\n                var $this = $(this);\r\n                    $this.data('uploadifive', {\r\n                        inputs     : {}, // The object that contains all the file inputs\r\n                        inputCount : 0,  // The total number of file inputs created\r\n                        fileID     : 0,\r\n                        queue      : {\r\n                                         count      : 0, // Total number of files in the queue\r\n                                         selected   : 0, // Number of files selected in the last select operation\r\n                                         replaced   : 0, // Number of files replaced in the last select operation\r\n                                         errors     : 0, // Number of files that returned an error in the last select operation\r\n                                         queued     : 0, // Number of files added to the queue in the last select operation\r\n                                         cancelled  : 0  // Total number of files that have been cancelled or removed from the queue\r\n                                     },\r\n                        uploads    : {\r\n                                         current    : 0, // Number of files currently being uploaded\r\n                                         attempts   : 0, // Number of file uploads attempted in the last upload operation\r\n                                         successful : 0, // Number of files successfully uploaded in the last upload operation\r\n                                         errors     : 0, // Number of files returning errors in the last upload operation\r\n                                         count      : 0  // Total number of files uploaded successfully\r\n                                     }\r\n                    });\r\n                var $data = $this.data('uploadifive');\r\n\r\n                // Set the default options\r\n                var settings = $data.settings = $.extend({\r\n                    'auto'            : true,               // Automatically upload a file when it's added to the queue\r\n                    'buttonClass'     : false,              // A class to add to the UploadiFive button\r\n                    'buttonText'      : 'Select Files',     // The text that appears on the UploadiFive button\r\n                    'checkScript'     : false,              // Path to the script that checks for existing file names \r\n                    'dnd'             : true,               // Allow drag and drop into the queue\r\n                    'dropTarget'      : false,              // Selector for the drop target\r\n                    'fileObjName'     : 'Filedata',         // The name of the file object to use in your server-side script\r\n                    'fileSizeLimit'   : 0,                  // Maximum allowed size of files to upload\r\n                    'fileType'        : false,              // Type of files allowed (image, etc), separate with a pipe character |\r\n                    'formData'        : {},                 // Additional data to send to the upload script\r\n                    'height'          : 30,                 // The height of the button\r\n                    'itemTemplate'    : false,              // The HTML markup for the item in the queue\r\n                    'method'          : 'post',             // The method to use when submitting the upload\r\n                    'multi'           : true,               // Set to true to allow multiple file selections\r\n                    'overrideEvents'  : [],                 // An array of events to override\r\n                    'queueID'         : false,              // The ID of the file queue\r\n                    'queueSizeLimit'  : 0,                  // The maximum number of files that can be in the queue\r\n                    'removeCompleted' : false,              // Set to true to remove files that have completed uploading\r\n                    'simUploadLimit'  : 0,                  // The maximum number of files to upload at once\r\n                    'truncateLength'  : 0,                  // The length to truncate the file names to\r\n                    'uploadLimit'     : 0,                  // The maximum number of files you can upload\r\n                    'uploadScript'    : 'uploadifive.php',  // The path to the upload script\r\n                    'width'           : 100                 // The width of the button\r\n\r\n                    /*\r\n                    // Events\r\n                    'onAddQueueItem'   : function(file) {},                        // Triggered for each file that is added to the queue\r\n                    'onCancel'         : function(file) {},                        // Triggered when a file is cancelled or removed from the queue\r\n                    'onCheck'          : function(file, exists) {},                // Triggered when the server is checked for an existing file\r\n                    'onClearQueue'     : function(queue) {},                       // Triggered during the clearQueue function\r\n                    'onDestroy'        : function() {}                             // Triggered during the destroy function\r\n                    'onDrop'           : function(files, numberOfFilesDropped) {}, // Triggered when files are dropped into the file queue\r\n                    'onError'          : function(file, fileType, data) {},        // Triggered when an error occurs\r\n                    'onFallback'       : function() {},                            // Triggered if the HTML5 File API is not supported by the browser\r\n                    'onInit'           : function() {},                            // Triggered when UploadiFive if initialized\r\n                    'onQueueComplete'  : function() {},                            // Triggered once when an upload queue is done\r\n                    'onProgress'       : function(file, event) {},                 // Triggered during each progress update of an upload\r\n                    'onSelect'         : function() {},                            // Triggered once when files are selected from a dialog box\r\n                    'onUpload'         : function(file) {},                        // Triggered when an upload queue is started\r\n                    'onUploadComplete' : function(file, data) {},                  // Triggered when a file is successfully uploaded\r\n                    'onUploadFile'     : function(file) {},                        // Triggered for each file being uploaded\r\n                    */\r\n                }, options);\r\n\r\n                // Calculate the file size limit\r\n                if (isNaN(settings.fileSizeLimit)) {\r\n                    var fileSizeLimitBytes = parseInt(settings.fileSizeLimit) * 1.024\r\n                    if (settings.fileSizeLimit.indexOf('KB') > -1) {\r\n                        settings.fileSizeLimit = fileSizeLimitBytes * 1000;\r\n                    } else if (settings.fileSizeLimit.indexOf('MB') > -1) {\r\n                        settings.fileSizeLimit = fileSizeLimitBytes * 1000000;\r\n                    } else if (settings.fileSizeLimit.indexOf('GB') > -1) {\r\n                        settings.fileSizeLimit = fileSizeLimitBytes * 1000000000;\r\n                    }\r\n                } else {\r\n                    settings.fileSizeLimit = settings.fileSizeLimit * 1024;\r\n                }\r\n\r\n                // Create a template for a file input\r\n                $data.inputTemplate = $('<input type=\"file\">')\r\n                .css({\r\n                    'font-size' : settings.height + 'px',\r\n                    'opacity'   : 0,\r\n                    'position'  : 'absolute',\r\n                    'right'     : '-3px',\r\n                    'top'       : '-3px',\r\n                    'z-index'   : 999 \r\n                });\r\n\r\n                // Create a new input\r\n                $data.createInput = function() {\r\n\r\n                    // Create a clone of the file input\r\n                    var input     = $data.inputTemplate.clone();\r\n                    // Create a unique name for the input item\r\n                    var inputName = input.name = 'input' + $data.inputCount++;\r\n                    // Set the multiple attribute\r\n                    if (settings.multi) {\r\n                        input.attr('multiple', true);\r\n                    }\r\n                    // Set the accept attribute on the input\r\n                    if (settings.fileType) {\r\n                        input.attr('accept', settings.fileType);\r\n                    }\r\n                    // Set the onchange event for the input\r\n                    input.bind('change', function() {\r\n                        $data.queue.selected = 0;\r\n                        $data.queue.replaced = 0;\r\n                        $data.queue.errors   = 0;\r\n                        $data.queue.queued   = 0;\r\n                        // Add a queue item to the queue for each file\r\n                        var limit = this.files.length;\r\n                        $data.queue.selected = limit;\r\n                        if (($data.queue.count + limit) > settings.queueSizeLimit && settings.queueSizeLimit !== 0) {\r\n                            if ($.inArray('onError', settings.overrideEvents) < 0) {\r\n                                alert('The maximum number of queue items has been reached (' + settings.queueSizeLimit + ').  Please select fewer files.');\r\n                            }\r\n                            // Trigger the error event\r\n                            if (typeof settings.onError === 'function') {\r\n                                settings.onError.call($this, 'QUEUE_LIMIT_EXCEEDED');\r\n                            }\r\n                        } else {\r\n                            for (var n = 0; n < limit; n++) {\r\n                                file = this.files[n];\r\n                                $data.addQueueItem(file);\r\n                            }\r\n                            $data.inputs[inputName] = this;\r\n                            $data.createInput();\r\n                        }\r\n                        // Upload the file if auto-uploads are enabled\r\n                        if (settings.auto) {\r\n                            methods.upload.call($this);\r\n                        }\r\n                        // Trigger the select event\r\n                        if (typeof settings.onSelect === 'function') {\r\n                            settings.onSelect.call($this, $data.queue);\r\n                        }\r\n                    });\r\n                    // Hide the existing current item and add the new one\r\n                    if ($data.currentInput) {\r\n                        $data.currentInput.hide();\r\n                    }\r\n                    $data.button.append(input);\r\n                    $data.currentInput = input;\r\n                }\r\n\r\n                // Remove an input\r\n                $data.destroyInput = function(key) {\r\n                    $($data.inputs[key]).remove();\r\n                    delete $data.inputs[key];\r\n                    $data.inputCount--;\r\n                }\r\n\r\n                // Drop a file into the queue\r\n                $data.drop = function(e) {\r\n                    $data.queue.selected = 0;\r\n                    $data.queue.replaced = 0;\r\n                    $data.queue.errors   = 0;\r\n                    $data.queue.queued   = 0;\r\n\r\n                    var fileData = e.dataTransfer;\r\n\r\n                    var inputName = fileData.name = 'input' + $data.inputCount++;\r\n                    // Add a queue item to the queue for each file\r\n                    var limit = fileData.files.length;\r\n                    $data.queue.selected = limit;\r\n                    if (($data.queue.count + limit) > settings.queueSizeLimit && settings.queueSizeLimit !== 0) {\r\n                        // Check if the queueSizeLimit was reached\r\n                        if ($.inArray('onError', settings.overrideEvents) < 0) {\r\n                            alert('The maximum number of queue items has been reached (' + settings.queueSizeLimit + ').  Please select fewer files.');\r\n                        }\r\n                        // Trigger the onError event\r\n                        if (typeof settings.onError === 'function') {\r\n                            settings.onError.call($this, 'QUEUE_LIMIT_EXCEEDED');\r\n                        }\r\n                    } else {\r\n                        // Add a queue item for each file\r\n                        for (var n = 0; n < limit; n++) {\r\n                            file = fileData.files[n];\r\n                            $data.addQueueItem(file);\r\n                        }\r\n                        // Save the data to the inputs object\r\n                        $data.inputs[inputName] = fileData;\r\n                    }\r\n\r\n                    // Upload the file if auto-uploads are enabled\r\n                    if (settings.auto) {\r\n                        methods.upload.call($this);\r\n                    }\r\n\r\n                    // Trigger the onDrop event\r\n                    if (typeof settings.onDrop === 'function') {\r\n                        settings.onDrop.call($this, fileData.files, fileData.files.length);\r\n                    }\r\n\r\n                    // Stop FireFox from opening the dropped file(s)\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                }\r\n\r\n                // Check if a filename exists in the queue\r\n                $data.fileExistsInQueue = function(file) {\r\n                    for (var key in $data.inputs) {\r\n                        input = $data.inputs[key];\r\n                        limit = input.files.length;\r\n                        for (var n = 0; n < limit; n++) {\r\n                            existingFile = input.files[n];\r\n                            // Check if the filename matches\r\n                            if (existingFile.name == file.name && !existingFile.complete) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                // Remove an existing file in the queue\r\n                $data.removeExistingFile = function(file) {\r\n                    for (var key in $data.inputs) {\r\n                        input = $data.inputs[key];\r\n                        limit = input.files.length;\r\n                        for (var n = 0; n < limit; n++) {\r\n                            existingFile = input.files[n];\r\n                            // Check if the filename matches\r\n                            if (existingFile.name == file.name && !existingFile.complete) {\r\n                                $data.queue.replaced++;\r\n                                methods.cancel.call($this, existingFile, true);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Create the file item template\r\n                if (settings.itemTemplate == false) {\r\n                    $data.queueItem = $('<div class=\"uploadifive-queue-item\">\\\r\n                        <a class=\"close\" href=\"#\">X</a>\\\r\n                        <div><span class=\"filename\"></span><span class=\"fileinfo\"></span></div>\\\r\n                        <div class=\"progress\">\\\r\n                            <div class=\"progress-bar\"></div>\\\r\n                        </div>\\\r\n                    </div>');\r\n                } else {\r\n                    $data.queueItem = $(settings.itemTemplate);\r\n                }\r\n\r\n                // Add an item to the queue\r\n                $data.addQueueItem = function(file) {\r\n                    if ($.inArray('onAddQueueItem', settings.overrideEvents) < 0) {\r\n                        // Check if the filename already exists in the queue\r\n                        $data.removeExistingFile(file);\r\n                        // Create a clone of the queue item template\r\n                        file.queueItem = $data.queueItem.clone();\r\n                        // Add an ID to the queue item\r\n                        file.queueItem.attr('id', settings.id + '-file-' + $data.fileID++);\r\n                        // Bind the close event to the close button\r\n                        file.queueItem.find('.close').bind('click', function() {\r\n                           methods.cancel.call($this, file);\r\n                           return false;\r\n                        });\r\n                        var fileName = file.name;\r\n                        if (fileName.length > settings.truncateLength && settings.truncateLength != 0) {\r\n                            fileName = fileName.substring(0, settings.truncateLength) + '...';\r\n                        }\r\n                        file.queueItem.find('.filename').html(fileName);\r\n                        // Add a reference to the file\r\n                        file.queueItem.data('file', file);\r\n                        $data.queueEl.append(file.queueItem);\r\n                    }\r\n                    // Trigger the addQueueItem event\r\n                    if (typeof settings.onAddQueueItem === 'function') {\r\n                        settings.onAddQueueItem.call($this, file);\r\n                    }\r\n                    // Check the filesize\r\n                    if (file.size > settings.fileSizeLimit && settings.fileSizeLimit != 0) {\r\n                        $data.error('FILE_SIZE_LIMIT_EXCEEDED', file);\r\n                    } else {\r\n                        $data.queue.queued++;\r\n                        $data.queue.count++;\r\n                    }\r\n                }\r\n\r\n                // Remove an item from the queue\r\n                $data.removeQueueItem = function(file, instant, delay) {\r\n                    // Set the default delay\r\n                    if (!delay) delay = 0;\r\n                    var fadeTime = instant ? 0 : 500;\r\n                    if (file.queueItem) {\r\n                        if (file.queueItem.find('.fileinfo').html() != ' - Completed') {\r\n                            file.queueItem.find('.fileinfo').html(' - Cancelled');\r\n                        }\r\n                        file.queueItem.find('.progress-bar').width(0);\r\n                        file.queueItem.delay(delay).fadeOut(fadeTime, function() {\r\n                           $(this).remove();\r\n                        });\r\n                        delete file.queueItem;\r\n                        $data.queue.count--;\r\n                    }\r\n                }\r\n\r\n                // Count the number of files that need to be uploaded\r\n                $data.filesToUpload = function() {\r\n                    var filesToUpload = 0;\r\n                    for (var key in $data.inputs) {\r\n                        input = $data.inputs[key];\r\n                        limit = input.files.length;\r\n                        for (var n = 0; n < limit; n++) {\r\n                            file = input.files[n];\r\n                            if (!file.skip && !file.complete) {\r\n                                filesToUpload++;\r\n                            }\r\n                        }\r\n                    }\r\n                    return filesToUpload;\r\n                }\r\n\r\n                // Check if a file exists\r\n                $data.checkExists = function(file) {\r\n                    if ($.inArray('onCheck', settings.overrideEvents) < 0) {\r\n                        // This request needs to be synchronous\r\n                        $.ajaxSetup({\r\n                            'async' : false\r\n                        });\r\n                        // Send the filename to the check script\r\n                        var checkData = $.extend(settings.formData, {filename: file.name});\r\n                        $.post(settings.checkScript, checkData, function(fileExists) {\r\n                            file.exists = parseInt(fileExists);\r\n                        });\r\n                        if (file.exists) {\r\n                            if (!confirm('A file named ' + file.name + ' already exists in the upload folder.\\nWould you like to replace it?')) {\r\n                                // If not replacing the file, cancel the upload\r\n                                methods.cancel.call($this, file);\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    // Trigger the check event\r\n                    if (typeof settings.onCheck === 'function') {\r\n                        settings.onCheck.call($this, file, file.exists);\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                // Upload a single file\r\n                $data.uploadFile = function(file, uploadAll) {\r\n                    if (!file.skip && !file.complete && !file.uploading) {\r\n                        file.uploading = true;\r\n                        $data.uploads.current++;\r\n                        $data.uploads.attempted++;\r\n\r\n                        // Create a new AJAX request\r\n                        xhr = file.xhr = new XMLHttpRequest();\r\n\r\n                        // Start the upload\r\n                        // Use the faster FormData if it exists\r\n                        if (typeof FormData === 'function' || typeof FormData === 'object') {\r\n\r\n                            // Create a new FormData object\r\n                            var formData = new FormData();\r\n\r\n                            // Add the form data\r\n                            formData.append(settings.fileObjName, file);\r\n\r\n                            // Add the rest of the formData\r\n                            for (i in settings.formData) {\r\n                                formData.append(i, settings.formData[i]);\r\n                            }\r\n\r\n                            // Open the AJAX call\r\n                            xhr.open(settings.method, settings.uploadScript, true);\r\n\r\n                            // On progress function\r\n                            xhr.upload.addEventListener('progress', function(e) {\r\n                                if (e.lengthComputable) {\r\n                                    $data.progress(e, file);\r\n                                }\r\n                            }, false);\r\n\r\n                            // On complete function\r\n                            xhr.addEventListener('load', function(e) {\r\n                                if (this.readyState == 4) {\r\n                                    file.uploading = false;\r\n                                    if (this.status == 200) {\r\n                                        if (file.xhr.responseText !== 'Invalid file type.') {\r\n                                            $data.uploadComplete(e, file, uploadAll);\r\n                                        } else {\r\n                                            $data.error(file.xhr.responseText, file, uploadAll);\r\n                                        }\r\n                                    } else if (this.status == 404) {\r\n                                        $data.error('404_FILE_NOT_FOUND', file, uploadAll);\r\n                                    } else if (this.status == 403) {\r\n                                        $data.error('403_FORBIDDEN', file, uploadAll);\r\n                                    } else {\r\n                                        $data.error('Unknown Error', file, uploadAll);\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            // Send the form data (multipart/form-data)\r\n                            xhr.send(formData);\r\n\r\n                        } else {\r\n\r\n                            // Send as binary\r\n                            var reader = new FileReader();\r\n                            reader.onload = function(e) {\r\n\r\n                                // Set some file builder variables\r\n                                var boundary = '-------------------------' + (new Date).getTime(),\r\n                                    dashes   = '--',\r\n                                    eol      = '\\r\\n',\r\n                                    binFile  = '';\r\n\r\n                                // Build an RFC2388 String \r\n                                binFile += dashes + boundary + eol;\r\n                                // Generate the headers\r\n                                binFile += 'Content-Disposition: form-data; name=\"' + settings.fileObjName + '\"';\r\n                                if (file.name) {\r\n                                    binFile += '; filename=\"' + file.name + '\"';\r\n                                }\r\n                                binFile += eol;\r\n                                binFile += 'Content-Type: application/octet-stream' + eol + eol;\r\n                                binFile += e.target.result + eol;\r\n\r\n                                for (key in settings.formData) {\r\n                                    binFile += dashes + boundary + eol;\r\n                                    binFile += 'Content-Disposition: form-data; name=\"' + key + '\"' + eol + eol;\r\n                                    binFile += settings.formData[key] + eol;\r\n                                }\r\n\r\n                                binFile += dashes + boundary + dashes + eol;\r\n\r\n                                // On progress function\r\n                                xhr.upload.addEventListener('progress', function(e) {\r\n                                    $data.progress(e, file);\r\n                                }, false);\r\n\r\n                                // On complete function\r\n                                xhr.addEventListener('load', function(e) {\r\n                                    file.uploading = false;\r\n                                    var status = this.status;\r\n                                    if (status == 404) {\r\n                                        $data.error('404_FILE_NOT_FOUND', file, uploadAll);\r\n                                    } else {\r\n                                        if (file.xhr.responseText != 'Invalid file type.') {    \r\n                                            $data.uploadComplete(e, file, uploadAll);\r\n                                        } else {\r\n                                            $data.error(file.xhr.responseText, file, uploadAll);\r\n                                        } \r\n                                    }\r\n                                }, false);\r\n\r\n                                // Open the ajax request\r\n                                var url = settings.uploadScript;\r\n                                if (settings.method == 'get') {\r\n                                    var params = $(settings.formData).param();\r\n                                    url += params;\r\n                                }\r\n                                xhr.open(settings.method, settings.uploadScript, true);\r\n                                xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\r\n\r\n                                // Trigger the uploadFile event\r\n                                if (typeof settings.onUploadFile === 'function') {\r\n                                    settings.onUploadFile.call($this, file);\r\n                                }\r\n\r\n                                // Send the file for upload\r\n                                xhr.sendAsBinary(binFile);\r\n                            }\r\n                            reader.readAsBinaryString(file);\r\n\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Update a file upload's progress\r\n                $data.progress = function(e, file) {\r\n                    if ($.inArray('onProgress', settings.overrideEvents) < 0) {\r\n                        if (e.lengthComputable) {\r\n                            var percent = Math.round((e.loaded / e.total) * 100);\r\n                        }\r\n                        file.queueItem.find('.fileinfo').html(' - ' + percent + '%');\r\n                        file.queueItem.find('.progress-bar').css('width', percent + '%');\r\n                    }\r\n                    // Trigger the progress event\r\n                    if (typeof settings.onProgress === 'function') {\r\n                        settings.onProgress.call($this, file, e);\r\n                    }\r\n                }\r\n\r\n                // Trigger an error\r\n                $data.error = function(errorType, file, uploadAll) {\r\n                    if ($.inArray('onError', settings.overrideEvents) < 0) {\r\n                        // Get the error message\r\n                        switch(errorType) {\r\n                            case '404_FILE_NOT_FOUND':\r\n                                errorMsg = '404 Error';\r\n                                break;\r\n                            case '403_FORBIDDEN':\r\n                                errorMsg = '403 Forbidden';\r\n                                break;\r\n                            case 'FORBIDDEN_FILE_TYPE':\r\n                                errorMsg = 'Forbidden File Type';\r\n                                break;\r\n                            case 'FILE_SIZE_LIMIT_EXCEEDED':\r\n                                errorMsg = 'File Too Large';\r\n                                break;\r\n                            default:\r\n                                errorMsg = 'Unknown Error';\r\n                                break;\r\n                        }\r\n\r\n                        // Add the error class to the queue item\r\n                        file.queueItem.addClass('error')\r\n                        // Output the error in the queue item\r\n                        .find('.fileinfo').html(' - ' + errorMsg);\r\n                        // Hide the \r\n                        file.queueItem.find('.progress').remove();\r\n                    }\r\n                    // Trigger the error event\r\n                    if (typeof settings.onError === 'function') {\r\n                        settings.onError.call($this, errorType, file);\r\n                    }\r\n                    file.skip = true;\r\n                    if (errorType == '404_FILE_NOT_FOUND') {\r\n                        $data.uploads.errors++;\r\n                    } else {\r\n                        $data.queue.errors++;\r\n                    }\r\n                    if (uploadAll) {\r\n                        methods.upload.call($this, null, true);\r\n                    }\r\n                }\r\n\r\n                // Trigger when a single file upload is complete\r\n                $data.uploadComplete = function(e, file, uploadAll) {\r\n                    if ($.inArray('onUploadComplete', settings.overrideEvents) < 0) {\r\n                        file.queueItem.find('.progress-bar').css('width', '100%');\r\n                        file.queueItem.find('.fileinfo').html(' - Completed');\r\n                        file.queueItem.find('.progress').slideUp(250);\r\n                        file.queueItem.addClass('complete');\r\n                    }\r\n                    // Trigger the complete event\r\n                    if (typeof settings.onUploadComplete === 'function') {\r\n                        settings.onUploadComplete.call($this, file, file.xhr.responseText);\r\n                    }\r\n                    if (settings.removeCompleted) {\r\n                        setTimeout(function() { methods.cancel.call($this, file); }, 3000);\r\n                    }\r\n                    file.complete = true;\r\n                    $data.uploads.successful++;\r\n                    $data.uploads.count++;\r\n                    $data.uploads.current--;\r\n                    delete file.xhr;\r\n                    if (uploadAll) {\r\n                        methods.upload.call($this, null, true);\r\n                    }\r\n                }\r\n\r\n                // Trigger when all the files are done uploading\r\n                $data.queueComplete = function() {\r\n                    // Trigger the queueComplete event\r\n                    if (typeof settings.onQueueComplete === 'function') {\r\n                        settings.onQueueComplete.call($this, $data.uploads);\r\n                    }\r\n                }\r\n\r\n                // ----------------------\r\n                // Initialize UploadiFive\r\n                // ----------------------\r\n\r\n                // Check if HTML5 is available\r\n                if (window.File && window.FileList && window.Blob && (window.FileReader || window.FormData)) {\r\n                    // Assign an ID to the object\r\n                    settings.id = 'uploadifive-' + $this.attr('id');\r\n\r\n                    // Wrap the file input in a div with overflow set to hidden\r\n                    $data.button = $('<div id=\"' + settings.id + '\" class=\"uploadifive-button\">' + settings.buttonText + '</div>');\r\n                    if (settings.buttonClass) $data.button.addClass(settings.buttonClass);\r\n\r\n                    // Style the button wrapper\r\n                    $data.button.css({\r\n                        'height'      : settings.height,\r\n                        'line-height' : settings.height + 'px', \r\n                        'overflow'    : 'hidden',\r\n                        'position'    : 'relative',\r\n                        'text-align'  : 'center', \r\n                        'width'       : settings.width\r\n                    });\r\n\r\n                    // Insert the button above the file input\r\n                    $this.before($data.button)\r\n                    // Add the file input to the button\r\n                    .appendTo($data.button)\r\n                    // Modify the styles of the file input\r\n                    .hide();\r\n\r\n                    // Create a new input\r\n                    $data.createInput.call($this);\r\n\r\n                    // Create the queue container\r\n                    if (!settings.queueID) {\r\n                        settings.queueID = settings.id + '-queue';\r\n                        $data.queueEl = $('<div id=\"' + settings.queueID + '\" class=\"uploadifive-queue\" />');\r\n                        $data.button.after($data.queueEl);\r\n                    } else {\r\n                        $data.queueEl = $('#' + settings.queueID);\r\n                    }\r\n\r\n                    // Add drag and drop functionality\r\n                    if (settings.dnd) {\r\n                        var $dropTarget = settings.dropTarget ? $(settings.dropTarget) : $data.queueEl.get(0);\r\n                        $dropTarget.addEventListener('dragleave', function(e) {\r\n                            // Stop FireFox from opening the dropped file(s)\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                        }, false);\r\n                        $dropTarget.addEventListener('dragenter', function(e) {\r\n                            // Stop FireFox from opening the dropped file(s)\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                        }, false);\r\n                        $dropTarget.addEventListener('dragover', function(e) {\r\n                            // Stop FireFox from opening the dropped file(s)\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                        }, false);\r\n                        $dropTarget.addEventListener('drop', $data.drop, false);\r\n                    }\r\n\r\n                    // Send as binary workaround for Chrome\r\n                    if (!XMLHttpRequest.prototype.sendAsBinary) {\r\n                        XMLHttpRequest.prototype.sendAsBinary = function(datastr) {\r\n                            function byteValue(x) {\r\n                                return x.charCodeAt(0) & 0xff;\r\n                            }\r\n                            var ords = Array.prototype.map.call(datastr, byteValue);\r\n                            var ui8a = new Uint8Array(ords);\r\n                            this.send(ui8a.buffer);\r\n                        }\r\n                    }\r\n\r\n                    // Trigger the oninit event\r\n                    if (typeof settings.onInit === 'function') {\r\n                        settings.onInit.call($this);\r\n                    }\r\n\r\n                } else {\r\n\r\n                    // Trigger the fallback event\r\n                    if (typeof settings.onFallback === 'function') {\r\n                        settings.onFallback.call($this);\r\n                    }\r\n                    return false;\r\n\r\n                }\r\n\r\n            });\r\n\r\n        },\r\n\r\n\r\n        // Write some data to the console\r\n        debug : function() {\r\n\r\n            return this.each(function() {\r\n\r\n                console.log($(this).data('uploadifive'));\r\n\r\n            });\r\n\r\n        },\r\n\r\n        // Clear all the items from the queue\r\n        clearQueue : function() {\r\n\r\n            this.each(function() {\r\n\r\n                var $this    = $(this),\r\n                    $data    = $this.data('uploadifive'),\r\n                    settings = $data.settings;\r\n\r\n                for (var key in $data.inputs) {\r\n                    input = $data.inputs[key];\r\n                    limit = input.files.length;\r\n                    for (i = 0; i < limit; i++) {\r\n                        file = input.files[i];\r\n                        methods.cancel.call($this, file);\r\n                    }\r\n                }\r\n                // Trigger the onClearQueue event\r\n                if (typeof settings.onClearQueue === 'function') {\r\n                    settings.onClearQueue.call($this, $('#' + $data.settings.queueID));\r\n                }\r\n\r\n            });\r\n\r\n        },\r\n\r\n        // Cancel a file upload in progress or remove a file from the queue\r\n        cancel : function(file, fast) {\r\n\r\n            this.each(function() {\r\n\r\n                var $this    = $(this),\r\n                    $data    = $this.data('uploadifive'),\r\n                    settings = $data.settings;\r\n\r\n                // If user passed a queue item ID instead of file...\r\n                if (typeof file === 'string') {\r\n                    if (!isNaN(file)) {\r\n                        fileID = 'uploadifive-' + $(this).attr('id') + '-file-' + file;\r\n                    }\r\n                    file = $('#' + fileID).data('file');\r\n                }\r\n\r\n                file.skip = true;\r\n                $data.filesCancelled++;\r\n                if (file.uploading) {\r\n                    $data.uploads.current--;\r\n                    file.uploading = false;\r\n                    file.xhr.abort();\r\n                    delete file.xhr;\r\n                    methods.upload.call($this);\r\n                }\r\n                if ($.inArray('onCancel', settings.overrideEvents) < 0) {\r\n                    $data.removeQueueItem(file, fast);\r\n                }\r\n\r\n                // Trigger the cancel event\r\n                if (typeof settings.onCancel === 'function') {\r\n                    settings.onCancel.call($this, file);\r\n                }\r\n                \r\n            });\r\n            \r\n        },\r\n\r\n        // Upload the files in the queue\r\n        upload : function(file, keepVars) {\r\n\r\n            this.each(function() {\r\n\r\n                var $this    = $(this),\r\n                    $data    = $this.data('uploadifive'),\r\n                    settings = $data.settings;\r\n\r\n                if (file) {\r\n\r\n                    $data.uploadFile.call($this, file);\r\n\r\n                } else {\r\n\r\n                    // Check if the upload limit was reached\r\n                    if (($data.uploads.count + $data.uploads.current) < settings.uploadLimit || settings.uploadLimit == 0) {\r\n                        if (!keepVars) {\r\n                            $data.uploads.attempted   = 0;\r\n                            $data.uploads.successsful = 0;\r\n                            $data.uploads.errors      = 0;\r\n                            var filesToUpload = $data.filesToUpload();\r\n                            // Trigger the onUpload event\r\n                            if (typeof settings.onUpload === 'function') {\r\n                                settings.onUpload.call($this, filesToUpload);\r\n                            }\r\n                        }\r\n\r\n                        // Loop through the files\r\n                        $('#' + settings.queueID).find('.uploadifive-queue-item').not('.error, .complete').each(function() {\r\n                            _file = $(this).data('file');\r\n                            // Check if the simUpload limit was reached\r\n                            if (($data.uploads.current >= settings.simUploadLimit && settings.simUploadLimit !== 0) || ($data.uploads.current >= settings.uploadLimit && settings.uploadLimit !== 0) || ($data.uploads.count >= settings.uploadLimit && settings.uploadLimit !== 0)) {\r\n                                return false;\r\n                            }\r\n                            if (settings.checkScript) {\r\n                                // Let the loop know that we're already processing this file\r\n                                _file.checking = true;\r\n                                skipFile = $data.checkExists(_file);\r\n                                _file.checking = false;\r\n                                if (!skipFile) {\r\n                                    $data.uploadFile(_file, true);\r\n                                }\r\n                            } else {\r\n                                $data.uploadFile(_file, true);\r\n                            }\r\n                        });\r\n                        if ($('#' + settings.queueID).find('.uploadifive-queue-item').not('.error, .complete').size() == 0) {\r\n                            $data.queueComplete();\r\n                        }\r\n                    } else {\r\n                        if ($data.uploads.current == 0) {\r\n                            if ($.inArray('onError', settings.overrideEvents) < 0) {\r\n                                if ($data.filesToUpload() > 0 && settings.uploadLimit != 0) {\r\n                                    alert('The maximum upload limit has been reached.');\r\n                                }\r\n                            }\r\n                            // Trigger the onError event\r\n                            if (typeof settings.onError === 'function') {\r\n                                settings.onError.call($this, 'UPLOAD_LIMIT_EXCEEDED', $data.filesToUpload());\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            });\r\n\r\n        },\r\n\r\n        // Destroy an instance of UploadiFive\r\n        destroy : function() {\r\n\r\n            this.each(function() {\r\n\r\n                var $this    = $(this),\r\n                    $data    = $this.data('uploadifive'),\r\n                    settings = $data.settings;\r\n            \r\n                // Clear the queue\r\n                methods.clearQueue.call($this);\r\n                // Destroy the queue if it was created\r\n                if (!settings.queueID) $('#' + settings.queueID).remove();\r\n                // Remove extra inputs\r\n                $this.siblings('input').remove();\r\n                // Show the original file input\r\n                $this.show()\r\n                // Move the file input out of the button\r\n                .insertBefore($data.button);\r\n\r\n                $data.button.remove();\r\n                // Trigger the destroy event\r\n                if (typeof settings.onDestroy === 'function') {\r\n                    settings.onDestroy.call($this);\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    $.fn.uploadifive = function(method) {\r\n\r\n        if (methods[method]) {\r\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof method === 'object' || !method) {\r\n            return methods.init.apply(this, arguments);\r\n        } else {\r\n            $.error('The method ' + method + ' does not exist in $.uploadify');\r\n        }\r\n\r\n    }\r\n\r\n})(jQuery);"]}