<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018-01-11
 * Time: 11:22
 */
namespace Admin\Controller;

use EES\Model\OrderSyncLogModel;
use EES\Model\RetreatSyncLogModel;
use EES\System\Redis;

class SyncController extends AdminController
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    //获取同步失败列表
    public function index()
    {
        $orderFailList = ( new OrderSyncLogModel())->getAllSyncFailList();
        $retreatFailList = ( new RetreatSyncLogModel() )->getAllSyncFailList();
        $this->assign( 'orderFailList', $orderFailList );
        $this->assign( 'retreatFailList', $retreatFailList );
        $this->display();
    }
	
	public function knotOrder(){
		//new KnotSyncLogModel();
		$orderFailList = ( new \Admin\Model\KnotSyncLogModel())->getAllSyncFailList();
		$this->assign( 'orderFailList', $orderFailList );
		$this->display("Sync/knotindex");
	}
	
	public  function knotFailSyncStore($order_sn=''){
		$order_sn = $order_sn?$order_sn:I('order_sn');
		empty( $order_sn ) && $this->ajaxReturnStatus(1000, '缺省订单编号');
		$order_sync=M('order_sync')->where(['order_sn'=>$order_sn,'sync_status'=>['IN',[0,2]]])->find();
		if($order_sync){
			$this->ajaxReturnStatus(1000, '未同步到ERP或同步中');
		}
		$res = $this->syncKnotToRedis($order_sn);
		if( $res !== false ){
			if( $res == 0 ){
				$this->ajaxReturnStatus(1000, '该订单已存在同步队列!<br>正在同步处理中!<br>请勿重复添加!');
			}
			$this->ajaxReturnStatus(0, '添加到订单同步队列成功!');
		}else{
			$this->ajaxReturnStatus(1000, '添加到同步队列失败!');
		}
	}
	public function cancleSyncKnot(  )
	{
		$order_sn = I('order_sn');
		empty( $order_sn ) && $this->ajaxReturnStatus(1000, '缺省退款订单编号');
		//先从Redis 待同步列表中移除
		$redis = Redis::getInstance();
		$key ='knotOrder';
		$num=$redis->sIsMember( $key, $order_sn );
		if($num){
			$this->ajaxReturnStatus(1000, '取消同步失败!该订单正在同步到ERP!请检查');
		}
		//移除数据库
		$find = M('knot_order')->field('sync_status')->where(['order_sn'=>$order_sn])->find();
		if( $find && (int)$find['sync_status'] == 1 ){
			$this->ajaxReturnStatus(1000, '取消同步失败!该订单已同步ERP!请检查');
		}
		M()->startTrans();
		$res = M('knot_order')->where(['order_sn'=>$order_sn])->data(['sync_status'=>3])->save();
		if( $res === false ){
			M()->rollback();
			$this->ajaxReturnStatus(1000, '取消同步错误!请重试');
		}
		$res = M('order')->where(['order_sn'=>$order_sn])->data(['knot'=>4])->save();
		if( $res === false ){
			M()->rollback();
			$this->ajaxReturnStatus(1000, '取消同步错误!请重试');
		}else{
			M()->commit();
			$this->ajaxReturnStatus(0, '取消同步成功!');
		}
	}
	protected function syncKnotToRedis( $order_sn )
	{
		//检查订单数据是否存在
		
		$ex = M('order')->where(['order_sn'=>$order_sn])->count();
		if( $ex ){
			//将订单同步状态改为待同步
			M()->startTrans();
			$order_sync=M('order')->where(['order_sn'=>$order_sn])->save(['knot'=>1]);
			if($order_sync===false){
				M()->rollback();
				return false;
			}
			$ies = M('knot_order')->where(['order_sn'=>$order_sn])->data(['sync_status'=>0])->save();
			if( $ies === false ){
				M()->rollback();
				return false;
			}
			M()->commit();
			//加入待处理列表Redis
			$key = 'knotOrder';
			$res = Redis::getInstance()->sAdd( $key, $order_sn);
		}else{
			return false;
		}
		return  $res;
	}
    
    //处理商城订单批量同步(未完成)
    public function batchSyncOrderStore()
	{
		$orders = I('orders');
		$return = [];
		if( is_string($orders) ){
			$orders = json_decode($orders,true);
		}
		if( is_array($orders) ){
			foreach( $orders as $order_sn ){
				$error = $this->syncOrderToRedis($order_sn);
				if( $error !== false ){
					if( $error === 0 ){
						$return['exists'][] = $order_sn;
					}
					$return['success'][] = $order_sn;
				}else{
					$return['error'][] = $order_sn;
				}
			}
		}
		$this->ajaxReturnStatus(0,'处理成功!',$return);
	}
	
	//处理商城退款订单批量同步(未完成)
	public function batchSyncRetreatStore()
	{
	
	}
	
	//商城订单失败立即同步
    public function orderFailSyncStore( $order_sn='' )
    {
        $order_sn = $order_sn?$order_sn:I('order_sn');
        empty( $order_sn ) && $this->ajaxReturnStatus(1000, '缺省订单编号');
        $syncOrder=M('order_sync')->where(['order_sn'=>$order_sn])->find();
        if (!$syncOrder){
			$this->ajaxReturnStatus(1000, '缺省订单编号');
		}
      	$orderInfo=M('order')->where(['order_sn'=>$order_sn])->find();
		if($orderInfo['order_status']==100){
			$this->ajaxReturnStatus(1000, '订单已经删除,不能同步');
		}
        if($syncOrder['sync_status']==4||$syncOrder['sync_status']==6){
			$res = $this->syncChangeToRedis($order_sn);
		}else{
			$res = $this->syncOrderToRedis($order_sn);
		}
        if( $res !== false ){
            if( $res === 0 ){
				$this->ajaxReturnStatus(1000, '该订单已存在同步队列!<br>正在同步处理中!<br>请勿重复添加!');
            }
            $this->ajaxReturnStatus(0, '添加到订单同步队列成功!');
        }else{
            $this->ajaxReturnStatus(1000, '添加到同步队列失败!');
        }
    }
	protected function syncChangeToRedis( $order_sn )
	{
		//检查订单数据是否存在
		$ex = M('order')->where(['order_sn'=>$order_sn])->count();
		if( $ex ){
			//将订单同步状态改为待同步
			$ies = M('order_sync')->where(['order_sn'=>$order_sn])->data(['sync_status'=>4])->save();
			if( $ies === false ){
				return false;
			}
			//加入待处理列表Redis
			$key = 'shopOrderSyncList1';
			$res = Redis::getInstance()->sAdd( $key, $order_sn);
		}else{
			$res = 1;
		}
		return  $res;
	}
	//退款订单失败立即同步
    public function retreatFailSyncStore()
    {
        $order_sn = I('re_sn');
        empty( $order_sn ) && $this->ajaxReturnStatus(1000, '缺省退款订单编号');
        $key = C('REDIS_KEY.retreatSyncList_key')?C('REDIS_KEY.retreatSyncList_key'):'retreatOrderSyncList';
        $res = Redis::getInstance()->sAdd( $key, $order_sn);
        if( $res !== false ){
        	switch( $res ){
				case 0:
					$this->ajaxReturnStatus(1000, '该订单已存在队列中!请勿重复添加');
					break;
				case 1:
					$this->ajaxReturnStatus(1000, '该订单原有数据不存在/已删除!请检查');
					break;
			}
            $this->ajaxReturnStatus(0, '添加到同步队列成功!');
        }else{
            $this->ajaxReturnStatus(1000, '添加到同步队列失败!');
        }
    }
    
	protected function syncOrderToRedis( $order_sn )
	{
		//检查订单数据是否存在
		$ex = M('order')->where(['order_sn'=>$order_sn])->count();
		if( $ex ){
			//将订单同步状态改为待同步
			$ies = M('order_sync')->where(['order_sn'=>$order_sn])->data(['sync_status'=>0])->save();
			if( $ies === false ){
				return false;
			}
			//加入待处理列表Redis
			$key = C('REDIS_KEY.orderSyncList_key')?C('REDIS_KEY.orderSyncList_key'):'shopOrderSyncList';
			$res = Redis::getInstance()->sAdd( $key, $order_sn);
		}else{
			$res = 1;
		}
		return  $res;
	}
	
	//取消同步商城订单
	public function cancleSyncOrder(  )
	{
		$order_sn = I('order_sn');
		empty( $order_sn ) && $this->ajaxReturnStatus(1000, '缺省退款订单编号');
		//先从Redis 待同步列表中移除
		$redis = Redis::getInstance();
		$key = C('REDIS_KEY.orderSyncList_key')?C('REDIS_KEY.orderSyncList_key'):'shopOrderSyncList';
		$redis->sRem( $key, $order_sn );
		//移除数据库
		$find = M('order_sync')->field('sync_status')->where(['order_sn'=>$order_sn])->find();
		if( $find && (int)$find['sync_status'] === 1 ){
			$this->ajaxReturnStatus(0, '取消同步失败!该订单已同步ERP!请检查');
		}
		$res = M('order_sync')->where(['order_sn'=>$order_sn])->data(['sync_status'=>3])->save();
		if( $res === false ){
			$this->ajaxReturnStatus(1000, '取消同步错误!请重试');
		}else{
			$this->ajaxReturnStatus(0, '取消同步成功!');
		}
	}
	
	//取消同步商城退款订单
	public function cancleSyncRetreatOrder()
	{
	
	}
	
	public function syncOrderInfo(){
		$orderInfoList = ( new OrderSyncLogModel())->getAllInfoList();
		//$retreatFailList = ( new RetreatSyncLogModel() )->getAllSyncFailList();
		$this->assign( 'orderInfoList', $orderInfoList );
		//$this->assign( 'retreatFailList', $retreatFailList );
		$this->display();
	}
	//商城订单失败立即同步
	public function syncOrderInfoStore( $order_sn='' )
	{
		$order_sn = $order_sn?$order_sn:I('order_sn');
		empty( $order_sn ) && $this->ajaxReturnStatus(1000, '缺省订单编号');
		
		//判断是否可以同步
		//判断是否可以同步  订单状态不存在  或者 已删除时不能同步
		$Order=M('order')->where(['order_sn'=>$order_sn])->find();
		if (!$Order||$Order['order_status']==100){
			$this->ajaxReturnStatus(1000, '订单已经删除');
		}
		//更新价格 客户订单编号  产品物料  不存在 同步状态  成功状态  取消状态
		$syncOrder=M('user_handle_history','sys_')->where(['index'=>$order_sn])->find();
		if(!$syncOrder || $syncOrder['sync_status']==0 || $syncOrder['sync_status']==1||$syncOrder['sync_status']==3){
			$this->ajaxReturnStatus(1000, '订单状态不可以同步');
		}
		//订单同步 或者 换型号时  不存在同步状态  同步中  同步失败  订单取消的  换型号中
		$sOrder=M('order_sync')->where(['order_sn'=>$order_sn])->find();
		if(!$sOrder||$sOrder['sync_status']==0 ||$sOrder['sync_status']==2 || $sOrder['sync_status']==3 ||$sOrder['sync_status']==4){
			$this->ajaxReturnStatus(1000, '订单状态不可以同步');
		}
		
		//执行同步队列信息
		M()->startTrans();
		$save=M('user_handle_history','sys_')->where(['index'=>$order_sn])->save(['sync_status'=>0]);
		if($save){
			$key = C('REDIS_KEY.syncOrderInfo_key')?C('REDIS_KEY.syncOrderInfo_key'):'shopOrderSyncInfo';
			$res = Redis::getInstance()->sAdd( $key, $order_sn);
			if($res!==false){
				M()->commit();
				$this->ajaxReturnStatus(0, '添加到订单同步队列成功!');
			}else{
				M()->rollback();
				$this->ajaxReturnStatus(1000, '同步队列已经存在,请联系技术员');
			}
		}else{
			M()->rollback();
			$this->ajaxReturnStatus(1000, '添加到同步队列失败!');
		}
		
	}
	
	public function cancelSyncOrderInfo($order_sn=''){
		$order_sn = $order_sn?$order_sn:I('order_sn');
		empty( $order_sn ) && $this->ajaxReturnStatus(1000, '缺省订单编号');
		
		//更新价格 客户订单编号  产品物料  不存在 同步状态  成功状态  取消状态
		$syncOrder=M('user_handle_history','sys_')->where(['index'=>$order_sn])->find();
		if(!$syncOrder || $syncOrder['sync_status']==0 || $syncOrder['sync_status']==1||$syncOrder['sync_status']==3){
			$this->ajaxReturnStatus(1000, '订单不可以取消');
		}
		
		M()->startTrans();
		$save=M('user_handle_history','sys_')->where(['index'=>$order_sn])->save(['sync_status'=>3]);
		if($save){
			$key = C('REDIS_KEY.syncOrderInfo_key')?C('REDIS_KEY.syncOrderInfo_key'):'shopOrderSyncInfo';
			$res = Redis::getInstance()->sIsMember( $key, $order_sn);
			if(!$res){
				M()->commit();
				$this->ajaxReturnStatus(0, '取消成功!');
			}else{
				M()->rollback();
				$this->ajaxReturnStatus(1000, '取消失败,请联系技术员');
			}
		}else{
			M()->rollback();
			$this->ajaxReturnStatus(1000, '取消失败!');
		}
	}
	
	
}