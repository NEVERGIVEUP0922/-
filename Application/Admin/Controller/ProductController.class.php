<?php

// +----------------------------------------------------------------------
// | FileName:   ProductController.php
// +----------------------------------------------------------------------
// | Dscription:
// +----------------------------------------------------------------------
// | Date:  2017/8/28 11:00
// +----------------------------------------------------------------------
// | Author: showkw <showkw@163.com>
// +----------------------------------------------------------------------
namespace  Admin\Controller;

use Common\Controller\Image;

class ProductController extends AdminController
{
	public $_model;

	use Image;

	protected function _initialize()
	{
		parent::_initialize(); // TODO: Change the autogenerated stub
		$this->_model = D('product');
	}

	public function index(  )
	{
		$this->display();
	}

    /**
     * @desc 产品列表
     *
     */
	public function productList(){
	    $request=I('get.');
	    $page=$request['page']?$request['page']:1;
	    $is_open=isset($request['is_open'])?$request['is_open']:0;//fitemno更多关联的erp型号是否展开
        $pageSize=$request['pageSize']?$request['pageSize']:C('PAGE_PAGESIZE');
        if(isset($request['term'])&&$request['term']) $request['p_sign']=$request['term'];
        if(isset($request['package'])&&$request['package']) $where['package']=['like',"%$request[package]%"];//封装搜索
        if(isset($request['is_online'])) $where['is_online']=$request['is_online'];
        if(isset($request['person_liable'])&&$request['person_liable']){
            $request['person_liable']=(int)$request['person_liable'];
            $where[]="p_sign in (select p_sign from dx_product_fitemno where person_liable = $request[person_liable])";
        };
        if(isset($request['is_del'])) $where['is_del']=$request['is_del'];
        if(isset($request['min_open'])) $where['min_open']=$request['min_open'];
        if(isset($request['show_site'])) $where['show_site']=['in',$request['show_site']];

        if(isset($request['p_sign'])&&$request['p_sign']){

            if(isset($request['Home'])&&$request['Home']){
                $where[]=[
                    [
                        'p_sign'=>['like',"%$request[p_sign]%"],
                    ],
                ];
            }else{

                $where[]=[
                    [
                        'fitemno_access'=>[ 'like', '%' . $request['p_sign'] . '%' ],
                        'p_sign'=>['like',"%$request[p_sign]%"],
                        'fitemno'=>['like',"%$request[p_sign]%"],
                        '_logic'=>'or'
                    ],
                    "p_sign in (select p_sign from dx_product_fitemno where fitemno like '%$request[p_sign]%')",
                    '_logic'=>'or'
                ];

            }
        }
        $key_method=strtolower(MODULE_NAME);
        if($key_method=='admin'){
            if(isset($where['p_sign'])){
                unset($where['fitemno']);
                unset($where['p_sign']);
                 $where[]=[
                     'fitemno'=>['like',"%$request[p_sign]%"],
                     'p_sign'=>['like',"%$request[p_sign]%"],
                     '_logic'=>'or'
                 ];
            }
        }
        if(isset($request['brand_name'])){
            $brandList=D('Brand')->brandListId(['brand_name'=>['like',"%$request[brand_name]%"]]);
            if($brandList['error']!=0) $where['brand_id']=0;
            else $where['brand_id']=['in',$brandList['data']['list']];
        }
        if(isset($request['start_time'])||isset($request['end_time'])){
            $start_time=$request['start_time']?$request['start_time']:date('Y-m-d H:i:s',strtotime('-1 year'));
            $end_time=$request['end_time']?$request['end_time']:date('Y-m-d H:i:s',time()+60*60*24);
            if($end_time>$start_time) $where['update_time']=['between'=>[$start_time,$end_time]];
        }
        if(isset($request['cate_id'])){
            $cateId_arr=D('category')->allLevelCategory($request['cate_id']);
            if($cateId_arr['error']==0){
                $cateId_arr['data']['list'][]=$request['cate_id'];
                $where['cate_id']=['in',$cateId_arr['data']['list']];
                $this->assign('cate_path',$cateId_arr['data']['path']);
            }
        }else if(isset($request['cateId_arr'])&&$request['cateId_arr']&&is_array($request['cateId_arr'])){
            $catePath_arr=[];
            foreach($request['cateId_arr'] as $k=>$v){
                $one_arr=D('category')->allLevelCategory($v);
                if($one_arr['error']===0){
                    if($one_arr['data']['list']) $request['cateId_arr']=array_merge($request['cateId_arr'],$one_arr['data']['list']);
                }
                $catePath_arr[]=$one_arr['data']['path'];
            }
            $request['cateId_arr']=array_filter(array_unique($request['cateId_arr']));
            $this->assign('cate_path',$catePath_arr);
            $where['cate_id']=['in',$request['cateId_arr']];
        }

        $order='';
        if(isset($request['field'])&&$request['field']){
            $request['type']=($request['type']=='asc')?'asc':'desc';
            $order=$request['field'].' '.$request['type'];
        }

        if($request['autoComplete']=='autoComplete')$pageSize=200;

        $request['t_n_a']=[ 'd_p_fi'];
        $table=$this->tableChangeTure($request['t_n_a']);
	    $productList=D('Product')->productList($where,$page,$pageSize,true,$order,'','back',$table['data'],[],$request['p_sign']);
	    if($productList['error']===0&&$is_open==1){//多个关联erp型号独立显示
            $new_list=[];
	        foreach($productList['data']['list'] as $k=>$v){
	            if($v['product_fitemno']){
                    foreach($v['product_fitemno'] as $k2=>$v2){
                      //  if((strpos($v2['fitemno'],$request['p_sign']) !== false)||(strpos($v2['p_sign'],$request['p_sign']) !== false)){
                            $oneV=$v;
                            $oneV['fitemno']=$v2['fitemno'];
                            $new_list[]=$oneV;
                        //}
                    }
                }else{
                    $new_list[]=$v;
                }
            }
            $productList['data']['list']=$new_list;
        }
        $productList['data']['page'] = $page;
        $productList['data']['pageSize'] = $pageSize;
        //ajax获取列表
        if(IS_AJAX){
            if($request['autoComplete']=='autoComplete'){
                $returnList=[];
                foreach($productList['data']['list'] as $k=>$v){
                    $returnList['data'][]=$v['p_sign']."(".$v['fitemno'].")";
                    $returnList['index'][]=$v['id'];
                }
                die(json_encode($returnList));
            }
            die(json_encode(['error'=>0,'msg'=>'操作成功','data'=>$productList['data']]));
        }
        $categoryTree=D('category')->productCategoryInfinite(); //分类树
        $this->assign('categoryTree',$categoryTree['data']);
	    $this->assign('productList',$productList['data']);
        $this->assign('request',$request);
        $this->display();
    }

    /**
     * @desc 产品列表编辑或新增
     *
     */
    public function productListAction(){
        $request=I('get.');
        $notice = [];
        if(IS_AJAX){//提交修改或新增
            $post=I('post.');
            if(!$post['data']) return ['error'=>1,'msg'=>'参数错误'];
            foreach( $post['data'] as $k=>$v ){
                //属性处理
                $whereType[] = 'find_in_set('.$v['cate_id'].',cate_id) ';
                $whereType['id']=$v['attr_id'];
                $attr_res=M("product_attribute_type")->where($whereType)->find();
                if(!$attr_res){
                    $where2= 'find_in_set('.$v['cate_id'].',cate_id) ';
                    $res_attr=M("product_attribute_type")->where($where2)->find();
                    if($res_attr){
                        $post['data'][$k]['attr_id']=$res_attr['id'];
                        if($res_attr['current_type']==1) $post['data'][$k]['current_end']=0;
                        if($res_attr['voltage_input_type']==1) $post['data'][$k]['voltage_input_end']=0;
                        if($res_attr['voltage_output_type']==1) $post['data'][$k]['voltage_output_end']=0;
                        if($res_attr['volume_type']==1) $post['data'][$k]['volume_width']=0;
                        if($res_attr['custom_type']==1) $post['data'][$k]['custom_end']=0;
                        if($res_attr['custom1_type']==1) $post['data'][$k]['custom1_end']=0;
                        if($res_attr['custom2_type']==1) $post['data'][$k]['custom2_end']=0;
                    }else{
                        $post['data'][$k]['attr_id']=0;
                        $post['data'][$k]['current_end']=0;
                        $post['data'][$k]['voltage_input_end']=0;
                        $post['data'][$k]['voltage_output_end']=0;
                        $post['data'][$k]['volume_width']=0;
                        $post['data'][$k]['current_start']=0;
                        $post['data'][$k]['voltage_input_start']=0;
                        $post['data'][$k]['voltage_output_start']=0;
                        $post['data'][$k]['volume_length']=0;
                        $post['data'][$k]['custom_start']=0;
                        $post['data'][$k]['custom_end']=0;
                        $post['data'][$k]['custom1_start']=0;
                        $post['data'][$k]['custom1_end']=0;
                        $post['data'][$k]['custom2_start']=0;
                        $post['data'][$k]['custom2_end']=0;
                    }
                }else{
                   if($v['current_type']==1) $post['data'][$k]['current_end']=0;
                   if($v['voltage_input_type']==1) $post['data'][$k]['voltage_input_end']=0;
                   if($v['voltage_output_type']==1) $post['data'][$k]['voltage_output_end']=0;
                   if($v['volume_type']==1) $post['data'][$k]['volume_width']=0;
                   if($v['custom_type']==1) $post['data'][$k]['custom_end']=0;
                   if($v['custom1_type']==1) $post['data'][$k]['custom1_end']=0;
                   if($v['custom2_type']==1) $post['data'][$k]['custom2_end']=0;
                }


                if( $v['pdf'] ){
	
					$post['data'][$k]['pdf_img_path'] = '';
                    //pdf转图片
                   // $res = $this->pdf2png(SITE_PATH.$v['pdf']);
                    //成功
//                    if( $res['error'] === 0 ){
//                        $post['data'][$k]['pdf_img_path'] = $res['data']['imgPath'];
//                    }else{
//                        //转换失败
//                        unlink( SITE_PATH.$v['pdf'] );
//                        $post['data'][$k]['pdf'] = 'storeFaild';
//                        //PDF转换图片失败 提醒列表
//                        $notice[] = ['error'=>1,'msg'=>$res['msg']];
//                    }
                }
            }
            $actionResult=D('product')->productListAction($post);
            $notice && $actionResult['notice'] = $notice;
            //有需要被删除的PDf和文件目录
           // if( $actionResult['sqlFailNeedDel']&&$actionResult['error']==1 ){
                //pdf
                //foreach( $actionResult['sqlFailNeedDel']['pdf'] as $k=>$v ){
                    //pdf存在 删除
                    //if( file_exists(SITE_PATH.$v) && $v !== SITE_PATH ){
                    //    @unlink( SITE_PATH.$v );
                  //  }
                //}

//                foreach( $actionResult['sqlFailNeedDel']['pdfImg'] as $k=>$v ){
//                    //删除图片目录
//                    if( file_exists(SITE_PATH.$v) && $v !== SITE_PATH && $v !== '' && $v !== '.' && $v !== '..' && $v !== '/' ){
//                        @deldir( SITE_PATH.$v );
//                    }
//                }
          //  }
            die(json_encode($actionResult));
        }

        if($request['action']=='edit'){
            $page=1; $pageSize=1000;
            $productId_arr=$request['productId_arr'];
            $where= ['id'=>['in',$productId_arr]];

            $request['t_n_a']=[ 'd_p_fi'];
            $table=$this->tableChangeTure($request['t_n_a']);
            $productList=D('Product')->productList($where,$page,$pageSize,true,'','','back',$table['data']);
            foreach ($productList['data']['list'] as &$v){
                $whereType[] = 'find_in_set('.$v['cate_id'].',cate_id) ';
                $whereType['id']=$v['attr_id'];
                $attr_res=M("product_attribute_type")->where($whereType)->find();
                if(!$attr_res){
                    $where2= 'find_in_set('.$v['cate_id'].',cate_id) ';
                    $res_attr=M("product_attribute_type")->where($where2)->find();
                    if($res_attr){
                        $v['attr_list']=$res_attr;
                    }else{
                        $v['attr_list']=[];
                    }
                }else{
                    $v['attr_list']=$attr_res;
                }
            }
            $this->assign('productList',$productList['data']);
        }
        $priceInitList=D('product')->priceSelectSet(); //价格区间参考
        if($priceInitList['error']!=0) die(json_encode($priceInitList));
        $categoryTree=D('category')->productCategoryInfinite(); //分类树
        if($categoryTree['error']!=0) die(json_encode($categoryTree));
        $brandList=D('brand')->brandList('',1,10000);
        if($brandList['error']!=0) die(json_encode($brandList));//品牌列表
        $attributeList=M("product_attribute_type")->select();
        $this->assign('attributeList',$attributeList);
        $this->assign('brandList',$brandList['data']['list']);
        $this->assign('categoryTree',$categoryTree['data']);
        $this->assign('priceInitList',$priceInitList['data']);
        $this->assign('request',$request);
        $this->display();
    }
    /**
     * @desc 通过分类id查属性列表
     *
     */
    public function idAttrList(){
        if(IS_AJAX){
            $request=I('post.');
            if(empty($request['brandsId_arr'])) die(json_encode(['error'=>1,'msg'=>'参数错误']));
            $id = $request['cate_id'];
            $attributeList=M("product_attribute_type")->where(['cate_id',Db::raw('FIND_IN_SET('.$id.',cate_id)')])->select();
            die(json_encode($attributeList));
        }
    }

    /**
     * @desc 品牌列表
     *
     */
    public function brandList(){
        $post=I('post.');
        $request=I('get.');
        if(IS_AJAX&&!isset($request['autoComplete'])&&!isset($request['ajax_return_data'])){//提交修改或新增
            $actionResult=D('brand')->brandListAction($post);
            die(json_encode($actionResult));
        }

        $page=$request['page']?$request['page']:1;
        $pageSize=$request['pageSize']?$request['pageSize']:C('PAGE_PAGESIZE');
        $where='';
        if(isset($request['first'])&&$request['first']) $where['first']=$request['first'];
        if(isset($request['brand_name'])&&$request['brand_name']) $where['brand_name']=['like',"%$request[brand_name]%"];

        if(isset($request['autoComplete'])&&$request['autoComplete']) $pageSize=200;

        if(isset($request['term'])&&$request['term'])
        $where[]=[
            'brand_name'=>['like',$request['term'].'%'],
            'first'=>$request['term'],
            '_logic'=>'or'
        ];
        $brandList=D('brand')->brandList($where,$page,$pageSize);
        if(isset($request['autoComplete'])&&$request['autoComplete']){
            $returnList=[];
            foreach($brandList['data']['list'] as $k=>$v){
                $returnList['data'][]=$v['brand_name'];
                $returnList['index'][]=$v['id'];
            }
            die(json_encode($returnList));
        }

        if(IS_AJAX && isset($request['ajax_return_data'])) die(json_encode($brandList));
        $brandList['data']['page'] = $page;
        $brandList['data']['pageSize'] = $pageSize;
        $this->assign('brandList',$brandList['data']);
        $this->assign('request',$request);
        $this->display();
    }

    /**
     * @desc 品牌删除
     *
     */
    public function brandsDelete(){
        if(IS_AJAX){
            $request=I('post.');
            if(empty($request['brandsId_arr'])) die(json_encode(['error'=>1,'msg'=>'参数错误']));
            $result=D('brand')->brandsDelete($request['brandsId_arr']);
            die(json_encode($result));
        }
    }

    /**
     *
     * @desc 产品描述编辑是的图片
     *
     */
    public function productTextEditImages(){
        $path=vendor('ueditor/controller');
    }


    /**
     * @desc excel产品文件读取
     *          $path='Uploads/productExcel/product_init.xlsx';
     *
     */
    public function excelProductToDB(){
        if(IS_AJAX){
            $request=I('post.');
            $path=$request['path'];
            $excel=new ExcelController();
            $read=$excel->excelRead($path);
            if($read['error']!=0) die(json_encode($read));
            $data=$read['data']['list'];
            $result=D('product')->productExcelReadInit($data);
            die(json_encode($result));
        }
    }

    /**
     * @desc excel产品议价init
     *          $path='Uploads/productExcel/product_init.xlsx';
     *
     */
    public function excelProductBargainToDB(){
        ini_set('max_execution_time', '0');
        $request=I('post.');
        $path=$request['path'];
        $excel=new ExcelController();
        $path='Uploads/productExcel/productBargain_init8.xlsx';
        $read=$excel->excelRead($path);
        if($read['error']!=0) die(json_encode($read));
        $data=$read['data']['list'];
        $to_data=[];
        $step_customerNo='';
        foreach($data as $k=>$v){
            if($k>=2){
                if($v['A']){
                    $step_customerNo=$v['A'];
                }else{
                    $v['A']=$step_customerNo;
                }
                $to_data[]=$v;
            }
        }
        $result=D('productbargain')->productBargainExcelInit($to_data);

        $type=0;
        $errorM=M('','product_price_init_upload_error');
        $step=time();

        if($result['faild']){
            $type=0;
            foreach($result['faild'] as $k2=>$v2){
                $errorM->add(['type'=>$type,'error_info'=>$v2,'step'=>$step]);
            }
        }
        if($result['failed']){
            $type=1;
            foreach($result['failed'] as $k2=>$v2){
                $errorM->add(['type'=>$type,'error_info'=>json_encode($v2),'step'=>$step]);
            }
        }
        if($result['success']){
            $type=2;
            foreach($result['success'] as $k2=>$v2){
                $errorM->add(['type'=>$type,'error_info'=>json_encode($v2),'step'=>$step]);
            }
        }
    }

    /**
     * @desc excel测试显示价格上传错误显示
     *
     */
    public function excelOutProductPriceError(){
        $step=1521537505;

        $list=M('','product_price_init_upload_error')->where(['step'=>$step])->select();
        if(!$list) die('没有数据');
        $excelData=[];
        $i=1;
        foreach($list as $k=>$v){
            $oneShow='';
            if($v['type']==0){
                $oneShow=$v['error_info'];
            }else{
                $content=json_decode($v['error_info']);
                foreach($content as $k2=>$v2){
                    $oneShow.=$v2.'{---}';
                }
            }
            $excelData['A'.$i]=$oneShow;
            $i++;
        }
        $date=date('Y-m-d');
        $path="/product_price_error$date.xlsx";
        $result=A('Excel')->poductExcelWriteSample($path,$excelData);
    }

    /**
     * @desc excel产品议价init
     *          $path='Uploads/productExcel/product_init.xlsx';
     *
     */
    public function excelProductBargainToDB_test(){
//        if(IS_AJAX){
        $request=I('post.');
        $path=$request['path'];
        $excel=new ExcelController();
        $path='Uploads/productExcel/productBargain_init5.xlsx';
        $read=$excel->excelRead($path);
        if($read['error']!=0) die(json_encode($read));
        $data=$read['data']['list'];
        $to_data=[];
        $step_customerNo='';
        $fitemno_arr=[];
        foreach($data as $k=>$v){
            if($k>=2){
                $fitemno_arr[]=$v['B'];
                if($v['A']){
                    $step_customerNo=$v['A'];
                }else{
                    $v['A']=$step_customerNo;
                }
                $to_data[]=$v;
            }
        }
        $list=M('product')->field('p_sign,fitemno')->where(['fitemno'=>['in',$fitemno_arr]])->select();
        $pSign_string=[];
        foreach($list as $k=>$v){
            if(!isset($pSign_string[$v['fitemno']])) $pSign_string[$v['fitemno']]=$v['p_sign'];
            else $pSign_string[$v['fitemno']].='{---}'.$v['p_sign'];
        }
        $title=[
            'A'=>'ERP客户编码',
            'B'=>'ERP型号',
            'C'=>'原装料号（商城型号）',
            'D'=>'当前未税价格',
            'E'=>'当前含税价格',
            'F'=>'是否换型号开票',
            'G'=>'返点单价',
        ];
        array_unshift($to_data,$title);
        $excel_data=[];
        $i=1;
        foreach($to_data as $k=>$v){
            $v['C']=$pSign_string[$v['B']];
            foreach($v as $k2=>$v2){
                $excel_data[$k2.$i]=$v2;
            }
            $i++;
        }
        $path='/product_price_20180319.xlsx';
        $result=A('Excel')->poductExcelWriteSample($path,$excel_data);
        print_r($result);
    }

    /**
     * @desc 产品下载
     *
     */
    public function productExcelDownload()
    {
        if(IS_AJAX){
            $request=I('post.');
            $productId_arr=$request['productId_arr'];
            $categoryId_arr=$request['categoryId_arr'];
            $vmId_arr=$request['vmId_arr'];

            if($categoryId_arr){
                $lft_rht=M('category')->field('lft,rht')->where(['id'=>['in',$categoryId_arr],'usable'=>1])->select();
                $cateWhere['_logic']='or';
                foreach($lft_rht as $k=>$v){
                    $cateWhere[]=[
                        'lft'=>['egt',$v['lft']],
                        'rht'=>['elt',$v['rht']]
                     ];
                }
                $cateWhere=[$cateWhere,'usable'=>1];
                $cateList=M('category')->field('id')->where($cateWhere)->select();
                foreach($cateList as $k=>$v){
                    $categoryId_arr_all[]=$v['id'];
                }
            }

            $result=D('product')->productExcelDownloadData($productId_arr,$categoryId_arr_all,$vmId_arr);
            if($result['error']!=0) die(json_encode($result));
            $result2=(new ExcelController())->poductExcelWrite('test',$result['data'],$result['count'],$result['config']);
            die(json_encode($result2));
        }
    }

    /**
     * @desc 分类数据写入excel
     *
     */
    public function productCategoryWriteExcel(){
        $result=D('category')->categoryBottomAll();
        if($result['error']!=0) die(json_encode($result));

        $list=$result['data']['list'];
        $i=1;
        foreach($list as $k=>$v){
            $data[]=[
                'A'.$i=>$v['cate_name'],
                'B'.$i=>$v['id']
            ];
            $i++;
        }
        $time=date('Y_m_d_H_i_s',time());
        $path="分类信息".$time.'.xls';
        (new ExcelController())->excelWrite($path,$data);
    }

    /**
     * @desc 产品信息字段限制更改
     *
     */
    public function productListActionPart(){
        if(IS_AJAX){
            $request=I('post.');
            if(!$request['data']) die(json_encode(['error'=>1,'msg'=>'没有数据']));
            $result=D('product')->productListActionPart($request['data']);
            die(json_encode($result));
        }
    }

    /**
     *
     * @desc 分类所有商品一键移动到另一个分类
     *
     */
    public function productCategoryToCategory(){
        if(IS_AJAX){
            $reqeust=I('post.');
            $result=D('product')->productCategoryToCategory($reqeust['cateId'],$reqeust['cateId_to']);
            die(json_encode($result));
        }
    }

    public function test(){
        $path='Uploads/excelout/title.xlsx';
        $result=D('product')->productExcelOutTitle($path);
        print_r($result);
    }

    /**
     * @desc 议价的报备信息审核
     */
    public function productReportCheck(){
        if(IS_AJAX){
            $request=I('post.');
            $result=(new \Home\Model\ProductModel())->productReport($request);
            die(json_encode($result));
        }
    }

    /**
     * @desc 产品删除
     *       $request['pId_arr']=[1];
     *
     */
    public function deleteProduct(){
        if(IS_AJAX){
            $request=I('post.');
            if(isset($request['data'])){
                foreach($request['data'] as $k=>$v){
                    $request['pId_arr'][]=$v['id'];
                }
            }
            $result=D('product')->deleteProduct($request);
            die(json_encode($result));
        }
    }

    /**
     * @desc 产品PDF删除
     *       $request['pId_arr']=[1];
     *
     */
    public function deleteProductPdf(){
        if(IS_AJAX){
            $request=I('post.');
            if(isset($request['data'])){
                foreach($request['data'] as $k=>$v){
                    $request['pId_arr'][]=$v['id'];
                }
            }
            $result=D('product')->deleteProductPdf($request);
            die(json_encode($result));
        }
    }
    /**
     * @desc 产品封装列表
     *
     */
    public function productPackageList(){
        $request=I('get.');
        $page=$request['page']?$request['page']:1;
        $pageSize=$request['pageSize']?$request['pageSize']:C('PAGE_PAGESIZE');
        if($request['autoComplete']=='autoComplete') $pageSize=200;

        $where='';
        if(isset($request['package'])&&$request['package']) $where['p.package']=['like',"%$request[package]%"];
        if(isset($request['term'])&&$request['term']) $where['p.package']=['like',"%$request[term]%"];

        $list=D('product')->productPackageList($where,$page,$pageSize);

        if(IS_AJAX&&$request['autoComplete']=='autoComplete'){
            if($list['data']['list']){
                foreach($list['data']['list'] as $k=>$v){
                    $returnList['data'][]=$v['package'];
                    $returnList['index'][]=$v['package'];
                }
            }else{
                $returnList['data'][]='没有数据';
                $returnList['index'][]='没有数据';
            }
            die(json_encode($returnList));
        }

        $list['data']['page'] = $page;
        $list['data']['pageSize'] = $pageSize;
        $this->assign('list',$list['data']);
        $this->assign('request',$request);
        $this->display();
    }

    /**
     * @desc 产品封装图片编辑
     *
     */
    public function productPackageAction(){
        if(IS_AJAX){
            $request=I('post.');
            if(!isset($request['package'])||!$request['package']) die(json_encode(['error'=>1,'msg'=>'参数错误']));
            if(!isset($request['img'])||!$request['img']) die(json_encode(['error'=>1,'msg'=>'参数错误2']));
            $result=D('product')->productPackageAction($request);
            die(json_encode($result));
        }
    }

    //更改p_sign
    public function test2(){
        $path='product_20180625_update_pSign.xlsx';
        $excel=new ExcelController();
        $read=$excel->excelRead($path);
        if($read['error']!=0) die(json_encode($read));
        $data=$read['data']['list'];

        $p_sign_arr=[];
        foreach($data as $k=>$v){
            if($k<=3) continue;
            if($v['B']&&$v['C']){
                $p_sign_arr[]=[
                    'p_sign_old'=>trim($v['B']),
                    'p_sign_new'=>trim($v['C']),
                ];
            }
        }

        $result=M('product_update_20180626')->addAll($p_sign_arr);
        var_dump($result);
    }

    //删除商品
    public function test3(){
        $path='product_20180625_delete.xls';
        $excel=new ExcelController();
        $read=$excel->excelRead($path);
        if($read['error']!=0) die(json_encode($read));
        $data=$read['data']['list'];

        $p_sign_arr=[];
        foreach($data as $k=>$v){
            if($k<=3) continue;
            if($v['B']){
                $p_sign_arr[]=trim($v['B']);
            }
        }
        $list=M('product')->where(['p_sign'=>['in',$p_sign_arr]])->select();
        $pId_arr=[];
        foreach($list as $k=>$v){
            $pId_arr[]=$v['id'];
        }
        M('product')->startTrans();
        $result=M('product')->where(['p_sign'=>['in',$p_sign_arr]])->delete();
        $result3=M('product_fitemno')->where(['p_sign'=>['in',$p_sign_arr]])->delete();
        if($pId_arr){
            $result1=M('product_price')->where(['p_id'=>['in',$pId_arr]])->delete();
            $result2=M('product_attribute')->where(['id'=>['in',$pId_arr]])->delete();
        }

        if($result===false||$result1===false||$result2===false||$result3===false){
            var_dump($result);
            var_dump($result1);
            var_dump($result2);
            var_dump($result3);
            M('product')->rollback();
            echo D()->getLastSql();
            echo 'failed';
        }else{
            M('product')->commit();
            echo 'success';
        }
    }


    public function test4(){
        print_r(kelly_sql_all_column('dx_product_price'));
    }
    public  function attrAddEdit(){
        $request=$_GET;
        $request['page']=$page=$request['page']?$request['page']:1;
        $request['pageSize']=$pageSize=$request['pageSize']?$request['pageSize']:10;
        $photoAdvert=M("product_attribute_type")->page(($request['page']),$pageSize)->where(['id'=>$request['id']])->find();
        if($photoAdvert){
            $cate_all=[];
            $res=M("category")->where(['id'=>['IN',explode(',',$photoAdvert['cate_id'])]])->select();
            foreach ($res as $vv){
                $cate_all[$vv['id']]=$vv['cate_name'];
            }
            $photoAdvert['cate_all']=urlencode(json_encode($cate_all));
        }
        $count=M("product_attribute_type")->field("count(id) as c")->select();
        $request['count']=$count[0]['c']?$count[0]['c']:0;
        $categoryTree=D('category')->productCategoryInfinite(); //分类树
        //分页参数
       // $this->assign("request",$request);
        //数值参数
        $this->assign('categoryTree',$categoryTree);
        $this->assign('photoAdvert',$photoAdvert);
        $this->display("attr_add_edit");
    }
    public  function  addAttribute(){
        $add=I('post.');
        if(!$add){
            //表 product_attribute_type
            $request=I('get.');
            $request['page']=$page=$request['page']?$request['page']:1;
            $request['pageSize']=$pageSize=$request['pageSize']?$request['pageSize']:10;
            $photoAdvert=M("product_attribute_type")->page(($request['page']),$pageSize)->select();
            foreach($photoAdvert as &$v){
                   $cate_all=[];
                   $res=M("category")->where(['id'=>['IN',explode(',',$v['cate_id'])]])->select();
                   foreach ($res as $vv){
                       $cate_all[$vv['id']]=$vv['cate_name'];
                   }
                   $v['cate_all']=urlencode(json_encode($cate_all));
            }
            $count=M("product_attribute_type")->field("count(id) as c")->select();
            $request['count']=$count[0]['c']?$count[0]['c']:0;
            $categoryTree=D('category')->productCategoryInfinite(); //分类树
            //分页参数
            $this->assign("request",$request);
            //数值参数
            $this->assign('categoryTree',$categoryTree);
            $this->assign('photoAdvert',$photoAdvert);
            $this->display("attrList");
            die();
        }
        //删除
        if(isset($add['delete'])&&$add['delete']){
            $delete_result=M("product_attribute_type")->where(['id'=>$add['id']])->delete();
            if($delete_result){
                die(json_encode(['error'=>0,'msg'=>"删除成功"]));
            }else{
                die(json_encode(['error'=>1,'msg'=>"删除失败"]));
            }
        }
        //添加  修改
        $field="attr_name,current,current_value,voltage_input,voltage_input_value,voltage_output,voltage_output_value,volume,volume_value,current_type,voltage_input_type,voltage_output_type,volume_type,cate_id,custom,custom_value,custom_type,custom1,custom1_value,custom1_type,custom2,custom2_value,custom2_type";
        if(isset($add['id'])&&$add['id']){
            $save_result=M("product_attribute_type")->where(['id'=>$add['id']])->field($field)->save($add);
            if($save_result){
                die(json_encode(['error'=>0,'msg'=>"修改成功"]));
            }else{
                die(json_encode(['error'=>1,'msg'=>"修改失败"]));
            }
        }else{
            $add_result=M("product_attribute_type")->field($field)->add($add);
            if($add_result){
                die(json_encode(['error'=>0,'msg'=>"添加成功"]));
            }else{
                die(json_encode(['error'=>1,'msg'=>"添加失败"]));
            }
        }
    }

    public function  attrbuteList(){

        $photoAdvert=M("product_attribute_type")->select();
        //数值参数
        die(['error'=>0,'data'=>$photoAdvert,'msg'=>'请求成功']);
    }


}