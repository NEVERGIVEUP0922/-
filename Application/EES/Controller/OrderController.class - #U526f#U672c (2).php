<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017-12-29
 * Time: 16:28
 */

namespace EES\Controller;

use EES\Model\ErpUserModel;
use EES\Model\OrderModel;
use EES\Model\RetreatSyncLogModel;
use EES\Model\UserModel;
use EES\Model\OrderSyncLogModel;
use EES\System\Redis;
use think\Log;
use Common\Controller\Address;
use Admin\Model\RetreatModel;
use Home\Controller\KdController;
use Common\Controller\KdApiController as KdApi;

class OrderController extends EESController
{
	use Address;
	
	protected function _initialize()
	{
		parent::_initialize(); // TODO: Change the autogenerated stub
	}
	
	public function delSyncResult($result){
		if(is_array($result)){
			$order_sn=$result['order_sn'];
			unset($result['order_sn']);
			M('order')->where(['order_sn'=>$order_sn])->save($result);
			return true;
		}
	}
	public function getAllNoSyncOrder()
	{
		$model= M('order_sync');
		$res = $model->field('s.order_sn')->alias('s')->join('__ORDER__ as o ON o.order_sn = s.order_sn','left')->where(['s.sync_status'=>0,'o.order_status'=>['lt',100]])->select();
		if( $res ){
			$redis = Redis::getInstance();
			$key = C('REDIS_KEY.orderSyncList_key');
			foreach( $res as $k=>$v ){
				//在查询错误纪录数
				$count = M('order_sync_log')->where(['order_sn'=>$v['order_sn']])->count();
				if( $count < 5 ){
					$rs = $redis->sAdd( $key, $v['order_sn'] );
					if( $rs === false ){
						Log::write('同步订单'. $v['order_sn'].'到Redis失败!');
					}
				}
			}
		}
		return true;
	}
	public function storeKnotSyncResult($result){
		if($result['error']==0){
			//正确的
			M('knot_order')->where(['order_sn'=>"{$result['order_sn']}"])->save(['sync_status'=>1,'contenx'=>$result['msg']]);
			M('order')->where(['order_sn'=>"{$result['order_sn']}"])->save(['knot'=>2]);
		}elseif ($result['error']==1){
			//错误的
			M('knot_order')->where(['order_sn'=>"{$result['order_sn']}"])->save(['sync_status'=>2,'contenx'=>$result['msg']]);
			M('order')->where(['order_sn'=>"{$result['order_sn']}"])->save(['knot'=>3]);
		}
	}
	
	
	public function addChangeOrder( $orderNo )
	{
		//查询订单数据
		$orderModel = new OrderModel();
		$orderInfo = $orderModel->getAllInfo( $orderNo );
		!$orderInfo && $this->ajaxReturn( ['isDel'=>1], false );
		//查询订单用户数据
		$userModel = new UserModel();
		$userInfo = $userModel->getAllInfo( $orderInfo[ 'user_id' ] );
		!$userInfo && $this->ajaxReturn( [], false ,'订单用户信息查询失败');
		$isCompany = $userInfo[ 'user_type' ] == 2 ? true : false;
		$isSon = $userInfo[ 'user_type' ] == 20 ? true : false;
		$inremark="商城订单编号:".$orderNo;
		//如果是企业子账号 查询主账号ID, 对信息进行替换
		if ( $isSon ) {
			$parentId = $userModel->getParentId( $userInfo[ 'id' ] );
			$pUserInfo = $userModel->getAllInfo( $parentId[ 'p_id' ] );
			$userInfo[ 'company' ] = $pUserInfo[ 'company' ];
			$userInfo[ 'user_type' ] = 2;
			
			$userInfo[ 'fcustno' ]=$pUserInfo[ 'fcustno' ];
			$userInfo[ 'sys_uid' ]=$pUserInfo[ 'sys_uid' ];
			$userInfo[ 'id' ]=$pUserInfo[ 'id' ];
			$inname=str_replace($pUserInfo[ 'company' ]['company_name'].'--',' ',$userInfo['nick_name']);
			$inremark="商城订单编号:".$orderNo.$inname;
		}
		//print_r($inremark);die();
		$noCust = empty( $userInfo[ 'fcustno' ] ) ? true : false;
		//订单下单收货地址
		$shAddr = [
			'address'   => $this->getAddressByCode( $orderInfo[ 'detail' ][ 'area_code' ] ) . $orderInfo[ 'detail' ][ 'address' ], //订单收货地址
			'consignee' => $orderInfo[ 'detail' ][ 'consignee' ], //订单收货人
			'mobile'    => $orderInfo[ 'detail' ][ 'mobile' ], //订单收货人联系电话
			'zipcode'   => $orderInfo[ 'detail' ][ 'zipcode' ], //邮编
		];
		//当前下单收货地址插入到地址数组第一个元素
		array_unshift( $userInfo[ 'address' ], $shAddr );
		//无对应ERP客户编码
		if ( $noCust ) {
			//查询用户对应ERP业务员数据
			$erpUserModel = new ErpUserModel();
			$erpUser = $erpUserModel->field( 'femplno' )->find( $userInfo[ 'sys_uid' ] );
			if($isSon){
				$data[ 'custData' ] = [
					'emplNo' => $erpUser[ 'femplno' ], //ERP业务员编码 如果商城用户未分配对应业务员 请留空
					'data'   => [
						//user表的数据
						'user_name'   => $pUserInfo[ 'user_name' ],
						'user_mobile' => $pUserInfo[ 'user_mobile' ],
						'user_email' => $pUserInfo['user_email'],
						'user_type'   => $pUserInfo[ 'user_type' ],
						//['address'] 里面放收货地址的信息
						'address'     => $pUserInfo[ 'address' ],
					],
				];
			}else{
				$data[ 'custData' ] = [
					'emplNo' => $erpUser[ 'femplno' ], //ERP业务员编码 如果商城用户未分配对应业务员 请留空
					'data'   => [
						//user表的数据
						'user_name'   => $userInfo[ 'user_name' ],
						'user_mobile' => $userInfo[ 'user_mobile' ],
						'user_email' => $userInfo['user_email'],
						'user_type'   => $userInfo[ 'user_type' ],
						//['address'] 里面放收货地址的信息
						'address'     => $userInfo[ 'address' ],
					],
				];
			}
			
			if ( $userInfo[ 'user_type' ] == 2 ) {
				$userInfo[ 'company' ][ 'company_city' ] = $this->getCityByCode( $userInfo[ 'company' ][ 'company_area' ] );
				$data[ 'custData' ][ 'data' ][ 'info' ] = $userInfo[ 'company' ];
			}
		}
		if($isSon){
			$note=$orderInfo[ 'detail' ][ 'note' ]!='no'&&$orderInfo[ 'detail' ][ 'note' ]?$orderInfo[ 'detail' ][ 'note' ].'子账号订单':'子账号订单';
		}else{
			$note=$orderInfo[ 'detail' ][ 'note' ]?$orderInfo[ 'detail' ][ 'note' ]:'备注';
		}
		$baseData = [
			'custNo'        => $userInfo[ 'fcustno' ], //erp客户编号
			'shop_order_no' => $orderNo, //商城订单编号
			'uid'           => $userInfo[ 'id' ],
			'is_invoice'    => $orderInfo[ 'is_invoice' ], //是否发票 1为开票  0为不开票
			'payment'       => C( 'SHOP_ORDER_PAY_TYPE.' . $orderInfo[ 'pay_type' ] ), //支付方式
			'payment_code'  => $orderInfo[ 'pay_type' ],//支付方式编码
			'shipvia'       => C( 'SHOP_ORDER_SHIP_TYPE.' . $orderInfo[ 'ship_type' ] ), //运输方式
			'shipvia_code'  => $orderInfo[ 'ship_type' ],//运输方式编码
			'note'          => $note, //订单备注
			'buyer_name'    => $userInfo[ 'user_name' ] . '_' . $userInfo[ 'user_mobile' ],
			'buyer_mobile'  => $userInfo[ 'user_mobile' ],
			'integral_num'  => $orderInfo[ 'total_discount' ], //积分抵扣 有积分金额 没有0
			'total_num'     => $orderInfo[ 'total' ],//订单实付总金额
			//订单收货信息
			'address'       => $shAddr,
			'inremark'      =>$inremark,
		];
		switch( (int)$orderInfo['ship_type'] ){
			case 1:
				if( floatval($baseData['total_num']) > 1000 ){
					$baseData['shipvia'] = '快递寄付';
				}else{
					$baseData['shipvia'] = '快递到付';
				}
				break;
			case 2:
				$baseData['shipvia'] = '物流-'.$orderInfo['delivery_name'];
				break;
			case 3:
				$baseData['shipvia'] = '客户自取';
				break;
			case 4:
				$baseData['shipvia'] = '送货';
				break;
			default:
				$baseData['shipvia'] = $orderInfo['delivery_name'];
		}
		
		foreach ( $orderInfo[ 'goods' ] as $k => $v ) {
			//商城产品信息
			//file_put_contents('7.txt',json_encode($v));
			if($v['rule_info']){
				$rule=json_decode($v['rule_info'],1);
			}else{
				$rule['return_price']=0;
			}
			if($v['pay_subtotal']>0){
				$fissample='N';
			}else{
				$fissample='Y';
			}
			$baseData[ 'items' ][] = [
				'erp_item_no' => $v[ 'fitemno_change' ], //erp产品编码
				'p_name'      => $v[ 'p_name' ], //商城产品名称
				'p_num'       => $v[ 'p_num' ], //产品数量
				'p_price'     => $v[ 'subtotal' ] / $v[ 'p_num' ], //产品价格
				'true_price'  => $v['pay_subtotal'] / $v['p_num'], //产品实付价格
				'fissample'   => $fissample,
				'fywprice'    =>$rule['return_price'],
				'fywmoney'    =>$rule['return_price']*$v[ 'p_num' ]
			];
		}
		!empty( $data ) && $baseData = array_merge( $baseData, $data );
		//file_put_contents('8.txt',json_encode($baseData[ 'items' ]));
		$this->ajaxReturn( $baseData );
	}
	
	public function getOrder($orderNo){
		//$orderNo='180607161589';
		$res['order_hy']=M('order_sync_hy')->field("erp_th_no")->where("order_no='{$orderNo}'")->select();
		if(!$res['order_hy']){
			$res['order_hy']=[];
		}
		$this->ajaxReturn($res);
	}
	/**
	 * 组装销售订单同步ERP所需的数据
	 * @param string $orderNo 商城订单编号
	 * @throws
	 * @return mixed
	 */
	public function addNewOrder( $orderNo )
	{
		//查询订单数据
		$orderModel = new OrderModel();
		$orderInfo = $orderModel->getAllInfo( $orderNo );
		!$orderInfo && $this->ajaxReturn( ['isDel'=>1], false );
		//查询订单用户数据
		$userModel = new UserModel();
		$userInfo = $userModel->getAllInfo( $orderInfo[ 'user_id' ] );
		!$userInfo && $this->ajaxReturn( [], false ,'订单用户信息查询失败');
		$isCompany = $userInfo[ 'user_type' ] == 2 ? true : false;
		$isSon = $userInfo[ 'user_type' ] == 20 ? true : false;
		
		//如果是企业子账号 查询主账号ID, 对信息进行替换
		if ( $isSon ) {
			$parentId = $userModel->getParentId( $userInfo[ 'id' ] );
			$pUserInfo = $userModel->getAllInfo( $parentId[ 'p_id' ] );
			$userInfo[ 'company' ] = $pUserInfo[ 'company' ];
			$userInfo[ 'user_type' ] = 2;
			
			$userInfo[ 'fcustno' ]=$pUserInfo[ 'fcustno' ];
			$userInfo[ 'sys_uid' ]=$pUserInfo[ 'sys_uid' ];
			$userInfo[ 'id' ]=$pUserInfo[ 'id' ];
		}
		
		$noCust = empty( $userInfo[ 'fcustno' ] ) ? true : false;
		//订单下单收货地址
		$shAddr = [
			'address'   => $this->getAddressByCode( $orderInfo[ 'detail' ][ 'area_code' ] ) . $orderInfo[ 'detail' ][ 'address' ], //订单收货地址
			'consignee' => $orderInfo[ 'detail' ][ 'consignee' ], //订单收货人
			'mobile'    => $orderInfo[ 'detail' ][ 'mobile' ], //订单收货人联系电话
			'zipcode'   => $orderInfo[ 'detail' ][ 'zipcode' ], //邮编
		];
		//当前下单收货地址插入到地址数组第一个元素
		array_unshift( $userInfo[ 'address' ], $shAddr );
		//无对应ERP客户编码
		if ( $noCust ) {
			//查询用户对应ERP业务员数据
			$erpUserModel = new ErpUserModel();
			$erpUser = $erpUserModel->field( 'femplno' )->find( $userInfo[ 'sys_uid' ] );
			if($isSon){
				$data[ 'custData' ] = [
					'emplNo' => $erpUser[ 'femplno' ], //ERP业务员编码 如果商城用户未分配对应业务员 请留空
					'data'   => [
						//user表的数据
						'user_name'   => $pUserInfo[ 'user_name' ],
						'user_mobile' => $pUserInfo[ 'user_mobile' ],
						'user_email' => $pUserInfo['user_email'],
						'user_type'   => $pUserInfo[ 'user_type' ],
						//['address'] 里面放收货地址的信息
						'address'     => $pUserInfo[ 'address' ],
					],
				];
			}else{
				$data[ 'custData' ] = [
					'emplNo' => $erpUser[ 'femplno' ], //ERP业务员编码 如果商城用户未分配对应业务员 请留空
					'data'   => [
						//user表的数据
						'user_name'   => $userInfo[ 'user_name' ],
						'user_mobile' => $userInfo[ 'user_mobile' ],
						'user_email' => $userInfo['user_email'],
						'user_type'   => $userInfo[ 'user_type' ],
						//['address'] 里面放收货地址的信息
						'address'     => $userInfo[ 'address' ],
					],
				];
			}
			
			if ( $userInfo[ 'user_type' ] == 2 ) {
				$userInfo[ 'company' ][ 'company_city' ] = $this->getCityByCode( $userInfo[ 'company' ][ 'company_area' ] );
				$data[ 'custData' ][ 'data' ][ 'info' ] = $userInfo[ 'company' ];
			}
		}
		if($isSon){
			$note=$orderInfo[ 'detail' ][ 'note' ]!='no'&&$orderInfo[ 'detail' ][ 'note' ]?$orderInfo[ 'detail' ][ 'note' ].'子账号订单':'子账号订单';
		}else{
			$note=$orderInfo[ 'detail' ][ 'note' ]?$orderInfo[ 'detail' ][ 'note' ]:'备注';
		}
		$baseData = [
			'custNo'        => $userInfo[ 'fcustno' ], //erp客户编号
			'shop_order_no' => $orderNo, //商城订单编号
			'uid'           => $userInfo[ 'id' ],
			'is_invoice'    => $orderInfo[ 'is_invoice' ], //是否发票 1为开票  0为不开票
			'payment'       => C( 'SHOP_ORDER_PAY_TYPE.' . $orderInfo[ 'pay_type' ] ), //支付方式
			'payment_code'  => $orderInfo[ 'pay_type' ],//支付方式编码
			'shipvia'       => C( 'SHOP_ORDER_SHIP_TYPE.' . $orderInfo[ 'ship_type' ] ), //运输方式
			'shipvia_code'  => $orderInfo[ 'ship_type' ],//运输方式编码
			'note'          => $note, //订单备注
			'buyer_name'    => $userInfo[ 'user_name' ] . '_' . $userInfo[ 'user_mobile' ],
			'buyer_mobile'  => $userInfo[ 'user_mobile' ],
			'integral_num'  => $orderInfo[ 'total_discount' ], //积分抵扣 有积分金额 没有0
			'total_num'     => $orderInfo[ 'total' ],//订单实付总金额
			//订单收货信息
			'address'       => $shAddr,
		];
		switch( (int)$orderInfo['ship_type'] ){
			case 1:
				if( floatval($baseData['total_num']) > 1000 ){
					$baseData['shipvia'] = '快递寄付';
				}else{
					$baseData['shipvia'] = '快递到付';
				}
				break;
			case 2:
				$baseData['shipvia'] = '物流-'.$orderInfo['delivery_name'];
				break;
			case 3:
				$baseData['shipvia'] = '客户自取';
				break;
			case 4:
				$baseData['shipvia'] = '送货';
				break;
			default:
				$baseData['shipvia'] = $orderInfo['delivery_name'];
		}
		
		foreach ( $orderInfo[ 'goods' ] as $k => $v ) {
			//商城产品信息
			//file_put_contents('7.txt',json_encode($v));
			if($v['rule_info']){
				$rule=json_decode($v['rule_info'],1);
			}else{
				$rule['return_price']=0;
			}
			if($v['pay_subtotal']>0){
				$fissample='N';
			}else{
				$fissample='Y';
			}
			$baseData[ 'items' ][] = [
				'erp_item_no' => $v[ 'fitemno_sync' ], //erp产品编码
				'p_name'      => $v[ 'p_name' ], //商城产品名称
				'p_num'       => $v[ 'p_num' ], //产品数量
				'p_price'     => $v[ 'subtotal' ] / $v[ 'p_num' ], //产品价格
				'true_price'  => $v['pay_subtotal'] / $v['p_num'], //产品实付价格
				'fissample'   => $fissample,
				'fywprice'    =>$rule['return_price'],
				'fywmoney'    =>$rule['return_price']*$v[ 'p_num' ]
			];
		}
		!empty( $data ) && $baseData = array_merge( $baseData, $data );
		//file_put_contents('8.txt',json_encode($baseData[ 'items' ]));
		$this->ajaxReturn( $baseData );
	}
	public function storeChangeSyncResult( $result )
	{
		if ( !is_array( $result ) ) return false;
		$syncModel = new OrderSyncLogModel();
		//同步成功的
		if ( isset( $result[ 'success' ] ) ) {
			foreach ( $result[ 'success' ] as $k => $value ) {
				//查询订单信息
				$orderInfo = M( 'order' )->where( [ 'order_sn' =>  $value[ 'order_no' ]] )->find();
				if ( !$orderInfo ) continue;
				$res = M('order_sync')->where([ 'order_sn'=>$value['order_no'] ])->data(['sync_status'=>5])->save();
				
				//删除之前同步失败的日志
				M('order_sync_log')->where(['order_sn'=>$value['order_no']])->delete();
				if( $res === false ){
					continue;
				}
				M()->query("update dx_order_goods set fitemno=fitemno_change,fitemno_sync=fitemno_change,fitemno_change_status=2 WHERE order_sn='{$value[ 'order_no' ]}'");
				//同步订单成功后同步处理用户客户信息与客户对应业务员信息
				$this->syncResultStoreCustInfo( $result );
			}
			//M()->query("update dx_order_goods set fitemno=fitemno_change,fitemno_sync=fitemno_change,fitemno_change_status=2 WHERE order_sn='{$value[ 'order_no' ]}' and fitemno_change_status=1");
		}
		//同步失败的
		if ( isset( $result[ 'error' ] ) ) {
			foreach ( $result[ 'error' ] as $k => $value ) {
				$syncModel->startTrans();
				//订单已删除
				if( $value['del'] === 1 ){
					$model = M('order_sync');
					$mDel= $model->where(['order_sn'=>$value[ 'order_sn' ]])->data(['sync_status'=>3])->save();
					if( $mDel !== false){
						$syncModel->commit();
						continue;
					}else{
						$syncModel->rollback();
						Log::write( '删除同步订单错误: 商城订单' . $value[ 'order_sn' ] . ' 同步纪录删除失败!');
						continue;
					}
				}
				//其他失败原因写入记录表
				$addData = [
					'order_sn'    => $value[ 'order_sn' ],
					'lineid'      => $syncModel->getMaxLindId( $value[ 'order_sn' ] ),
					'handle_user' => 0,
					'sync_status' => 2,
					'fail_desc'   => str_replace('Error: ','',$value[ 'msg' ]),
				];
				$syncRes = $syncModel->add( $addData );
				$regood=M('order_goods')->where(['order_sn'=>$value[ 'order_sn' ]])->save(['fitemno_change_status'=>3]);
				if($regood===false){
					$syncModel->rollback();
					continue;
				}
				$mSave= M('order_sync')->where([ 'order_sn'=>$value['order_sn'] ])->data(['sync_status'=>6])->save();
				if ( $syncRes === false || $mSave === false ) {
					$syncModel->rollback();
					Log::write( 'EES错误: 商城订单' . $value[ 'order_sn' ] . ' 同步纪录写入失败!ERP同步失败原因:'.$value[ 'msg' ] );
					continue;
				}
				$syncModel->commit();
			}
		}
		
		$this->ajaxReturn( [ 'res' => true ] );
	}
	//订单同步ERP后的结果处理
	public function storeOrderSyncResult( $result )
	{
		if ( !is_array( $result ) ) return false;
		$syncModel = new OrderSyncLogModel();
		//同步成功的
		if ( isset( $result[ 'success' ] ) ) {
			foreach ( $result[ 'success' ] as $k => $value ) {
				//查询订单信息
				$orderInfo = M( 'order' )->where( [ 'order_sn' =>  $value[ 'order_no' ]] )->find();
				if ( !$orderInfo ) continue;
				$res = M('order_sync')->where([ 'order_sn'=>$value['order_no'] ])->data(['sync_status'=>1])->save();
				//删除之前同步失败的日志
				M('order_sync_log')->where(['order_sn'=>$value['order_no']])->delete();
				if( $res === false ){
					continue;
				}
				//同步订单成功后同步处理用户客户信息与客户对应业务员信息
				$this->syncResultStoreCustInfo( $result );
			}
		}
		//同步失败的
		if ( isset( $result[ 'error' ] ) ) {
			foreach ( $result[ 'error' ] as $k => $value ) {
				$syncModel->startTrans();
				//订单已删除
				if( $value['del'] === 1 ){
					$model = M('order_sync');
					$mDel= $model->where(['order_sn'=>$value[ 'order_sn' ]])->data(['sync_status'=>3])->save();
					if( $mDel !== false){
						$syncModel->commit();
						continue;
					}else{
						$syncModel->rollback();
						Log::write( '删除同步订单错误: 商城订单' . $value[ 'order_sn' ] . ' 同步纪录删除失败!');
						continue;
					}
				}
				//其他失败原因写入记录表
				$addData = [
					'order_sn'    => $value[ 'order_sn' ],
					'lineid'      => $syncModel->getMaxLindId( $value[ 'order_sn' ] ),
					'handle_user' => 0,
					'sync_status' => 2,
					'fail_desc'   => str_replace('Error: ','',$value[ 'msg' ]),
				];
				$syncRes = $syncModel->add( $addData );
				$mSave= M('order_sync')->where([ 'order_sn'=>$value['order_sn'] ])->data(['sync_status'=>2])->save();
				if ( $syncRes === false || $mSave === false ) {
					$syncModel->rollback();
					Log::write( 'EES错误: 商城订单' . $value[ 'order_sn' ] . ' 同步纪录写入失败!ERP同步失败原因:'.$value[ 'msg' ] );
					continue;
				}
				$syncModel->commit();
			}
		}
		
		$this->ajaxReturn( [ 'res' => true ] );
	}
	
	/**
	 * 组装退款订单同步ERP所需的数据
	 *
	 * @param string $re_sn 退款流水单号
	 * @throws
	 * @return mixed
	 */
	public function addNewRetreatOrder( $re_sn )
	{
		//查询退款订单数据
		$retreat = new RetreatModel();
		$res = $retreat->getDetail( $re_sn );
		
		//查询订单数据
		$orderModel = new OrderModel();
		$orderInfo = $orderModel->getAllInfo( $res[ 'order_sn' ] );
		//        dd( $orderInfo );
		//查询订单用户数据
		$userModel = new UserModel();
		$userInfo = $userModel->getAllInfo( $res[ 'order' ][ 'user_id' ] );
		//查询用户对应ERP用户数据
		$erpUserModel = new ErpUserModel();
		$erpUser = $erpUserModel->field( 'femplno' )->find( $userInfo[ 'sys_uid' ] );
		
		$isCompany = $userInfo[ 'user_type' ] == 2 ? true : false;
		$isSon = $userInfo[ 'user_type' ] == 20 ? true : false;
		
		//如果是企业子账号 查询主账号ID, 对信息进行替换
		if ( $isSon ) {
			$parentId = $userModel->getParentId( $userInfo[ 'id' ] );
			$pUserInfo = $userModel->getAllInfo( $parentId[ 'p_id' ] );
			$userInfo[ 'company' ] = $pUserInfo[ 'company' ];
			$userInfo[ 'user_type' ] = 2;
		}
		
		//无对应ERP客户编码
		$noCust = empty( $userInfo[ 'fcustno' ] ) ? true : false;
		if ( $noCust ) {
			$data[ 'custData' ] = [
				'emplNo' => $erpUser[ 'femplno' ], //ERP业务员编码 如果商城用户未分配对应业务员 请留空
				'data'   => [
					//user表的数据
					'user_name'   => $userInfo[ 'user_name' ],
					'user_mobile' => $userInfo[ 'user_mobile' ],
					'user_type'   => $userInfo[ 'user_type' ],
					//['address'] 里面放收货地址的信息
					'address'     => $userInfo[ 'address' ],
				],
			];
			if ( $isCompany ) {
				$userInfo[ 'company' ][ 'company_city' ] = $this->getCityByCode( $userInfo[ 'company' ][ 'company_area' ] );
				$data[ 'custData' ][ 'data' ][ 'info' ] = $userInfo[ 'company' ];
			}
		}
		$baseData = [
			're_sn'             => $re_sn,
			'cust_no'           => $userInfo[ 'fcustno' ], //erp客户编号
			'order_no'          => $res[ 'order_sn' ], //商城订单编号
			'note'              => $res[ 'retreat_desc' ], //订单备注
			'uid'               => $res['user_id'],
			'buyer_name'        => $userInfo[ 'user_name' ] . '_' . $userInfo[ 'user_mobile' ],
			'buyer_mobile'      => $userInfo[ 'user_mobile' ],
			'integral_num'      => $orderInfo[ 'total_discount' ], //积分抵扣 有积分金额 没有0
			'total_num'         => $orderInfo[ 'total_origin' ], //原订单支付总金额
			'total'             => $orderInfo[ 'total_origin' ]+$orderInfo[ 'total_discount' ], //原订单总金额(包含积分抵扣)
			'retreat_total_num' => $res[ 'retreat_money' ],//退款总金额
			'retreat_type'      => $res[ 'retreat_type' ],//退款方式 0仅退款  1退货退款
			'cargo_status'      => $res[ 'cargo_status' ],//是否收到货
			'order_is_invoice'  => $orderInfo[ 'is_invoice' ], //原订单是否开发票
		];
		//订单退款产品
		//单个退款商品的总金额 = (产品购买单价*产品购买数量) - (((产品购买单价*产品购买数量)/应付总额:包含积分抵扣的总额)*积分抵扣金额)
		foreach ( $res[ 'goods' ] as $k => $v ) {
			$baseData[ 'items' ][] = [
				'erp_item_no' => $v[ 'fitemno' ], //erp产品编码
				'p_name'      => $v[ 'p_sign' ], //商城产品名称
				'p_num'       => $v[ 'p_num' ], //产品数量
				'p_price'     => $v[ 'p_price' ], //产品价格
			
			];
		}
		!empty( $data ) && $baseData = array_merge( $baseData, $data );
		
		$this->ajaxReturn( $baseData );
		
	}
	
	//退款订单同步ERP后的结果处理
	public function storeRetreatOrderSyncResult( $result )
	{
		if ( !is_array( $result ) ) return false;
		$retreatModel = new RetreatModel();
		$syncModel = new RetreatSyncLogModel();
		if( isset( $result['success'] ) ){
			foreach( $result['success']  as $key=>$value ){
				if( isset($value['isSyncTrue']) ){
					$find = $syncModel->where(['re_sn'=>$value['re_sn']])->find();
					if( !$find ){
						$syncRes = $syncModel->add([
							're_sn'=>$value['re_sn'],
							'lineid'=>$syncModel->getMaxLindId($value['re_sn']),
							'handle_user' => 0,
							'sync_status' => 1,
							'success_fsrno'=>$value['sdReturnNo']
						]);
						if ( $syncRes === false ) {
							Log::write( 'EES错误: 商城退款申请订单' . $value[ 're_sn' ] . ' 同步纪录写入失败!ERP退货单号:'.$value['sdReturnNo'] );
							continue;
						}
					}
				}else{
					$isExists = $retreatModel->where( ['re_sn'=>$value['re_sn']] )->find();
					if( !$isExists ){
						continue;
					}
					$res = $retreatModel->where( ['re_sn'=>$value['re_sn']] )->save(['sync_status'=>1]);
					if( $res !== false ){
						$syncRes = $syncModel->add([
							're_sn'=>$value['re_sn'],
							'lineid'=>$syncModel->getMaxLindId($value['re_sn']),
							'handle_user' => 0,
							'sync_status' => 1,
							'success_fsrno'=> json_encode( $value['sdReturnNo'] )
						]);
						if ( $syncRes === false ) {
							Log::write( 'EES错误: 商城退款申请订单' . $value[ 're_sn' ] . ' 同步纪录写入失败!ERP退货单号:'.json_encode( $value['sdReturnNo'] ) );
							continue;
						}
					}
					//同步处理客户信息与客户业务员信息
					$this->syncResultStoreCustInfo( $result );
				}
			}
		}
		//同步失败的
		if ( isset( $result[ 'error' ] ) ) {
			foreach ( $result[ 'error' ] as $k => $value ) {
				Log::write( 'EES错误: 商城退款申请订单' . $value[ 're_sn' ] . $value[ 'msg' ] );
				//失败原因写入记录表
				$syncRes = $syncModel->add([
					're_sn'=>$value['re_sn'],
					'lineid'=>$syncModel->getMaxLindId($value['re_sn']),
					'handle_user' => 0,
					'sync_status' => 2,
					'fail_desc'   => $value[ 'msg' ],
				]);
				if ( $syncRes === false ) {
					Log::write( 'EES错误: 商城退款申请订单' . $value[ 're_sn' ] . ' 同步纪录写入失败!同步失败原因:'.$value[ 'msg' ] );
					continue;
				}
			}
		}
	}
	
	//同步订单成功后同步处理用户客户信息与客户对应业务员信息
	protected function syncResultStoreCustInfo( $result )
	{
		$syncModel = new OrderSyncLogModel();
		$userModel = new UserModel();
		$erpUserModel = new ErpUserModel();
		foreach ( $result[ 'success' ] as $k => $value ) {
			$syncModel->startTrans();
			//更新用户对应的客户信息
			$userSaveRes = $userModel->where( [ 'id' => $value[ 'uid' ] ] )->save( [
				'fcustno' => $value[ 'cust_no' ],
				'fcustjc' => $value[ 'cust_jc' ],
			] );
			if ( $userSaveRes === false ) {
				$syncModel->rollback();
				Log::write( 'EES错误: 用户' . $value[ 'uid' ] . '数据ERP客户编码更新失败');
				continue;
			}
			$saleNo = $value[ 'fsale' ];
			$saleName = $value[ 'fsalename' ];
			//更新客户数据表信息 erp_customer表 ERP客户表
			//是否存在
			$custCount = M( '', 'erp_customer' )->where( [ 'fcustno' => $value[ 'cust_no' ] ] )->count();
			if ( $custCount > 0 ) {
				//存在则更新
				$custRes = M( '', 'erp_customer' )->where( [ 'fcustno' => $value[ 'cust_no' ] ] )->save( [
					'fcustname' => $value[ 'fsalename' ],
					'fcustjc'   => $value[ 'cust_jc' ],
					'fsale'     => $saleNo,
					'fsalename' => $saleName,
				] );
			} else {
				//不存在则创建
				$custRes = M( '', 'erp_customer' )->add( [
					'fcustno'   => $value[ 'cust_no' ],
					'fcustname' => $value[ 'fsalename' ],
					'fcustjc'   => $value[ 'cust_jc' ],
					'fsale'     => $saleNo,
					'fsalename' => $saleName,
				] );
			}
			if ( $custRes === false ) {
				$syncModel->rollback();
				Log::write( 'EES错误: 客户信息' . $value[ 'cust_no' ] . '在表erp_customer更新失败');
				continue;
			}
			//更新用户对应业务员信息
			$erpUserRes = $erpUserModel->where( [ 'FEmplNo' => $saleNo ] )->find();
			//查询是否存在
			if ( $erpUserRes ) {
				//存在 更新业务员数据
				$saveRes = $erpUserModel->where( [ 'FEmplNo' => $saleNo ] )->save( [
					'FEmplName' => $saleName,
				] );
				if ( $saveRes === false ) {
					$syncModel->rollback();
					Log::write( 'EES错误: 用户' .$value[ 'uid' ]. ' 的ERP业务员: ' . $saleNo . '--' . $saleName . '数据更新失败');
					continue;
				}
				$insertId = $erpUserRes[ 'uid' ];
			} else {
				//不存在业务员
				//创建业务员
				$insertId = $erpUserModel->add( [
					'FEmplNo'       => $saleNo,
					'FEmplName'     => $saleName,
					'user_name'     => $saleName,
					'department_id' => 0,
					'create_by'     => 10000,
					'password'      => 0,
				] );
				//同步创建到erp_admin 表
				$count = M( '', 'erp_admin' )->where( [ 'femplno' => $saleNo ] )->find();
				if ( !$count ) {
					$adminRes = M( '', 'erp_admin' )->add( [
						'femplno'   => $saleNo,
						'femplname' => $saleName,
					] );
					if ( $adminRes === false ) {
						$syncModel->rollback();
						Log::write( 'EES错误: erp_admin表创建' . $saleNo . ' 的ERP业务员: ' . $saleNo . '--' . $saleName . '失败');
						continue;
					}
				}
				if ( $insertId === false ) {
					$syncModel->rollback();
					Log::write( 'EES错误: 用户' . $value[ 'uid' ] . ' 的ERP业务员: ' . $saleNo . '--' . $saleName . '创建失败' );
					continue;
				}
			}
			//更新用户表 用户数据
			$saveRes = $userModel->where( [ 'id' => $value[ 'uid' ] ] )->save( [ 'sys_uid' => $insertId ] );
			if ( $saveRes === false ) {
				$syncModel->rollback();
				Log::write( 'EES错误: 用户' . $value[ 'uid' ] . ' 的用户表业务员信息更新失败');
				continue;
			}
			
			//提交事务
			$syncModel->commit();
		}
		return true;
	}
	
	/*
	 *  处理延期时间 快递和物流未收货的(执行到期自动收货)
	 */
	//    public function storeKdStateComplate()
	//    {
	//    	file_put_contents('3.txt','111'.PHP_EOL,8);
	//        $time = date( 'Y-m-d',strtotime('-5 days') );
	//        $list = M('order_kd_auto')->where(['sign_time'=>['elt', $time]])->select();
	//        if( $list ){
	//            foreach( $list as $k=>$value ){
	//                $res = M('order_sync_hy')->where(['order_no'=>$value['order_no'], 'hy_num'=>$value['kd_num']])->find();
	//                if( $res === false  ){
	//                    continue;
	//                }elseif( empty($res) ){
	//                    M('order_kd_auto')->where(['order_no'=>$value['order_no'], 'kd_num'=>$value['kd_num']])->delete();
	//                    continue;
	//                }else{
	//                    //已收货的
	//                    if( (int)$res['is_recive'] === 1 ){
	//                        M('order_kd_auto')->where(['order_no'=>$value['order_no'], 'partid'=>$value['partid']])->delete();
	//                        continue;
	//                    }else{
	//                        $order = M('order');
	//                        $orderInfo = $order->where(['order_sn'=>$value['order_no']])->find();
	//                        $order->startTrans();
	//                        //不是分批 或是最后一个分批
	//                        if( (int)$res['is_part'] === 0 || (int)$res['is_part'] === 2 ){
	//                            //订单表 订单状态改为全部收货
	//                            //订单货运信息表 所有货运信息改为收货
	//                            $orderSave = ['ship_status'=>4];
	//                            //如果付款完成 那么订单也就完成了
	//                            if( (int)$orderInfo['pay_status'] === 2 ){
	//                                $orderSave['is_comment'] = 1;
	//                                $orderSave['order_status'] = 3;
	//                            }
	//                            $orderRes = $order->where(['order_sn'=>$value['order_no']])->save( $orderSave );
	//                            $syncHyRes = M('order_sync_hy')->where(['order_no'=>$value['order_no']])->save(['is_recive'=>1]);
	//                        }elseif( (int)$res['is_part'] === 1 ){
	//                            //改为部分收货
	//                            $orderRes = $order->where(['order_sn'=>$value['order_no']])->save( ['ship_status'=>3] );
	//                            //该条货运信息  改为收货
	//                            $syncHyRes = M('order_sync_hy')->where(['order_no'=>$value['order_no'], 'partid'=>$res['partid'] ])->save(['is_recive'=>1]);
	//                        }else{
	//                            $orderRes = false;
	//                            $syncHyRes = false;
	//                        }
	//                        if($orderRes === false || $syncHyRes === false  ){
	//                            $order->rollback();
	//                            Log::write('处理快递/物流延期自动收货失败!订单号:'.$value['order_no'].'货运单号:'.$value['hy_num']);
	//                        }
	//                        //提交事务
	//                        $order->commit();
	//                    }
	//
	//                }
	//            }
	//        }
	//
	//    }
	
	public function storeKdStateComplate()
	{
		die();
		$time = strtotime('-5 days');
		$hyInfo = M()->query("select  * from  dx_order_sync_hy where (is_recive=0 and is_kd=1) or is_kd=0");
		
		if($hyInfo){
			
			foreach( $hyInfo as $k=>$value ){
				//不分批收货
				
				if($value['is_kd']==0){
					
					$status=1;                    //提交事务
					
					//$orderRes = M('order_sync_hy')->where(['order_no'=>$value['order_no'],'erp_th_no'=>$value['erp_th_no']])->save( ['is_recive'=>1] );
					
				}
				
				
				if($value['is_kd']==1){
					
					$kdNum = $value['hy_num'];
					$kdCode = $value['kd_code'];
					
					//查询货运资料
					if(!$kdCode){
						
						
						$kd = KdApi::getInit();
						$kdArr= $kd::getKdCodeByKdNum( $kdNum, true );
						
						if($kdArr){
							file_put_contents('uu.txt',$kdArr['State'].$value['order_no']);
							if($kdArr['State']==3){
								
								$karr=$kdArr['Traces'];
								$karr=$karr[count($karr)-1];
								$karr=strtotime($karr['AcceptTime']);
								if($karr<$time){
									$status=1;
									$orderRes = M('order_sync_hy')->where(['order_no'=>$value['order_no'],'erp_th_no'=>$value['erp_th_no']])->save( ['is_recive'=>1] );
								}else{
									continue;
								}
								
							}
						}
						
					}else{
						$kd = new KdController();
						$kdInfoData = $kd->info($kdCode, $kdNum, $value['order_no']);
						
						if($kdInfoData){
							//print_r($kdInfoData);
							if($kdInfoData['state']==3){
								$kdInfoData=$kdInfoData['traces'];
								$kdInfoData=$kdInfoData[count($kdInfoData)-1];
								$kdInfoData=strtotime($kdInfoData['AcceptTime']);
								
								if($kdInfoData<$time){
									$status=1;
									
									$orderRes = M('order_sync_hy')->where(['order_no'=>$value['order_no'],'erp_th_no'=>$value['erp_th_no']])->save( ['is_recive'=>1] );
								}else{
									continue;
								}
								
							}
						}
						
					}
					
				}
				
				if($value['is_part']==0){
					if($status==1){
						if($value['pay_status']==2){
							$orderRes1 = M('order')->where(['order_sn'=>$value['order_no']])->save( ['ship_status'=>4,'order_status'=>3] );
						}else{
							$orderRes1 = M('order')->where(['order_sn'=>$value['order_no']])->save( ['ship_status'=>4] );
							//判断完成状态
						}
					}
					
				}elseif($value['is_part']==1){
					
					if($status==1){
						
						$order = M('order')->where(['order_sn'=>$value['order_no']])->find();
						if($order['ship_status']!=4){
							$orderRes1 = M('order')->where(['order_sn'=>$value['order_no']])->save( ['ship_status'=>3] );
							//是否需要判断完成状态
						}
						
						
					}
				}elseif($value['is_part']==2){
					if($status==1){
						
						if($value['pay_status']==2){
							$orderRes1 = M('order')->where(['order_sn'=>$value['order_no']])->save( ['ship_status'=>4,'order_status'=>3] );
						}else{
							$orderRes1 = M('order')->where(['order_sn'=>$value['order_no']])->save( ['ship_status'=>4] );
						}
						//判断完成状态
					}
				}
				
				
				
			}
			
			
		}
		
		
		
		
		
	}
	
	
	/*
	 * 客户未同步的订单
	 * */
	public static function storeCustNoSyncOrder( $custNo )
	{
		$user = M('user')->field('id')->where(['fcustno'=>$custNo])->find();
		if( !$user ){
			return false;
		}
		//获取客户所有未同步的订单
		$orders = M('order')->alias('o')->join('__ORDER_SYNC__ as s ON s.order_sn = o.order_sn','LEFT')->field('o.order_sn')->where(['o.user_id'=>$user['id'], 's.sync_status'=>0])->select();
		if( !$orders ){
			return false;
		}
		foreach( $orders as $k=>$v ){
			if( $v['order_sn'] ){
				(new \Home\Model\ErpModel())->orderToErp($v['order_sn']);//订单同步到erp
			}
			
		}
		return true;
	}
	
	
	//    /**
	//     * 获取指定商城订单在ERP的货运信息 (弃用)
	//     *
	//     * @param string $orderNo
	//     * @return string 产品价格
	//     **/
	//    public function getOrderHyInfo( $orderNo )
	//    {
	//        $rs = $this->requestEes( [ 'orderNo' => $orderNo ], 'App.Order.GetShopOrderHyInfo' );
	//        if ( $rs[ 'error' ] ) {
	//            $this->ajaxReturn( [], false, $rs[ 'msg' ] );
	//        } else {
	//            $this->ajaxReturn( $rs[ 'data' ] );
	//        }
	//    }
}