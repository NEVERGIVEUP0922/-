<?php

// +----------------------------------------------------------------------
// | FileName:   ProductController.class.php
// +----------------------------------------------------------------------
// | Dscription:   产品控制器类
// +----------------------------------------------------------------------
// | Date:  2017/8/7 12:45
// +----------------------------------------------------------------------
// | Author: showkw <showkw@163.com>
// +----------------------------------------------------------------------

namespace Home\Controller;

use Admin\Controller\MsgController;
use Home\Controller\HomeController;
use Org\ThinkSDK\sinaClient;
use Org\ThinkSDK\ThinkOauth;
use Home\Controller\DefaultController;


class ProductController extends HomeController
{
	public $category_list;
	public $brand_list;
	
	public $upload_root = '';
	
	protected function _initialize()
	{
		parent::_initialize(); // TODO: Change the autogenerated stub
		$this->upload_root = rtrim( SITE_PATH, DIRECTORY_SEPARATOR ) . DIRECTORY_SEPARATOR . rtrim( C( 'UPLOAD_ROOT' ), DIRECTORY_SEPARATOR ) . '/';
	}
	
	/*
	 * 商品详情页
	 *
	 */
	public function detail()
	{
		$request=I('get.');
		$pro = D( 'Product' );
		$productWhere=[];
		if( isset( $request['sign'] )&& $request['sign'] ){
			$productWhere=['p_sign'=>$request['sign'] ];
		}else{
			$this->error( '商品信息错误' ,U('Home/Default/index'));
		}
		$productWhere=[$productWhere];
		$info_result=$this->productList($productWhere);
		$info=($info_result['error']==0)?$info_result['data']['list'][0]:'';
		$p_id=$info['id'];
		
		//计算最小盘数
		$min = floatval($info['min']);//最小包装
		$minOrder = floatval($info['minorder']); //最小起订量
		if( empty($minOrder) ){
			$info['minorder'] = 0;
			$default['pan'] = 0;
			$default['k'] = 0;
			$default['g'] = 0;
		}else{
			if( $minOrder < $min ){
				$default['pan'] = 0;
				if( $minOrder > 1000 ){
					$default['k'] = floor($minOrder/1000);
					$default['g'] = $minOrder-($default['k']*1000);
				}
			}elseif( $minOrder == $min ){
				$default['pan'] = 1;
				$default['k'] = $default['g'] = 0;
			}else{
				$default['pan'] = floor($minOrder/$min);
				$default['k'] = floor(($minOrder-$default['pan']*$min)/1000);
				$default['g'] = $minOrder-($default['pan']*$min )-($default['k']*1000);
			}
		}
		$this->assign('default',$default);
		//		$path = $this->getCatePath( $info[ 'cate_id' ] );
		$info[ 'pdfImg' ] = $this->getPdfImgs( $p_id );
		//若用户登录
		if ( is_login() ) {
			//获取用户收藏夹列表
			$user_id = session( 'userId' );
			$result = D( 'user_collect' )->where( [ 'user_id' => $user_id ] )->find();
			$collectArr = json_decode( $result[ 'collect' ], true );
			if ( in_array( $p_id, $collectArr ) ) {
				$this->assign( 'collected', 1 );
			} else {
				$this->assign( 'collected', 0 );
			}
			//加入用户浏览足迹
			$this->addHistory( $p_id, $user_id );
		}
		//商品点击量加1
		$ip = session( 'userIp' );
		$uid = session( 'userId' ) ? session( 'userId' ) : 0;
		if ( !S( 'click_' . $ip . '_' . $uid ) ) {
			$pro->where( [ 'id' => $p_id ] )->setInc( 'click_num' );
			S( 'click_' . $ip . '_' . $uid, 'clicked', 10 ); //10秒内 同一ip同一账号点击只算一次
		}
		if ( IS_AJAX ) {
			$this->ajaxReturn( $info, 'json' );
		}
		if ( IS_GET ) {
			$this->assign( 'p_id', $p_id );
			$user_id = session( 'userId' );
			if ( $user_id ) {//用户登录
				$user_basket = D( 'basket' )->where( [ 'user_id' => $user_id ] )->find();
				$basket_id = $user_basket[ 'basket_id' ];
			} else {//用户未登录
				$basket = new \Home\Controller\BasketController();
				$basket_id = $basket->notLoginBasketId();
			}
			$basket_goods = D( 'basket_detail' )->where( [ 'pid' => $p_id, 'basket_id' => $basket_id ] )->find();
			//$this->assign( 'path', $path );
			$this->assign( 'info', $info );
			
			$this->assign( 'basket_goods', $basket_goods );
			$this->assign( 'price', $info[ 'price' ] );
			$this->assign( 'attr', $info[ 'attr' ] );
			$this->assign( 'pdfImg', $info[ 'pdfImg' ] );
			$this->assign( 'big', $info[ 'pdfImg' ][ 'big' ] );
			$this->assign( 'small', $info[ 'pdfImg' ][ 'small' ] );
			$this->display();
		}
	}
	
	
	/*
	 * 详情页下载pdf
	 *
	 */
	public function downPdf( $p_id = 1 )
	{
		$p_id = I( 'p_id' ) ? I( 'p_id' ) : $p_id;
		//详情表查询
		$detail = M( 'product_detail' );
		$pro = M( 'product' )->field( 'p_sign' )->where( [ 'id' => $p_id ] )->find();
		$info = $detail->field( 'pdf' )->where( [ 'p_id' => $p_id ] )->find();
		$pdf = "/www/wwwroot/demo/"  . $info[ 'pdf' ];
		
		header( 'Content-type: application/pdf' );
		header( 'Content-Disposition: attachment; filename="' . $pro[ 'p_sign' ]. '.pdf"' );
		readfile( $pdf );
		exit();
	}
	
	/*
	 *
	 * 获取pdf转化的图片
	 * @param $p_id  int 产品id
	 * @return  array  相对于上次文件目录下的相对图片地址
	 *
	 */
	public function getPdfImgs( $p_id )
	{
		$res = M('product_detail')->where(['p_id'=>$p_id])->find();
		if( $res && $res['img_path'] ){
			$imgAll = ['png','jpg','jpeg','bmp'];
			//相对路径
			$basePath = trim($res['img_path'],'/');
			//绝对路径
			$path = SITE_PATH.$basePath;
			//扫描目录 原图目录
			$imageNames = scandir($path.'/big');
			//排序
			sort($imageNames,SORT_NATURAL);
			foreach($imageNames as $key =>$name){
				//获取扩展
				$ext = getExtension($path.'\\bug\\'.$name);
				if( $name != '.' && $name != '..' && in_array($ext, $imgAll) ){
					$imgsArr['big'][] = '/'.$basePath.'/big/'.$name;
				}
			}
			//缩略图
			$thumbImageNames = scandir($path.'/small');
			sort($thumbImageNames,SORT_NATURAL);
			$coverExt = 'png';
			foreach($thumbImageNames as $key =>$name){
				//获取扩展
				$ext = getExtension($path.'\\small\\'.$name);
				if( $key === 0 ){
					$coverExt = $ext;
				}
				if( $name != '.' && $name != '..' && in_array($ext, $imgAll) ){
					$imgsArr['small'][] = '/'.$basePath.'/small/'.$name;
				}
			}
			//缩略封面图
			$imgsArr['cover'] = '/'.$basePath.'/cover.png';
		}else{
			$imgsArr = [];
		}
		
		return $imgsArr;
	}
	
	/*
	 *
	 * PDF文件转图片 (弃用)
	 * @param  $pdf  待转换的pdf文件地址
	 * @param  $imgDir  生成后图片保存目录
	 *
	 */
	public function pdf2png( $pdf, $imgDir )
	{
		if ( !extension_loaded( 'imagick' ) ) {
			return 1;//未安装imagick扩展
		}
		if ( !file_exists( $pdf ) ) {
			return 2;//pdf文件不存在
		}
		$type = strtolower( C( 'PDF2IMG_TYPE' ) );
		$allType = [ 'png', 'jpg', 'jpeg', 'bmp' ];
		if ( !in_array( $type, $allType ) ) {
			return 3;//只允许转换'png','jpg','jpeg','bmp'图片格式
		}
		$IM = new \Imagick();
		$IM->setResolution( 100, 100 );
		$IM->setCompressionQuality( 100 );
		$IM->readImage( $pdf );
		foreach ( $IM as $key => $var ) {
			$var->setImageFormat( $type );
			$fileName = $imgDir . '/big/image-' . $key . '.' . $type;//相对于Uploads路径 原图
			$baseName = $this->upload_root . $fileName;//绝对路径 原图
			$thumbName = $this->upload_root . $imgDir . '/small/image-' . $key . '.' . $type; //缩略图
			$coverName = $this->upload_root . $imgDir . '/cover.' . $type;
			if ( $var->writeImage( $baseName ) == true ) {
				//生成缩略图
				if ( $key == 0 ) {
					// 生成封面图 122*147
					$image = new \Think\Image();
					$image->open( $baseName );
					$image->thumb( 122, 147, 1 )->save( $coverName );
				}
				//生成缩略图
				$image = new \Think\Image();
				$image->open( $baseName );
				$image->thumb( 173, 224, 1 )->save( $thumbName );
				$Return[ 'big' ][] = '/' . $fileName;//原图
				$Return[ 'small' ][] = '/' . $imgDir . '/small/image-' . $key . '.' . $type;//缩略图
				$Return[ 'cover' ] = '/' . $imgDir . '/cover.' . $type;
			}
		}
		
		return $Return;
	}
	
	/*
	 *
	 *  获取指定分类id 的分类路径信息
	 */
	public function getCatePath( $cate_id )
	{
		$cate_id = intval( $cate_id );
		empty( $cate_id ) && exit();
		$cate = D( 'category' );
		$path = [];
		$info = $cate->where( [ 'id' => $cate_id ] )->find();
		if ( $info[ 'path' ] == '0,' ) {
			$path[] = [ 'id' => $cate_id, 'name' => $info[ 'cate_name' ] ];
		} else {
			$pathArr = explode( ',', rtrim( $info[ 'path' ], ',' ) );
			foreach ( $pathArr as $k => $value ) {
				if ( $value != 0 ) {
					$data = $cate->where( [ 'id' => intval( $value ) ] )->find();
					$path[] = [ 'id' => intval( $value ), 'name' => $data[ 'cate_name' ] ];
				}
			}
			$path[] = [ 'id' => $cate_id, 'name' => $info[ 'cate_name' ] ];
		}
		
		return $path;
	}
	
	/*
	 *  商品列表
	 */
	public function search()
	{
		$request = I( 'get.' );
		$request=executePurifier($request);
		$where=[];
		
		//用户购物车里的商品
		$user_id = session( 'userId' );
		if ( $user_id ) {//用户登录
			$user_basket = D( 'basket' )->where( [ 'user_id' => $user_id ] )->find();
			$basket_id = $user_basket[ 'basket_id' ];
		} else {//用户未登录
			$basket = new \Home\Controller\BasketController();
			$basket_id = $basket->notLoginBasketId();
		}
		if (in_array($request['search_type'],['hot_brand','hot_function'])){
			if($request['search_type']=='hot_brand' && $request['search']){//品牌名的模糊搜索
				$brandName=M('brand')->field('id')->where(['brand_name'=>['like',"%$request[search]%"]])->select();
				if($brandName){
					$brandId_arr=[];
					foreach($brandName as $k=>$v){
						$brandId_arr[]=$v['id'];
					}
					$where[]['brand_id']=['in',$brandId_arr];
				}else{
					$where[]['brand_id']=0;
				}
			}else if($request['search_type']=='hot_function' && $request['search']){//功能搜索---分类，功能简要，产品描述
				$where[]=[
					'parameter'=>['like',"%$request[search]%"],
					'describe'=>['like',"%$request[search]%"],
					'_logic'=>'or'
				];
			}
		}else{
			
			if ( $request['brand_id'] ) $where[ 'brand_id' ] = $request['brand_id'] ;//品牌搜素
			if ( $request['cate_id'] ) {//分类搜索
				$cate_id_arr = $this->bottomLevelCategory( $request['cate_id'] );
				$where[][ 'cate_id' ] = [ 'in', $cate_id_arr ];
			}
			
			//关键字搜索
			if ( $request['search'] ){
				if(session('adminId')){//只有管理员可以搜索erp型号
					$where[]=[
						'fitemno_access'=>[ 'like', '%' . $request['search'] . '%' ],
						'fitemno'=>[ 'like', '%' . $request['search'] . '%' ],
						'p_sign'=>[ 'like', '%' . $request['search'] . '%' ],
						'p_sign in (select p_sign from dx_product_fitemno where fitemno like "%'.$request['search'].'%")',
						'_logic'=>'or'
					];
				}else{
					$where[]=[
						'fitemno_access'=>[ 'like', '%' . $request['search'] . '%' ],
						'p_sign'=>[ 'like', '%' . $request['search'] . '%' ],
						'_logic'=>'or'
					];
				}
				$this->addUserSearchWordsLog($request['search']);
			}
			if ( $request['search_inner'] ){
				$where[]=[
					'fitemno_access'=>[ 'like', '%' . $request['search_inner'] . '%' ],
					'fitemno'=>[ 'like', '%' . $request['search_inner'] . '%' ],
					'p_sign'=>[ 'like', '%' . $request['search_inner'] . '%' ],
					'_logic'=>'or'
				];
				$this->addUserSearchWordsLog($request['search_inner']);
			}
			
			if ( $request[ 'store' ] ){//库存
				$list=$this->erpProductList(['store'=>['gt',0]]);
				if($list['error']==0){
					$fitemno_arr=[];
					foreach($list['data']['list'] as $k=>$v){ $fitemno_arr[]=$v['fitemno']; }
				}
				$where['fitemno']=['in',$fitemno_arr];
			}
			
			if( $request[ 'productId_arr' ] ) $where['id']=['in',$request[ 'productId_arr' ]]; //多个商品信息获取
		}
		
		if(isset($request['searchTop'])&&$request['searchTop']){//头条推荐搜索
			$where['search_top']=$request['searchTop'];
		}
		//排序
		if ( $request[ 'sell_sort' ]==12 ) $sort = 'is_search_top desc,sell_num asc';//销量
		else if ( $request[ 'sell_sort' ]==21 ) $sort = 'is_search_top desc,sell_num desc';//销量
		else if ( $request[ 'store_sort' ] == 12 ) $sort = 'is_search_top desc,ep.store asc';//库存
		else if ( $request[ 'store_sort' ] == 21 ) $sort = 'is_search_top desc,ep.store desc';//库存
		else if ( $request[ 'price' ] == 12 ) $sort = 'is_search_top desc,unit_price asc';//价格
		else if ( $request[ 'price' ] == 21 ) $sort = 'is_search_top desc,unit_price desc';//价格
		
		$page=$request['page']?$request['page']:1;
		$pageSize=$request['pageSize']?$request['pageSize']:C('PAGE_PAGESIZE');
		
		$product_count=D('product')->productAttrCount($where);//搜索导航栏统计
		$this->assign('product_count',$product_count['data']);
		
		$whereId_where=["p.is_online"=>1];
		if($where)$whereId_where=[$where,$whereId_where];
		$totalRows=M('product')->alias('p')->where($whereId_where)->count();
		
		//头条推荐
		$searchTop_where=$whereId_where;
		$searchTop_where['p.is_search_top']=1;
		$searchTop_where['p.search_top']=['neq',''];
		$searchTop=M('product')->field('p_sign,search_top')->alias('p')->where($searchTop_where)->select();
		$searchTopData=[];
		if($searchTop){
			foreach($searchTop as $k=>$v){
				if($v['search_top']){
					if(!in_array($v['search_top'],$searchTopData['search_top']))
						$searchTopData['search_top'][]=$v['search_top'];
				}else{
					$searchTopData['p_sign'][]=$v['p_sign'];
				}
			}
		}
		$this->assign('searchTopData',$searchTopData);
		
		if($request[ 'price' ]){//价格排序
			$whereId=M('product')->alias('p')->field('p.id,pp.line,pp.unit_price')
				->join('(select p_id,unit_price,line from (select max(line) as line,p_id,unit_price from dx_product_price group by p_id) as pp_) as pp on pp.p_id=p.id')
				->where($whereId_where)->order($sort)
				->limit(($page-1)*$pageSize,$pageSize)->select();
			
		}else if($request['store_sort']){//库存排序
			$whereId=M('product')->alias('p')->field('p.id,ep.store')
				->join('left join erp_product as ep on ep.fitemno=p.fitemno')
				->where($whereId_where)->order($sort)
				->limit(($page-1)*$pageSize,$pageSize)->select();
		}
		
		if($request['price']||$request['store_sort']){
			$whereId_index=[];
			if($whereId){
				foreach($whereId as $k=>$v){
					$whereId_index[]=$v['id'];
				}
				$where=['id'=>['in',$whereId_index]];
			}else{
				$where=['id'=>0];
			}
			$page=0;
		}
		
		$sort=$request[ 'sell_sort' ]?$sort:'is_search_top desc';
		$list=$this->productList($where,$page,$pageSize,true,$sort);
		
		if($list['error']==0){
			if(!session('adminId')){//只有管理员可以搜索erp型号
				$this->searchHistory->saveSearch($request,$list['data']['list']);//保存搜索历史
			}
			$price_arr=$store_arr=[];
			foreach($list['data']['list'] as $k=>$v){
				$price_arr[]=(float)$v['price'];
				$store_arr[]=(int)$v['store'];
			}
			if($request['price']){
				$is_sort=((int)$request[ 'price' ] === 12)?SORT_ASC:SORT_DESC;
				array_multisort($price_arr,$is_sort,$list['data']['list']);
			}else if($request['store_sort']){
				$is_sort=((int)$request[ 'store_sort' ] === 12)?SORT_ASC:SORT_DESC;
				array_multisort($store_arr,$is_sort,$list['data']['list']);
			}
			$adminList=M('user','sys_')->field('nickname,qq,wechat,mobile,product_category')->where(['is_customer_service'=>1])->select();
			foreach($list['data']['list'] as $k=>$v){//客服服务的产品的类
				foreach($adminList as $k2=>$v2){
					if(strpos($v2['product_category'],",$v[cate_id],")!==false){
						$list['data']['list'][$k]['customer_service'][]=$v2;
					}
				}
			}
		}
		
		if(IS_AJAX) return $list;
		
		$request['pageSize']=$pageSize;
		$this->assign( 'request', $request );
		$this->assign( 'search_data', $list['data']['list'] );// 赋值数据集
		$Page = new \Think\Page( $totalRows, $pageSize );// 实例化分页类 传入总记录数和每页显示的记录数
		$Page->setConfig( 'prev', '<上一页' );
		$Page->setConfig( 'next', '下一页>' );
		if($totalRows>$pageSize)$show = $Page->show();// 分页显示输出
		$this->assign( 'page', $show );// 赋值分页输出
		$this->assign( 'count',$totalRows );// 总记录数
		$this->assign( 'p_num', ceil( $totalRows / $pageSize ) );// 总记录数
		$this->display();
	}
	
	/*
	 *  分类的所有子类
	 */
	public function all_son_category( $cate_id = 1 )
	{
		$category = D( 'category' )->where( [ 'id' => $cate_id ] )->find();
		$lft = $category[ 'lft' ];
		$rht = $category[ 'rht' ];
		$all_son_category = D( 'category' )->where( [ 'usable' => 1, [ 'lft' => [ 'between', [ $lft, $rht ] ] ], [ 'rht' => [ 'between', [ $lft, $rht ] ] ] ] )->select();
		
		return $all_son_category;
	}
	
	/*
	 *  分类的最底层子类
	 */
	public function bottomLevelCategory( $cate_id = 1 )
	{
		$all_son_category = $this->all_son_category( $cate_id );
		$level_last = [];
		foreach ( $all_son_category as $k => $v ) {
			if ( ( $v[ 'lft' ] + 1 ) == $v[ 'rht' ] ) {//最底层分类
				$level_last[] = $v[ 'id' ];
			}
		}
		
		return $level_last;
	}
	
	/*
	 *
	 *  根据pid得产品数据
	 * @return array
	 */
	public function productBaseData( $field_pid )
	{
		$pid_str = '';
		foreach ( $field_pid as $k => $v ) {
			$pid_str .= $v[ 'id' ] . ',';
		}
		$pid_str = substr( $pid_str, 0, -1 );
		$product_list = [];
		if ( $field_pid ) {
			//产品结果列表
			$product = D( 'product' );
			$product_list = $product->field( 'dx_product.*,dx_product_detail.img,dx_product_detail.pdf,dx_brand.brand_name,dx_product_detail.describe' )->join( 'left join dx_product_detail on dx_product_detail.p_id=dx_product.id' )->join( 'left join dx_brand on dx_brand.id=dx_product.brand_id' )->where( "dx_product.id in (" . $pid_str . ")" )->select();
			$order=new OrderController();
			$product_result = [];
			foreach ( $product_list as $k => $v ) {
				$v[ 'price_section' ] = $order->productSectionNumPrice($v['id']);
				$v[ 'price_sort' ] = $v[ 'price' ];
				$categoryParentPath = $this->categoryParentPath( $v[ 'cate_id' ] );
				$v[ 'cate_name_level1' ] = $categoryParentPath;
				$product_result[ $k ] = $v;
			}
		}
		return $product_result;
	}
	
	/*
	 *
	 *  取出上一级父类名称
	 * @return array
	 */
	public function categoryParentPath( $id )
	{
		$category = D( 'category' )->where( ['id'=>$id] )->find();
		$lft_category=D( 'category' )->where( ['lft'=>['lt',$category['lft']],'rht'=>['gt',$category['rht']]] )->order('lft asc')->select();
		$upper_lever=$lft_category['1'];
		return $upper_lever[ 'cate_name' ];
	}
	
	/*
	 *
	 *  取出所有分类
	 * @return array
	 */
	public function categoryList()
	{
		if ( $this->category_list ) return $this->category_list;
		$result = [];
		$category = D( 'category' );
		$category_list = $category->select();
		foreach ( $category_list as $k => $v ) {
			$result[ $v[ 'id' ] ] = $v;
		}
		$this->category_list = $result;
		
		return $result;
	}
	
	/*
	 *
	 *  取出所有品牌
	 * @return array
	 */
	public function brandList()
	{
		if ( $this->brand_list ) return $this->brand_list;
		$result = [];
		$brand = D( 'brand' );
		$brand_list = $brand->select();
		foreach ( $brand_list as $k => $v ) {
			$result[ $v[ 'id' ] ] = $v;
		}
		$this->brand_list = $result;
		
		return $result;
	}
	
	/*
	 *
	 *  搜索引擎,返回搜索内容
	 * @return array
	 */
	public function xunsearchOut( $query, $searchDb = 'product' )
	{
		$xs = new \XS( $searchDb ); // 建立 XS 对象，项目名称为：demo
		$search = $xs->search; // 获取 搜索对象
		$search->setQuery( $query ); // 设置搜索语句
		$docs = $search->search(); // 执行搜索，将搜索结果文档保存在 $docs 数组中
		$count = $search->count(); // 获取搜索结果的匹配总数估算值
		
		return [ 'data' => $docs, 'count' => $count ];
	}
	
	
	public function curl__( $url )
	{
		//初始化
		$ch = curl_init();
		curl_setopt( $ch, CURLOPT_URL, $url );
		curl_setopt( $ch, CURLOPT_RETURNTRANSFER, 1 );
		curl_setopt( $ch, CURLOPT_HEADER, 0 );
		//执行并获取HTML文档内容
		$output = curl_exec( $ch );
		//释放curl句柄
		curl_close( $ch );
		
		return $output;
	}
	
	
	/*
	 * 用户商品详情页 - 分享
	 *
	 */
	public function share()
	{
		$type = strtolower( I( 'type' ) );
		if ( empty( $type ) ) {
			return false;
			exit();
		}
		$class = $type . 'Share';
		//获取当前登录用户open信息
		if ( !is_login() ) redirect( U( 'Home/Account/login' ) );
		$openInfo = session( 'userInfo.open' );
		//当前分享方式的openid
		$open_id = $openInfo[ $type ][ 'open_id' ];
		$status = $openInfo[ $type ][ 'status' ];
		if ( $status != 0 ) {
			$this->error( '当前系统端口已关闭!请稍后再试', U( 'Home/Default/index' ) );
		}
		//执行分享方法
		$this->$class();
	}
	
	/*
	 * 新浪微博分享
	 *
	 */
	protected function sinaShare()
	{
		$open = S( $this->ssid . 'open' );
		$token = $open[ 'sina' ];
		//若不存在token
		if ( empty( $token ) ) {
			//TODO  跳转新浪微博账号绑定
			if ( IS_AJAX ) {
				$this->ajaxReturnStatus( 1002, '您的新浪账号未绑定' );
			} else {
				return [];
			}
		}
		$status = I( 'status' );
		if ( mb_strlen( I( 'status' ) ) > 140 ) {
			$this->error( '分享文字不能超过140个字符', '', 3 );
		}
		$url = I( 'url' );
		$img = SITE_PATH . ltrim( I( 'pic' ), '/' );
		$aKey = C( 'THINK_SDK_SINA.APP_KEY' );
		$sKey = C( 'THINK_SDK_SINA.APP_SECRET' );
		$access_token = $token[ 'access_token' ];
		$c = new sinaClient( $aKey, $sKey, $access_token );
		$data = $c->share( $status . $url, $img );
		if ( $data[ 'id' ] != 0 && $data[ 'mid' ] == $data[ 'idstr' ] ) {
			if ( IS_AJAX ) {
				$this->ajaxReturnStatus( 1001, '分享成功' );
			} else {
				return true;
			}
		} else {
			if ( IS_AJAX ) {
				$this->ajaxReturnStatus( 1002, '分享失败' );
			} else {
				return false;
			}
		}
	}
	
	
	/*
	 * 腾讯微博分享
	 *
	 */
	protected function tencentShare()
	{
		$open = S( $this->ssid . 'open' );
		$token = $open[ 'qq' ];
		$qq = ThinkOauth::getInstance( 'qq', $token );
		$param[ 'content' ] = I( 'status' ) . I( 'url' );
		$param[ 'pic' ] = '@' . SITE_PATH . ltrim( I( 'pic' ), '/' );
		$data = $qq->call( 't/add_pic_t', $param, 'POST', true );
		if ( $data[ 'ret' ] == 0 && $data[ 'msg' ] == 'ok' ) {
			if ( IS_AJAX ) {
				$this->ajaxReturnStatus( 1001, '分享成功' );
			} else {
				return true;
			}
		} else {
			if ( IS_AJAX ) {
				$this->ajaxReturnStatus( 1002, '分享失败' . $data[ 'msg' ] );
			} else {
				return false;
			}
		}
	}
	
	/*
	 * 添加商品到收藏夹
	 */
	public function addCollect()
	{
		//添加到收藏夹的商品id
		$id = I( 'p_id' );
		empty( $id ) && $this->ajaxReturnStatus( 1001, '数据id不能为空' );
		$more = false;
		$max = 50; //收藏夹最大数
		$user_id = session( 'userId' );
		if ( is_array( $id ) ) {
			$more = true;
		}
		$collDB = M( 'user_collect' );
		$data = $collDB->field( 'collect' )->where( [ 'user_id' => $user_id ] )->find();
		//数据不存在
		if ( empty( $data ) ) {
			$add[ 'user_id' ] = $user_id;
			if( $more ){
				$add[ 'collect' ] = json_encode( $id );
			}else{
				$data[] = $id;
				$add[ 'collect' ] = json_encode($data);
			}
			
			$re = $collDB->add( $add );
			if ( $re ) {
				$this->ajaxReturnStatus( 0000, '添加到收藏夹成功' );
			} else {
				$this->ajaxReturnStatus( 1002, '添加到收藏夹失败' );
			}
		} else {
			//多个
			if ( $more ) {
				$num = count( $id );
				$n = 0;
				$collect = json_decode( $data[ 'collect' ] );
				foreach ( $id as $k => $item ) {
					
					$count = count( $collect );
					//数量超过 那么弹出最后一个商品id;
					if ( $count >= $max ) {
						array_pop( $collect );
					}
					//dump($item);
					//如果已存在该商品 那么将这个商品调整排列第一位
					$key = array_search( $item, $collect );
					if ( $key >= 0 && $key !== false ) {
						unset( $collect[ $key ] );
					}
					//dump($collect);
					//入栈
					array_unshift( $collect, $item );
					$n++;
				}
				$save = json_encode( $collect );
				$collDB->startTrans();
				$re = $collDB->where( [ 'user_id' => $user_id ] )->save( [ 'collect' => $save ] );
				if ( $n == $num ) {
					$collDB->commit();
					$this->ajaxReturnStatus( 0000, '添加到收藏夹成功' );
				} else {
					$collDB->rollback();
					$this->ajaxReturnStatus( 1003, '添加到收藏夹失败' );
				}
			} else {
				$collect = json_decode( $data[ 'collect' ],true );
				$count = count( $collect );
				//数量超过 那么弹出最后一个商品id;
				if ( $count > $max ) {
					array_pop( $collect );
				}
				//dump($collect);
				//如果已存在该商品 那么将这个商品调整系列第一位
				$key = array_search( $id, $collect );
				if ( $key >= 0 && $key !== false ) {
					unset( $collect[ $key ] );
				}
				//入栈
				array_unshift( $collect, $id );
				$save = json_encode( $collect );
				$re = $collDB->where( [ 'user_id' => $user_id ] )->save( [ 'collect' => $save ] );
				if ( $re !== false ) {
					$this->ajaxReturnStatus( 0000, '添加到收藏夹成功' );
				} else {
					$this->ajaxReturnStatus( 1004, '添加到收藏夹失败' );
				}
			}
		}
	}
	
	
	/*
	 * 根据cate_id 获取分类名称
	 *
	 */
	public function ajaxGetCategoryName()
	{
		$id = I('cate_id');
		empty($id) && $this->ajaxReturnStatus(1001,'id错误');
		$res = M('category')->field('cate_name')->where(['id'=>$id])->find();
		$this->ajaxReturnStatus(0,$res['cate_name']);
	}
	
	
	/*
	 *
	 * 记录用户搜索关键词
	 *
	 */
	public function addUserSearchWordsLog($words='')
	{
		if( empty($words) ) return true;
		$user_id = session('userId')?session('userId'):0;
		$user_name = session('userInfo.user_name')?session('userInfo.user_name'):'游客';
		$time = date('Y-m-d H:i:s', time());
		$str = '##'.$time."||".$user_id."||".$user_name."||".$words.PHP_EOL;
		$logDir = MYLOG_PATH.'UserSearch/';
		if( !file_exists($logDir) ) mkdir( $logDir, 0755, true );
		$logNum = file_get_contents($logDir.'UserSearchLog.txt');
		if( !$logNum ){
			$logNum = 1;
		}
		//当前日志文件名
		$logFileName = $logDir.'log'. sprintf( '%08s', $logNum).'.txt';
		//若文件超过1M 那么就新建文件记录
		if( filesize($logFileName) >= 1048567 ){
			$logNum +=1;
			$logFileName = $logDir.'log'. sprintf( '%08s', $logNum).'.txt';
		}
		file_put_contents($logFileName,$str,FILE_APPEND);
	}
	
	/**
	 * @desc 议价的报备信息添加
	 */
	public function productReport(){
		if(IS_AJAX){
			$request=I('post.');
			$result=D('product')->productReport($request);
			if( $result['error'] === 0 ){
				MsgController::writeMsgToUserSale( session('userId'), '有新报备信息!', '报备id:'.$result['data'] );
				unset( $result['data'] );
			}
			die(json_encode($result));
		}
		$get=I('get.');
		$where=[];
		if(isset($get['p_id'])&&$get['p_id']) $where['id']=$get['p_id'];
		$list=$this->productList($where);
		if($list['error']==0){
			$adminList=M('user','sys_')->field('nickname,qq,wechat,mobile,product_category')->where(['is_customer_service'=>1])->select();
			foreach($list['data']['list'] as $k=>$v){//客服服务的产品的类
				foreach($adminList as $k2=>$v2){
					if(strpos($v2['product_category'],",$v[cate_id],")!==false){
						$list['data']['list'][$k]['customer_service'][]=$v2;
					}
				}
			}
		}
		
		$this->assign('product',$list['data']['list'][0]);
		$this->display();
	}
	/**
	 * @desc banner详情
	 */
	public function bannerDetail(){
		
		$get=I('get.');
		$textInfo=M("advert_text")->where(['id'=>$get['banner']])->find();
		$textInfo['text']=htmlspecialchars_decode($textInfo['text']);
		$texts=M("advert_text")->field("text_titile,update_time")->where("status=1")->order("sort desc")->select();
		$this->assign('textInfo',$textInfo);
		$this->assign('texts',$texts);
		$this->display('Default/bannerDetail');
	}
	//测试
    public function bannerDetail_text(){

        $get=I('get.');
        $textInfo=M("advert_text")->where(['id'=>$get['banner']])->find();
        $textInfo['text']=htmlspecialchars_decode($textInfo['text']);
        $texts=M("advert_text")->field("text_titile,update_time")->where("status=1")->order("sort desc")->select();
        $this->assign('textInfo',$textInfo);
        $this->assign('texts',$texts);
        $this->display('Default/bannerDetail_text');
    }
	
	
	
	
	
	
	
	
}
