<?php

// +----------------------------------------------------------------------
// | FileName:   HomeController.class.php
// +----------------------------------------------------------------------
// | Dscription:   前台基类控制器
// +----------------------------------------------------------------------
// | Date:  2017/7/31 13:32
// +----------------------------------------------------------------------
// | Author: showkw <showkw@163.com>
// +----------------------------------------------------------------------

namespace  Home\Controller;

use EES\System\Redis;
use Home\Controller\HomeController;
use THink\Controller;
use Home\Controller\ProductController;

class BomController extends HomeController
{
    //public $basket_id;

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public $comleteNum=0;
    public $blurNum=0;
    public $replaceNum=0;
    public $noNUM=0;
    public  function bomQuery(){
        $request=I('post.');
       // array_splice($request['data'],10);

//	    $request=[
//	        'package'=>[[['value'=>'PSOP8'],['value'=>'PSOP8']],[['value'=>'PSOP8'],['value'=>'PSOP8']]],
//            'brand_name'=>[[['value'=>'明智类比'],['value'=>'明智类比']],[['value'=>'明智类比'],['value'=>'明智类比']]],
//            'cate_name'=>[[['value'=>'DC-DC'],['value'=>'DC-DC']],[['value'=>'DC-DC'],['value'=>'DC-DC']]],
//            'p_sign'=>[[['value'=>'IA0150HV'],['value'=>'IA0150HV']],[['value'=>'IA0150HV'],['value'=>'IA0150HV']]],
//
//        ];
        $bomList=$this->mergeCondition($request);
        $num=['blurNum'=>$this->blurNum,'comleteNum'=>$this->comleteNum,'replaceNum'=>$this->replaceNum,'noNum'=>$this->noNUM];
        die(json_encode(['error'=>0,'msg'=>'success','data'=>['bom'=>$bomList,'num'=>$num]]));

    }
    protected function mergeCondition($request){
        $bomMany=[];
        $res=M("category")->field("id,cate_name")->where(["usable"=>1])->select();
        foreach ($request['data'] as $requestKey=>$value){
            $where=[];
            $cate=[];
            $brand=[];
            $replaceWhere=[];
            if(isset($value['package'])&&$value['package']){
                foreach ($value['package'] as $v_package){
                    if(isset($v_package['value'])&& $v_package['value']){
                        $where['package'][]=['LIKE',"%$v_package[value]%"];
                    }
                }
                if(count($where['package'])>1){
                    $where['package'][]='OR';
                }
            }
            if(isset($value['p_sign'])&&$value['p_sign']){
                foreach ($value['p_sign'] as $v_sign){
                    if(isset($v_sign['value'])&& $v_sign['value']){
                        $where['p_sign'][]=['LIKE',"%$v_sign[value]%"];
                        $replaceWhere['fitemno_access'][]=[ 'like',"%{}$v_sign[value]%"];
                    }
                }
                if(count($where['p_sign'])>1){
                    $where['p_sign'][]='OR';
                    $replaceWhere['fitemno_access'][]='OR';
                }
            }
            if(isset($value['cate'])&&$value['cate']) {
                foreach ($value['cate'] as $v_cate) {
                    if (isset($v_cate['value']) && $v_cate['value']) {
                        $cate['cate_name'][] = ['LIKE', "%$v_cate[value]%"];
                    }
                }
            }
            if(isset($value['brand'])&&$value['brand']) {
                foreach ($value['brand'] as $v_brand){
                    if(isset($v_brand['value'])&& $v_brand['value']){
                        $brand['brand_name'][]=['LIKE',"%$v_brand[value]%"];
                    }
                }
            }
            $bomOne=$this->queryCondition($where,$cate,$brand,$replaceWhere,$value['p_sign'],$res);
            if($bomOne){
                $bomMany[$requestKey]= $bomOne;
            }
        }
//               if(isset($request['package'])&&$request['package']){
//                   foreach ($request['package'] as $key=>$item){
//                       $where=[];
//                       $cate=[];
//                       $brand=[];
//                       foreach ($item as $v){
//                           if(isset($v)&& $v){
//                               $where['package'][]=['LIKE',"%$v[value]%"];
//                           }
//                       }
//
//                       if(isset($request['p_sign'][$key])&&$request['p_sign'][$key]){
//                           foreach ($request['p_sign'][$key] as $v_sign){
//                               if(isset($v_sign)&& $v_sign){
//                                   $where['p_sign'][]=['LIKE',"%$v_sign[value]%"];
//                               }
//                           }
//                       }
//
//                       if(isset($request['cate_name'][$key])&&$request['cate_name'][$key]){
//                           foreach ($request['cate_name'][$key] as $v_cate){
//                               if(isset($v_cate)&& $v_cate){
//                                   $cate['cate_name'][]=['LIKE',"%$v_cate[value]%"];
//                               }
//                           }
//                       }
//                       if(isset($request['brand_name'][$key])&&$request['brand_name'][$key]){
//                           foreach ($request['brand_name'][$key] as $v_brand){
//                               if(isset($v_brand)&& $v_brand){
//                                   $brand['brand_name'][]=['LIKE',"%$v_brand[value]%"];
//                               }
//                           }
//                       }
//                       $bomOne=$this->queryCondition($where,$cate,$brand);
//                       if($bomOne){
//                           $bomMany[$key]= $bomOne;
//                       }
//                   }
//               }
        return $bomMany;

    }

    protected  function queryCondition($where,$cate,$brand,$replaceWhere,$p_sign,$res){
        if(isset($cate['cate_name'])&&count($cate['cate_name'])>1){
            $cate['cate_name'][]='OR';
        }
        $whereR="";
        if(isset($cate['cate_name'])&&$cate['cate_name']){
            $cateArr=M('category')->field('id')->where($cate)->select();
            if($cateArr){
                $caId=array_column($cateArr,'id');
                $request['cate_id']=implode(',',$caId);
                $where[]=[
                    'cate_id in (select id from dx_category left join (select * from (select lft as lft2,rht as rht2 from dx_category where id IN ('.$request['cate_id'].')) as lef_rht) as lef_rht2 on 1=1 where dx_category.lft>=lef_rht2.lft2 and dx_category.rht<=lef_rht2.rht2)',
                ];
                $whereR= 'cate_id in (select id from dx_category left join (select * from (select lft as lft2,rht as rht2 from dx_category where id IN ('.$request['cate_id'].')) as lef_rht) as lef_rht2 on 1=1 where dx_category.lft>=lef_rht2.lft2 and dx_category.rht<=lef_rht2.rht2)' ;
            }else{

                $c_id=[];
                foreach ($res as $vv){
                    foreach ($cate["cate_name"] as $av){
                        if($av !="OR"){
                            similar_text($av,$vv['cate_name'],$percent);
                            if($percent>30){
                                $c_id[]=$vv['id'];
                                continue;
                            }
                        }
                    }
                }
                if($c_id){
                    $where[]=[
                        'cate_id in IN ('.$c_id.')'
                    ];
                    $whereR= 'cate_id in IN ('.$c_id.')' ;

                }

            }
        }
        if(isset($cate['brand_name'])&&count($brand['brand_name'])>1){
            $brand['brand_name'][]='OR';
        }
        if(isset($brand['brand_name'])&&$brand['brand_name']){
            $brandArr=M('brand')->field('id')->where($brand)->select();
            $brId=array_column($brandArr,'id');
            if($brId){
                $where['brand_id']=['IN',$brId];
            }

        }
        $andWhere=$where;
        if(count($where)>1){
            $where['_logic']='OR';
        }

        return $this->productBomlist($where,$andWhere,$replaceWhere,$p_sign,$whereR);
    }

    protected  function productBomlist($where,$andWhere,$replaceWhere,$p_sign,$whereR){
        $field="id,p_sign,min,min_open,parameter,package,show_site,is_tax,tax,discount_num,cate_id,brand_id,fitemno";
        $product=D('Small/product');
        $blurOne=[];
        $completeOne=[];
        if($where){
            $where1[]=$where;
            $where1['is_online']=1;

            //$blurOne=$product->alias('p')->join(" dx_category as dc on dc.id=p.cate_id")->join("dx_brand as db on db.id=p.brand_id")->join("(dx_product_price as dpp on dpp.p_id=p.id) as product_price")->join(" erp_product as ep on ep.ftem=p.fitemno")->where($where1)->field($field)->select();
//            foreach ($blurOne as &$bone){
//                $bone['product_price']=M("product_price")->field("line,lft_num,right_num,unit_price")->where(['p_id'=>$bone['id']])->select();
//            }
            if($whereR){
                $productBlur=$product->where($where1)->field($field)->having($whereR);
            }else{
                $productBlur=$product->where($where1)->field($field);
            }
            $productBlur=$productBlur->bomList($where1)->relation(true);
            $blurOne=$productBlur->select();

            $static_id=80;
     //     if(!$blurOne){
             if($whereR&&!$blurOne){

             }else{
                 if($blurOne){
                     $productList=$blurOne;
                 }else{
                     $redis=Redis::getInstance();
                     $productList=$redis->hGetAll('shop_product');
                 }
                 if($p_sign){
                     if($blurOne){
                         $pid_arr=$this->levensh($productList,$p_sign,$static_id,20,1);
                     }else{
                         $pid_arr=$this->levensh($productList,$p_sign,$static_id,20);
                     }

                     if($pid_arr){
                         array_multisort(array_column($pid_arr,'percent'),SORT_DESC,$pid_arr);

                         $blurOne=array_column($pid_arr,'list');

//                        print_r($blurOne);
                         // array_splice($blurOne,30);


//                        print_r($pid_arr)
                         //$blurOne=$product->alias('p')->join("dx_category as dc on dc.id=p.cate_id")->join("dx_brand as db on db.id=p.brand_id")->join("(dx_product_price as dpp on dpp.p_id=p.id) as product_price")->join(" erp_product as ep on ep.ftem=p.fitemno")->where(['p.id'=>['IN',$pid_arr]])->field($field)->select();
//                        foreach ($blurOne as &$bone){
//                            $bone['product_price']=M("product_price")->field("line,lft_num,right_num,unit_price")->where(['p_id'=>$bone['id']])->select();
//                        }
                         //echo M()->getLastSql();die();
                         // print_r($pid_arr);die();
//                                            $productBlur=$product->where(['id'=>['IN',$pid_arr]])->field($field)->limit(30);
//                                            $productBlur=$productBlur->bomList(['id'=>['IN',$pid_arr]])->relation(true);
//                                            $blurOne=$productBlur->select();
//                                            foreach ($blurOne as $value){
//                                                $arr_key=array_keys($pid_arr,$value['id'],false);
//                                                $blurOne1[$arr_key[0]]=$value;
//                                            }
//                                            ksort($blurOne1);
//                                            $blurOne=$blurOne1;
                         //   print_r($blurOne);die();
                     }else{
                         $blurOne=[];
                     }
                 }
//                foreach ($productList as $k=>$v){
//                    foreach ($p_sign as $p_k=>$p_v){
//                        if(levenshtein($p_v,$v)<$static_id){//8-11
//                                $pid_arr[]=$k;
//                        }
//                    }
//                }
                 //        }
             }



            if($blurOne){
                $this->blurNum+=1;
            }
        }
        if($andWhere){
            $andWhere['is_online']=1;

            // $completeOne=$product->alias('p')->join("dx_category as dc on dc.id=p.cate_id")->join("dx_brand as db on db.id=p.brand_id")->join("(dx_product_price as dpp on dpp.p_id=p.id) as product_price")->join(" erp_product as ep on ep.ftem=p.fitemno")->where($andWhere)->field($field)->select();
//            foreach ($completeOne as &$cone){
//                $cone['product_price']=M("product_price")->field("line,lft_num,right_num,unit_price")->where(['p_id'=>$cone['id']])->select();
//            }
            $productComplete=$product->where($andWhere)->field($field);;
            $productComplete=$productComplete->bomList($andWhere)->relation(true);
            $completeOne=$productComplete->select();
            if($completeOne){
                $this->comleteNum+=1;
            }
        }

//        $where1[]=$where;
//        $where1['is_online']=1;
//        $productBlur=$product->where($where1);
//        $productBlur=$productBlur->backetGoods($where1)->relation(true);
//        $blurOne=$productBlur->select();
//        if($blurOne){
//            $this->blurNum+=1;
//        }
//        $andWhere['is_online']=1;
//        $productComplete=$product->where($andWhere);
//        $productComplete=$productComplete->backetGoods($andWhere)->relation(true);
//        $completeOne=$productComplete->select();
//        if($completeOne){
//            $this->comleteNum+=1;
//        }
        $replaceOne=[];
        if(isset($replaceWhere['fitemno_access'])&&$replaceWhere['fitemno_access']){
            $replaceWhere1[]=$replaceWhere;
            $replaceWhere1['is_online']=1;

            //$replaceOne=$product->alias('p')->join("dx_category as dc on dc.id=p.cate_id")->join("dx_brand as db on db.id=p.brand_id")->join("(dx_product_price as dpp on dpp.p_id=p.id) as product_price")->join(" erp_product as ep on ep.ftem=p.fitemno")->where($andWhere)->field($field)->select();
//            foreach ($replaceOne as &$rOne){
//                $rOne['product_price']=M("product_price")->field("line,lft_num,right_num,unit_price")->where(['p_id'=>$rOne['id']])->select();
//            }
            $productReplace=$product->where($replaceWhere1)->field($field);;
            $productReplace=$productReplace->bomList($replaceWhere1)->relation(true);
            $replaceOne=$productReplace->select();
            if($replaceOne){
                $this->replaceNum+=1;
            }
        }
        if($blurOne&&$completeOne&&$replaceOne){
            $this->noNUM+=1;
        }
        return ['blur'=>$blurOne?$blurOne:[],'complete'=>$completeOne?$completeOne:[],'replace'=>$replaceOne?$replaceOne:[]];
    }
    /*
     * 购物车条目
     */
    public function basketDetail($is_return=0){
        $request=I('get.');
        $pageSize= $request['pageSize']?$request['pageSize']:C('PAGE_PAGESIZE');
        if( !isset( $request['pageSize'] ) ){
            $request['pageSize'] = $pageSize;
        }
        $user_id=session('userId')?session('userId'):'';//是否有user_id为判断是否登录

        if($user_id) $basket_id=$this->loginBasketId($user_id);//本次购物车id
        else $basket_id=$this->notLoginBasketId();//未登录购物车id

        if(session('userId')){//购物车商品是否可按样品结算更新
            $parentId=0;
            if(session('userType')==20){
                $parent=M('user_son')->where(['user_id'=>$user_id])->find();
                $parentId=$parent['p_id'];
            }

            $where_detail=[
                'dbd.basket_id'=>$basket_id,
                'dbd.status'=>['in',[0,1]],
                'dupe.max_num>=dbd.num',
                'dupe.step'=>['gt',0],
                'dupe.uid'=>$parentId?:$user_id,
            ];
            $sampleId_arr=$sampleId_sample=[];
            $sampleId_result=$sampleId_result2=$sampleId_result3=$sampleId_result4='';
            M('basket_detail')->startTrans();

            $sampleId2=M('basket_detail_sample')->field('dbd.pid')->alias('dbd')->join('left join dx_user_product_example as dupe on dbd.pid=dupe.pid')->where($where_detail)->select();
            $sampleId2_arr=$sampleId2_sample=[];
            if(!$sampleId2){
                $basket_detail_sample=M('basket_detail_sample')->where(['basket_id'=>$basket_id])->select();
                if($basket_detail_sample){
                    foreach($basket_detail_sample as $k=>&$v){
                        unset($v['id']);
                    }
                    $sampleId_result3=M('basket_detail')->field('basket_id,type,pid,num')->addAll($basket_detail_sample);
                }
                $sampleId_result4=M('basket_detail_sample')->where(['basket_id'=>$basket_id])->delete();
            }else{
                foreach($sampleId2 as $k=>$v){
                    $sampleId2_arr[]=$v['pid'];
                    $sampleId2_sample[]=[
                        'basket_id'=>$basket_id,
                        'pid'=>$v['pid'],
                        'num'=>$v['num'],
                        'type'=>1,
                    ];
                }
                $sampleId_result3=M('basket_detail_sample')->where(['basket_id'=>$basket_id,'pid'=>['not in',$sampleId2_arr]])->delete();
                $sampleId_result4=M('basket_detail')->where(['pid'=>['not in',$sampleId_arr]])->addAll($sampleId_sample);
            }

            $sampleId=M('basket_detail')->field('dbd.pid,dbd.num')->alias('dbd')->join('left join dx_user_product_example as dupe on dbd.pid=dupe.pid')->where($where_detail)->select();
            if($sampleId){
                foreach($sampleId as $k=>$v){
                    $sampleId_arr[]=$v['pid'];
                    $sampleId_sample[]=[
                        'basket_id'=>$basket_id,
                        'pid'=>$v['pid'],
                        'num'=>$v['num'],
                        'type'=>1,
                    ];
                }
                $sampleId_result=M('basket_detail')->where(['basket_id'=>$basket_id,'pid'=>['in',$sampleId_arr]])->delete();
                $sampleId_result2=M('basket_detail_sample')->addAll($sampleId_sample);
            }
            if($sampleId_result===false||$sampleId_result2===false||$sampleId_result3===false||$sampleId_result4===false){
                M('basket_detail')->rollback();
            }else{
                M('basket_detail')->commit();
            }
        }

        $where=['basket_id'=>$basket_id,'status'=>['in',[0,1]]];

        $count = M('basket_detail')->where($where)->count();
        $count += M('basket_detail_sample')->where($where)->count();
        $Page = new \Think\Page($count, $pageSize);// 实例化分页类 传入总记录数和每页显示的记录

        $basket_detail_limit='';
        if(!IS_AJAX) $basket_detail_limit=$Page->firstRow . ',' . $Page->listRows;
        if($is_return) $basket_detail=D('basket_detail')->where($where)->order('update_at desc')->select();
        else $basket_detail=D('basket_detail')->where($where)->order('update_at desc')->limit($basket_detail_limit)->select();

        //样品
        $basket_detail_example=D('basket_detail_sample')->where($where)->order('update_at desc')->limit($basket_detail_limit)->select();
        $example_arr=[];
        if($basket_detail_example){
            foreach($basket_detail_example as $k=>$v){
                $example_arr[$v['pid']]=$v['num'];
            }
        }

        $field_pid=$basket_num=[];
        $basket_detail_time=[];
        $productId_arr=[];

        foreach($basket_detail as $k=>$v){
            $field_pid[$k]['id']=$v['pid'];
            $basket_num[$v['pid']]['num']=$v['num'];
            $basket_num[$v['pid']]['update_at']=$v['update_at'];
            $basket_detail_time[]=$productId_arr[]=$v['pid'];
        }

        foreach($basket_detail_example as $k=>$v){
            if(!in_array($v['pid'],$basket_detail_time)) $basket_detail_time[]=$productId_arr[]=$v['pid'];
        }

        $producResult=$this->productList(['id'=>['in',$productId_arr]]);
        if($producResult['error']!=0){//清空购物车
            $delete_result=M('basket_detail')->where(['basket_id'=>$basket_id])->delete();
            $delete_result_sample=M('basket_detail_sample')->where(['basket_id'=>$basket_id])->delete();
        }else{
            if($producResult['data']['count']['count']!=count($productId_arr)){//删除已删除产品id的购物车商品
                foreach($productId_arr as $k=>$v){
                    if(!M('product')->where(['id'=>$v])->find()){
                        M('basket_detail')->where(['basket_id'=>$basket_id,'pid'=>$v])->delete();
                    }
                }
            }
        }
        $product_list=($producResult['error']==0)?$producResult['data']['list']:'';

        $product_list_result=[];
        foreach($product_list as $k=>$v){
            $product_list[$k]['basket_num']=$basket_num[$v['id']]['num'];
            $product_list[$k]['update_at']=$basket_num[$v['id']]['update_at'];
            $product_list_result[$v['id']]=$product_list[$k];
        }
        $basket_detail=$pId_arr=[];
        foreach($basket_detail_time as $v){
            $basket_detail[]=$product_list_result[$v];
        }

        if(!$is_return){
            $show = $Page->show();// 分页显示输出
            if ($count <= $pageSize) $show=null;
            $this->assign('page',$show);
        }
        if(session('userId')){
            $list=$this->customerProductPrice(session('userId'),$basket_detail_time);
            foreach($basket_detail as $k=>$v){
                if($list['error']==0){
                    $basket_detail[$k]['bargainInfo']=$list['data']['list'][$v['id']];
                }
                $basket_detail[$k]['sample']=0;
                if((int)$v['basket_num']===0) unset($basket_detail[$k]);
                if(isset($example_arr[$v['id']])&&$example_arr[$v['id']]){
                    $one_example=$v;
                    $one_example['basket_num']=$example_arr[$v['id']];
                    $one_example['sample']=1;
                    $basket_detail[]=$one_example;
                }
            }
        }

        if(IS_AJAX){
            sort($basket_detail);
            die(json_encode($basket_detail));
        }

        if($is_return) return count($basket_detail);
        $this->assign('isLogin',$user_id?true:false);
        $this->assign('basket_detail',$basket_detail);
        $this->assign('request',$request);
        $this->display();
    }

    /*
     * 登录成功更新用户购物车
     */
    public function loginBasket($user_id=''){
        if(!$user_id) die('参数错误');

        $notLoginBasketId=$this->notLoginBasketId();//未登录notlogin_basket_id
        $loginBasketId=$this->loginBasketId($user_id);//用户前一次的basket_id

        $basket_detail=D('basket_detail');
        $where=['basket_id'=>['in',[$notLoginBasketId,$loginBasketId]]];
        $basket_items=$basket_detail->where($where)->select();
        $basket_items_change=[];
        foreach($basket_items as $k=>$v){
            $basket_items_change[$v['pid']]+=$v['num'];
        }
        try{
            D('basket_detail')->startTrans();
            $newBasketId=$this->newBasketId();
            if($user_basket=D('basket')->where(['user_id'=>$user_id])->find())//更新basket_id
                D('basket')->save(['id'=>$user_basket['id'],'user_id'=>$user_id,'basket_id'=>$newBasketId]);
            else D('basket')->add(['user_id'=>$user_id,'basket_id'=>$newBasketId]);
            //删除旧购物车
            $basket_detail_delete=D('basket_detail');
            $where_delete=$where;
            $basket_detail_delete->where($where_delete)->delete();
            //保存新购物车
            $basket_detail_addAll=[];
            foreach($basket_items_change as $pid=>$num){
                $basket_detail_addAll[]=['pid'=>$pid,'num'=>$num,'basket_id'=>$newBasketId];
            }
            $basket_detail_change=D('basket_detail');
            $basket_detail_change->addAll($basket_detail_addAll);
            M('basket_detail_sample')->where(['basket_id'=>$loginBasketId])->save(['basket_id'=>$newBasketId]);//样品购物车
            D('basket_detail')->commit();
            return 1;
        }catch(Exception $e){
            D('basket_detail')->rollback();
            return 0;
        }
    }

    /*
     * 购物车更新商品
     * 操作basket_detail
     *params=[ num----0为删除商品，其它为更新
     *			pid ]
     */
    public function basketAddProduct(){
        if(IS_AJAX){
            $data=I('post.');
            $user_id=session('userId')?session('userId'):'';//是否有user_id为判断是否登录

            if($user_id) $basket_id=$this->loginBasketId($user_id);//用户的basket_id
            else $basket_id=$this->notLoginBasketId();//未登录购物车id

            $whereExample=[
                'uid'=>$user_id,
                'pid'=>['in',$data['pid']],
            ];
            $productExample=D('product')->customerProductExampleList($whereExample);
            if ($data['num']>0 && $productExample['error'] === 0 && isset($productExample['data']['list'][$data['pid']]) &&(int)$productExample['data']['list'][$data['pid']]['step']>0 && (int)$productExample['data']['list'][$data['pid']]['max_num'] >= (int)$data['num']) {//按样品结算
                $sampleM=M('basket_detail_sample');
                $sampleM->startTrans();

                $sample_result1=$sampleM->where(['pid'=>$data['pid'],'basket_id'=>$basket_id])->delete();
                $sample_result2=$sampleM->add(['pid'=>$data['pid'],'basket_id'=>$basket_id,'type'=>1,'num'=>$data['num']]);
                $sample_result3=M('basket_detail')->where(['pid'=>$data['pid'],'basket_id'=>$basket_id])->delete();
                if($sample_result1===false||!$sample_result2||$sample_result3===false){
                    $sampleM->rollback();
                    $sample_return=['error'=>1,'msg'=>'样品添加失败'];
                }else{
                    $sampleM->commit();
                    $sample_return=['error'=>0,'msg'=>'success'];
                }
                die(json_encode($sample_return));
            }

            $num_is_add=isset($data['num_is_add'])?$data['num_is_add']:1;//购物车是添加数量还是更新数量

            $basket_detail=M('basket_detail');
            $basket_detail->basket_id=$basket_id;
            $basket_detail->pid=$data['pid'];
            if($data['num']){
                //查看购物车是否有这款商品
                $where=['basket_id'=>$basket_id,'pid'=>$data['pid']];
                $basket_item=M('basket_detail')->where($where)->find();
                $product=M('product')->where(['id'=>$data['pid']])->find();
                if($basket_item){//更新数量
                    $basket_detail->id=$basket_item['id'];
                    $num__=($num_is_add==1)?$data['num']+$basket_item['num']:$data['num'];
                    $basket_detail_data=[
                        'status'=>0,
                        'num'=>$num__,
                        'id'=>$basket_item['id'],
                        'p_num_detail'=>($num_is_add==1)?$basket_item['p_num_detail']."$data[num],":"$data[num],",
                    ];
                    if(($basket_detail->data($basket_detail_data)->save())!==false){
                        $return=['error'=>0,'msg'=>'更新成功'];
                    } else{
                        $return=['error'=>1,'msg'=>'更新失败'];
                    }
                }else{//新增商品
                    $basket_detail->num=$data['num'];
                    $basket_detail->p_num_detail="$data[num],";
                    if($basket_detail->add()) $return=['error'=>0,'msg'=>'添加成功'];
                    else $return=['error'=>1,'msg'=>'添加失败'];
                }
            }else{//删除商品
                if($data['pid']){
                    $goods_result=M('basket_detail')->where(['basket_id'=>$basket_id,'pid'=>['in',$data['pid']]])->delete();
                }
                if($data['sample_id']){
                    $sample_result=M('basket_detail_sample')->where(['pid'=>['in',$data['sample_id']],'basket_id'=>$basket_id,'type'=>1])->delete();
                }
                if($goods_result===false||$sample_result===false)$return=['error'=>1,'msg'=>'删除失败'];
                else $return=['error'=>0,'msg'=>'删除成功'];
            }
            die(json_encode($return));
        }
        $this->display();
    }

    /*
     * 清空购物车
     *params[delete=clearBasketDetail]
     */
    public function clearBasketDetail(){
        if(IS_AJAX && I('get.delete')=='clearBasketItems'){
            $user_id=session('userId')?session('userId'):'';//是否有user_id为判断是否登录

            if($user_id) $basket_id=$this->loginBasketId($user_id);//用户的basket_id
            else $basket_id=$this->notLoginBasketId();//未登录购物车id

            if(D('basket_detail')->where(['basket_id'=>$basket_id])->delete())
                $return=['error'=>0,'msg'=>'清除成功'];
            else $return=['error'=>1,'msg'=>'清除失败'];
            die(json_encode($return));
        }
    }

//	/*
//	 * 检查商品是否存在，库存是否充足
//	 */
//	public function fullProductNum($is_return='',$is_pid='',$is_num=''){
//		$data=I('get.');
//		$pid=$data['pid'];
//		$num=$data['num'];
//		if($is_return){
//			$pid=$is_pid;
//			$num=$is_num;
//		}
//		$where=['id'=>$pid];
//		$one_product=D('product')->where($where)->find();
//		if(!$one_product)die(json_encode(['error'=>1,'msg'=>'没有此商品']));
//		if($one_product['is_delivery']==1){
//			$return=['error'=>0,'msg'=>'有货期','data'=>$one_product];
//		} else if( $one_product['store']==0 ){
//			$return=['error'=>1,'msg'=>'库存为0且没有货期','data'=>$one_product];
//		}else if($is_num>$one_product['store']){
//			$return=['error'=>1,'msg'=>'库存不足且没有货期','data'=>$one_product];
//		}else{
//			$return=['error'=>0,'msg'=>'商品充足','data'=>$one_product];
//		}
//		if($is_return) return $return;
//		else die(json_encode($return));
//	}


    /*
     * 用户新basket_id
     */
    public function newBasketId($key='daxin'){
        return md5(session_id().uniqid().$key);
    }

    /*
     * 未登录notlogin_basket_id
     */
    public function notLoginBasketId(){
        $notlogin_basket_id = cookie('basket')?cookie('basket'):session_id();
        cookie('basket',$notlogin_basket_id,5184000);
        return $notlogin_basket_id;
    }

    /*
     * 用户的basket_id
     */
    public function loginBasketId($user_id=''){
        $loginBasketId='';
        $where=['user_id'=>$user_id];
        $basket=D('basket')->where($where)->find();
        if($basket){
            $loginBasketId=$basket['basket_id'];
        }else{
            $newBasketId=$this->newBasketId();
            D('basket')->data(['user_id'=>$user_id,'basket_id'=>$newBasketId])->add();
            $loginBasketId=$newBasketId;
        }
        return $loginBasketId;
    }

    /*
     * 再次购买，商品添加到购物车
     */
    public function againBuyBasket(){
        $get=I('get.');
        $goods=$get['goods'];
//		$goods=[['pid'=>2,'num'=>12],['pid'=>18013,'num'=>32]];
        $user_id=session('userId');
        $basket=D('basket')->where(['user_id'=>$user_id])->find();
        $pid_arr=$goods_pid=[];
        foreach($goods as $k=>$v){
            $pid_arr[]=$v['pid'];
            $goods_pid[$v['pid']]=$v['num'];
        }
        $basket_id=$basket['basket_id'];
        //取出购物车商品
        $where=['basket_id'=>$basket_id,['pid'=>['in',$pid_arr]]];
        $basket_detail=D('basket_detail')->where($where)->select();
        $basket_list=[];
        foreach($basket_detail as $k=>$v){
            $basket_list[$v['pid']]=$v;
        }
        $add_data=$update_data=[];
        $status=1;
        $error=['error'=>0,'msg'=>'操作成功'];
        foreach($goods as $k=>$v){
            if($basket_list[$v['pid']]){//update
                $update_data['status']=$status;
                $update_data['pid']=$v['pid'];
                $update_data['basket_id']=$basket_id;
                $update_data['num']=(int)$v['num']+(int)$basket_list[$v['pid']]['num']?:0;
                $result=D('basket_detail')->data($update_data)->where(['id'=>$basket_list[$v['pid']]['id']])->save();
                if(!$result) $error=['error'=>1,'msg'=>'操作失败'];
            }else{//insert
                $add_data['status']=$status;
                $add_data['pid']=$v['pid'];
                $add_data['basket_id']=$basket_id;
                $add_data['num']=(int)$v['num'];
                $result=D('basket_detail')->data($add_data)->add();
                if(!$result) $error=['error'=>1,'msg'=>'操作失败'];
            }
        }
        die(json_encode($error));
    }

    /**
     * 邮件发送  excel下载
     * @param [String] toMail   收件人地址
     * @param [Int] excel   下载excel   1
     * @param [array] data     发送数据
     * @return [json]  return     成功返回true，失败返回错误消息  {'error':0,'msg':'发送成功'} {'error':1,'msg':'发送失败'}
     */
    public  function sendUserMail(){
        !is_login() && die(json_encode(['error'=>300,'msg'=>'您未登录']));
        $post=json_decode(file_get_contents("php://input"),true)?:$_POST;
        $post=json_decode($post['data'],true);
        //$post['toMail']="2355607570@qq.com";
//        $post['data']=array(
//          0=>[
//              'p_sign'=>"需求型号",'brand'=>"需求品牌",'cate'=>"需求分类",'package'=>"需求封装",'p_num'=>"需求数量",
//              'list'=>[
//                  0=>[p_sign_list=>"匹配型号",brand_list=>"需求品牌",cate_list=>"匹配分类",package_list=>"匹配封装",p_num_list=>"推荐数量",min_open=>"是否可拆",min=>"最小包装",store=>"库存"],
//                  1=>[p_sign_list=>"匹配型号",brand_list=>"需求品牌",cate_list=>"匹配分类",package_list=>"匹配封装",p_num_list=>"推荐数量",min_open=>"是否可拆",min=>"最小包装",store=>"库存"]
//              ]
//          ],
//          1=>[
//              'p_sign'=>"需求型号",'brand'=>"需求品牌",'cate'=>"需求分类",'package'=>"需求封装",'p_num'=>"需求数量",
//              'list'=>[
//                  0=>[p_sign_list=>"匹配型号",brand_list=>"需求品牌",cate_list=>"匹配分类",package_list=>"匹配封装",p_num_list=>"推荐数量",min_open=>"是否可拆",min=>"最小包装",store=>"库存"],
//                  1=>[p_sign_list=>"匹配型号",brand_list=>"需求品牌",cate_list=>"匹配分类",package_list=>"匹配封装",p_num_list=>"推荐数量",min_open=>"是否可拆",min=>"最小包装",store=>"库存"]
//              ]
//          ],
//            2=>[
//                'p_sign'=>"需求型号",'brand'=>"需求品牌",'cate'=>"需求分类",'package'=>"需求封装",'p_num'=>"需求数量",
//                'list'=>[
//                    0=>[p_sign_list=>"匹配型号",brand_list=>"需求品牌",cate_list=>"匹配分类",package_list=>"匹配封装",p_num_list=>"推荐数量",min_open=>"是否可拆",min=>"最小包装",store=>"库存"],
//                    1=>[p_sign_list=>"匹配型号",brand_list=>"需求品牌",cate_list=>"匹配分类",package_list=>"匹配封装",p_num_list=>"推荐数量",min_open=>"是否可拆",min=>"最小包装",store=>"库存"]
//                ]
//            ],
//            3=>[
//                'p_sign'=>"需求型号",'brand'=>"需求品牌",'cate'=>"需求分类",'package'=>"需求封装",'p_num'=>"需求数量",
//                'list'=>[
//                    0=>[p_sign_list=>"匹配型号",brand_list=>"需求品牌",cate_list=>"匹配分类",package_list=>"匹配封装",p_num_list=>"推荐数量",min_open=>"是否可拆",min=>"最小包装",store=>"库存"],
//                    1=>[p_sign_list=>"匹配型号",brand_list=>"需求品牌",cate_list=>"匹配分类",package_list=>"匹配封装",p_num_list=>"推荐数量",min_open=>"是否可拆",min=>"最小包装",store=>"库存"]
//                ]
//            ],
//
//
//        );
        $config['POSITION_DESCRIBE']=['p_sign'=>"需求型号",'brand'=>"需求品牌",'cate'=>"需求功能分类",'package'=>"需求封装",'p_num'=>"需求数量",'p_sign_list'=>"匹配型号",'brand_list'=>"匹配品牌",'cate_name'=>"匹配分类",'package_list'=>"匹配封装",'p_num_list'=>"推荐数量",'min_open'=>"是否可拆",'min'=>"最小包装",'store'=>"库存"];
        $config['POSITION']=['p_sign'=>"A",'cate'=>"B",'brand'=>"C",'package'=>"D",'p_num'=>"E",'p_sign_list'=>"F",'cate_name'=>"G",'brand_list'=>"H",'package_list'=>"I",'p_num_list'=>"J",'min_open'=>"K",'min'=>"L",'store'=>"M"];
        $num=4;
        $y=4;
        $arr_mail=[];
        foreach ($post['data'] as $post_k=>&$request){
            foreach ($request as $k=>&$v){
                $line_num=count($request['list']);
                if($k=='list'){
                    foreach ($v as $one=>&$one_list){
                        foreach ($one_list as $two_k=>$two_list){
                            if($two_k=='min_open'){
                                $two_list=$two_list==1?"是":"否";
                            }
                            if($two_k=='store'){
                                if($two_list<=0) $one_list[$two_k]=0;
                            }
                            if($two_k!='package'){
                                $arr_mail[$post_k][$config['POSITION'][$two_k].$y]=$two_list;
                            }
                        }
                        $y=$y+2;
                    }

                }else{
                    $arr_mail[$post_k][$config['POSITION'][$k].$num]=$v;
                    $arr_mail[$post_k]['line_num']=$line_num;
                    $arr_mail[$post_k]['end_num']=$num+($line_num*2-1);
                }

            }
            $num=$num+($line_num*2);
        }
        $return=$this->poductExcelWrite('mails',$arr_mail,count($arr_mail),$config);
        if($return['error']==0){
            //下载excel
            if(isset($post['excel'])&&$post['excel']==1){
                die(json_encode($return));
            }
            //发送邮箱
            if(!$post['toMail']){
                die(json_encode(['error'=>1,'msg'=>'邮箱不能为空']));
            }
            if(SendMail($post['toMail'],"玖隆BOM表智能分析--http://www.longicmall.com","玖隆BOM表智能分析--http://www.longicmall.com",$return['data']['one'])){
                unlink($return['data']['one']);
                die(json_encode(['error'=>0,'msg'=>'发送成功']));
            }
            else{
                unlink($return['data']['one']);
                die(json_encode(['error'=>0,'msg'=>'发送失败']));
            }
        }else{
            die(json_encode(['error'=>0,'msg'=>'发送失败']));
        }
    }


    /**
     * @desc excel产品文件写入
     *
     */
    public function poductExcelWrite($path,$data,$count,$config){
        if(!vendor('PHPExcel/PHPExcel'))return ['error'=>1,'msg'=>'phpexcel文件加载错误'];
        $objPHPExcel = new \PHPExcel();
        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setAutoSize(true);
        //头部信息写入
        $activeSheet = $objPHPExcel->getActiveSheet();
        foreach($config['POSITION'] as $k=>$v){
            $titleConfig[]=$v."2:".$v.'3';
        }
        $objPHPExcel->setActiveSheetIndex(0)->setCellValue('A1', "玖隆BOM表智能分析--<a href='http://www.longicmall.com'>玖隆BOM表智能分析</a>");
        foreach($config['POSITION_DESCRIBE'] as $k=>$v){
            $objPHPExcel->setActiveSheetIndex(0)->setCellValue($config['POSITION'][$k].'2', $v);
        }
        $activeSheet->mergeCells("A1:".end($config['POSITION']).'1');//合并单元格
        foreach($titleConfig as $k=>$titlePosition){
            $objPHPExcel->getActiveSheet()->getStyle($titlePosition)->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);//文字居中
            $activeSheet->mergeCells($titlePosition);//合并单元格
            $objPHPExcel->getActiveSheet()->getStyle($titlePosition)->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);//垂直居中
        }
        //产品信息写入
        foreach($data as $k=>$v){
            $line_num=$data[$k]['line_num'];
            $end_num=$data[$k]['end_num'];
            foreach ($v as $key=>$value){
                if(in_array(substr($key,0,1),["A","B","C","D","E","F","G","H","I","J","K","L","M"])){
                    $objPHPExcel->setActiveSheetIndex(0)->setCellValue($key, $value);
                    if(in_array(substr($key,0,1),["F","G","H","I","J","K","L","M"])){
                        $e_key=substr($key,0,1);
                        $end_key=substr($key, 1)+1;
                        $end_key=$key.':'.$e_key.$end_key;
                    }else{
                        $e_key=substr($key,0,1);
                        $end_key=substr($key, 1)+($line_num*2-1);
                        $end_key=$key.':'.$e_key.$end_key;
                    }
                    $objPHPExcel->getActiveSheet()->getStyle($end_key)->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);//文字居中
                    $activeSheet->mergeCells($end_key);//合并单元格
                    $objPHPExcel->getActiveSheet()->getStyle($end_key)->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);//垂直居中
                }
            }
        }
        $objPHPExcel->getActiveSheet()->setTitle('Simple');
        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $temp_path='Uploads/excelout';
        if(!file_exists($temp_path)){
            mkdir($temp_path,0777,true);
        }
        $temp_path.='/'.md5(session_id()).'.xlsx';
        $result=$objWriter->save($temp_path);
        return ['error'=>0,'data'=>['one'=>$temp_path]];
    }
//    protected function levensh($productList,$p_sign,$start_id=8,$end_id=11){
//        $pid_arr=[];
//        foreach ($productList as $k=>$v){
//            $v=json_decode($v,true);
//            foreach ($p_sign as $p_k=>$p_v){
//                if(isset($p_v['value'])&&$p_v['value']){
//                    foreach ($v as $vv){
//                        if(levenshtein($p_v['value'],$vv)<$start_id){//8-11
//                            $pid_arr[]=$k;
//                            break;
//                        }
//                    }
//                }
//            }
//        }
//        if(!$pid_arr && $start_id!=$end_id) return $this->levensh($productList,$p_sign,$start_id+1,$end_id);
//        else   return  $pid_arr;
//    }
//
//    protected function levensh($productList,$p_sign,$start_id=80,$end_id=20){
//        $pid_arr=[];
//        foreach ($productList as $k=>$v){
//            $v=json_decode($v,true);
//            foreach ($p_sign as $p_k=>$p_v){
//                if(isset($p_v['value'])&&$p_v['value']){
//                    foreach ($v as $vv){
//                        similar_text($p_v['value'],$vv,$percent);
//                        if($percent<$start_id){//8-11
//                            $pid_arr[]=$k;
//                            break;
//                        }
//                    }
//                }
//            }
//        }
//        if(!$pid_arr && $start_id!=$end_id) return $this->levensh($productList,$p_sign,$start_id-10,$end_id);
//        else   return  $pid_arr;
//    }


//    protected function levensh($productList,$p_sign,$start_id=80,$end_id=20){
//        $pid_arr=[];
//        foreach ($productList as $k=>$v){
//            $v=json_decode($v,true);
//            foreach ($p_sign as $p_k=>$p_v){
//                if(isset($p_v['value'])&&$p_v['value']){
//                    foreach ($v as $vv){
//                        similar_text($vv,$p_v['value'],$percent);
//                        if($percent>$start_id){//8-11
//                            if(isset($pid_arr[$k])&&$pid_arr[$k]){
//                                if($pid_arr[$k]<$percent){
//                                    $pid_arr[$k]=['percent'=>$percent,'id'=>$k];
//                                }
//                            }else{
//                                $pid_arr[$k]=['percent'=>$percent,'id'=>$k];
//                            }
//
//                        }
//                    }
//                }
//            }
//        }
//
//        if(!$pid_arr && $start_id!=$end_id) return $this->levensh($productList,$p_sign,$start_id-10,$end_id);
//        else   return  $pid_arr;
//    }
    protected function levensh($productList,$p_sign,$start_id=80,$end_id=20,$orgin){

        $pid_arr=[];
        foreach ($productList as $k=>$v) {
            if(isset($orgin)&&$orgin==1){
                //$v = json_decode($v, true);
            }else{
                $v = json_decode($v, true);
            }
           // $v = json_decode($v, true);
            foreach ($p_sign as $p_k => $p_v) {
                if (isset($p_v['value']) && $p_v['value']&& !is_numeric($p_v['value'])) {
                    foreach ($v as $kk => $vv) {
                        //,'cate_name','brand_name','package'
                        if(!in_array($kk,['p_sign'])) continue;
//                        echo     $add->getLCS($vv,$p_v['value']);
                        // $percent=$add->getSimilar($vv,$p_v['value']);
//                        $percent=round($percent*1000,0);
//                        echo $percent;
//                        //similar_text($vv,$p_v['value'],$percent);
//                        if($percent>$start_id){//8-11
//
//                                $pid_arr[$k]=['percent'=>$percent,'id'=>$k];
//                            continue;
//
//                        }

                        $a = str_split(preg_replace('/([\x80-\xff]*)/i', '', $p_v['value']));
                        $b = str_split(substr($vv,0,strpos($vv, '-')));
                        $return = $this->array_shun($a, $b);
//                        if($vv=='NS4250-SOP16'){
//                            print_r($return['arr_num'][0]);
//                        }
                        if ($return['arr_num'][0] > 3) {
                            if (isset($pid_arr[$k])) {
                                if ($pid_arr[$k]['percent'] < $return['arr_num'][0]) {
                                    $pid_arr[$k] = ['percent' => $return['arr_num'][0], 'id' => $k,'list'=>$v];
                                }
                            } else {
                                $pid_arr[$k] = ['percent' => $return['arr_num'][0], 'id' => $k,'list'=>$v];
                            }
                        }
//                        $result = array_intersect($a,$b);
//                        $res=$this->a($result,$k);

//                        if($vv=='ES7240S-TSSOP16盘装'){
//                            $k=0;
//                        }
//                        $result1 = array_intersect($b,$a);
//
//                        $res1=$this->a($result1,$k);
//                        if(count($res['result1'])<count($res1['result1'])){
//                            $res2=array_intersect($res['result1'],$res1['result1']);
//                        }else{
//                            $res2=array_intersect($res1['result1'],$res['result1']);
//                        }
//                        if($k==1741){
//                            echo "<pre>";
//
//                            print_r($res);
//                            print_r($res1);
//                            print_r($res2);
//                        }
//                        if(count($res2)>4){
//                            //print_r($result);
//                           // $this->response($result, 'json');
//                           // die(json_encode(['data'=>$result]));
//                            if($kk=='p_sign'){
//                                $n=count($res2)*2;
//                            }else{
//                                $n=count($res2);
//                            }
//                            if(isset( $pid_arr[$k])){
//                                if($pid_arr[$k]['percent']<$n){
//                                    $pid_arr[$k]=['percent'=>$n,'id'=>$k];
//                                }
//                            }else{
//                                $pid_arr[$k]=['percent'=>$n,'id'=>$k];
//                            }
//
//                        }
//                    }
                    }
//                    if($k==5){
//                        print_r( $pid_arr[$k]);
//                        die();
//
//                    }
                }
            }
        }
        return $pid_arr;
        if(!$pid_arr && $start_id!=$end_id) return $this->levensh($productList,$p_sign,$start_id-10,$end_id);
        else   return  $pid_arr;
    }
    public function a($result,$kkk){
        if(!$result){
            return 0;
        }
        $result1=[];
        $p_k=-1;
        $num=0;
        $numarr=[];
        $numarr1=[];

        foreach ($result as $k=>$v) {

            if (($p_k + 1) == $k) {
                $num = $num + 1;
                $p_k = $k;
            } else {
                $numarr[] = $num;
                $numarr1[$num] = $p_k;
                $num = 0;
                $p_k = $k;
            }

        }
        $numarr[]=$num;
        $numarr1[$num]=$p_k;
//        if($kkk==0){
//            echo $num;
//           die();
////                       die();
//        }
        $t_num=$num=max($numarr);
        if($num>3){
            $a=$numarr1[$num];
            $t_num=$t_num;
            while ($t_num>0){
                array_unshift($result1,$result[$a]);
//                $result1[$t_num]=$result[$a];
                $a=$a-1;
                $t_num=$t_num-1;
            }
        }
        return ['num'=>$num,'result1'=>$result1];
    }


    public  function array_shun($a,$b){
        $return=[0];
        $return_str=[];
        foreach ($a as $ak=>$av){
            //请求键值    返回数组
            $arr_key=array_keys($b,$av,true);
            //存在
            if($arr_key){
                foreach ($arr_key as $arr_k=>$arr_v){
                    //次数
                    $arr_num=1;
                    //重叠字符数组
                    unset($arr_str);
                    $arr_str[]=$av;
                    $status=1;
                    while($status){
                        if(isset($a[$ak+$arr_num])&&isset($b[$arr_v+$arr_num])&&$a[$ak+$arr_num]==$b[$arr_v+$arr_num]){
                            $arr_str[]=$b[$arr_v+$arr_num];
                            $status=1;
                            $arr_num+=1;
                        }else{
                            $status=0;
                        }
                    }
                    if($arr_num>=3&&$arr_num>max($return)){
                        $return=[$arr_num];
                        $return_str[$arr_num]=$arr_str;
                    }

                }
            }
            //结束
        }
        return ['arr_num'=>$return,
            'str'=>$return_str,
        ];
    }
}
