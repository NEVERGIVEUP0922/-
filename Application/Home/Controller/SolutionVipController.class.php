<?php
// +----------------------------------------------------------------------
// | FileName:
// +----------------------------------------------------------------------
// | Dscription:
// +----------------------------------------------------------------------
// | Date:
// +----------------------------------------------------------------------
// | Author: kk <1343188487@qq.com>
// +----------------------------------------------------------------------
namespace Home\Controller;
use Home\Controller\HomeController;
use Home\Controller\SolutionController;
use Home\Model\SolutionProviderModel;
use Home\Model\UserModel;
use Think\Model;
use Home\Model\SolutionVipModel;
use Home\Controller\UserController;
use Home\Controller\OrderController;
use Common\Controller\UploadController as upload;

class solutionVipController extends SolutionController
{
	use upload;
	public function __construct($token)
	{
		if($token == 654321) {//避免支付回调的失败
			return true;
		}else{
			parent::__construct(); // TODO: Change the autogenerated stub
			date_default_timezone_set('PRC');
			if (empty($_SESSION['userId'])) {
				$this->redirect('Account/login');
			}
		}
	}

	//	我的联系方式(会员首页)
	public function vipIndex()
	{
		$uid  = I('session.userId');
		$_model = D('User');
		$vip_z  =['无会员','月会员','季度会员','半年会员','年度会员',];
		if(IS_GET && !IS_AJAX){/*展示当前会员状态*/
			$this->check_vip();/*更新状态*/
			$userInfo = $_model->field( 'id, user_mobile' )->getUserInfo();
			$res  	  = M("solution_vip")->where(['uid'=>$uid])->find();
			if($res){
				$res['vip_level'] = $vip_z[$res['vip_level']];
				//会员功能之一(暂时停用)
				//				$res['vip_level'] = $vip_z[$res['vip_level']];
				//				$res['vip_time']  = date('Y-m-d',strtotime($res['vip_time']));
				$res['vip_level'] = '特邀会员(赠送)';
				$res['vip_time']  = '2020-1-1';
			}
		}elseif(IS_POST &&IS_AJAX){/*修改会员信息*/
			$request = I('post.');
			if(empty($request))$this->ajaxReturnStatus(1013,'data_is_null');
			//			$check_vip = $this->check_vip();
			//			if($check_vip == false ||$check_vip==0)$this->ajaxReturnStatus(1017,'您目前还不是会员!');

			//			print_e($request);die;
			$data=$this->deal_data($request);
			if($data == false ) $this->ajaxReturnStatus(1017,'参数错误失败!');
			$re0= D('solution_vip')->where(['uid'=>$uid])->find();
			if($re0){
				$re = D('solution_vip')->where(['uid'=>$uid])->save($data);
			}else{
				$data['uid'] = $uid;
				$re = D('solution_vip')->add($data);
			}
			if($re === false){
				$this->ajaxReturnStatus(1014,'修改失败!');
			}elseif($re ===0){
				$this->ajaxReturnStatus(1015,'信息无变动!');
			}else{
				$this->ajaxReturnStatus(1000,'恭喜您,修改成功!');
			}

		}elseif(IS_GET &&IS_AJAX ){/*升级会员的路上*/

			$request   = I('get.');
			$vip_level = $request['vip_level'];
			if(empty($vip_level))$this->ajaxReturnStatus(1001,'数据有误');

			$vip_level = (int)$vip_level['vip_level'];
			$price_arr = [0,200,500,900,1600];/*会员价格表*/
			switch($vip_level){
				case 1:
					$vip_price = $price_arr[1];break;
				case 2:
					$vip_price = $price_arr[2];break;
				case 3:
					$vip_price = $price_arr[3];break;
				case 4:
					$vip_price = $price_arr[4];break;
				default:
					$this->ajaxReturnStatus(1001,'系统繁忙,请稍后再试');
					;break;
			}
			$orderSn  = $this->orderSn();/*生成编号*/
			$orderSn  = $orderSn['data']['one'];

			$temp = M('solution_vip_order')->where(['uid'=>$uid,'order_sn'=>$orderSn])->find();
			if(empty($temp)){
				$vip_order = ['uid'=>$uid,'vip_level'=>$vip_level,'top_up'=>$vip_price,'order_sn'=>$orderSn];
				$temp2	   = M('solution_vip_order') ->add($vip_order);/*添加会员充值的草案*/
				//				getsql();
				if($temp2){
					$vip_level = $vip_z[$vip_level];/*会员等级转为中文*//*组装数据*/
					$vipInfo   = ['order_sn'=>$orderSn,'vip_price'=>$vip_price,'vip_level'=>$vip_level];
					$this->ajaxReturn($vipInfo,'JSON');
				}else{
					$this->ajaxReturnStatus(1001,'系统错误,稍后再试!');
				}
			}
		}
		$this->assign('res',$res);
		$this->assign('userInfo',$userInfo);
		$this->assign('isPlanCenter','1');
		$this->display('Solution/vipIndex');
	}
	//	会员信息展示页面(+供应方案)
	public function vipProvider()
	{
		$this->isLogin();
		$userInfo = D('user')->field( 'id, user_mobile' )->getUserInfo();
		$res = D('solution_vip')->getVipInfo();
		//查找我的供应方案
		$project= new SolutionProviderModel();
		$proInfo= $project->myProviderInfo('','','',3);
		$browse = $project->myBrowseHistory('','',2,3);
		//		print_e($browse);die;
		$this->assign('userInfo',$userInfo);
		$this->assign('browseHistory',$browse);
		$this->assign('res',$res);
		$this->assign('proInfo',$proInfo);
		$this->assign('isSolIndex','1');
		$this->display('Solution/vipProvider');
	}

	//	会员充值
	public function vipPay()
	{
		$request = I('get.');
		$request['product_id'] = time();
		//		dump($request);die;
		$object  = new OrderController();
		$payment = $object->userOrderPayment();
		$this->assign('payment',$payment);
		$this->assign('vipInfo',$request);
//		print_e($request);die;
		$this->assign('isPlanCenter','1');
		$this->display('Solution/vipPay');
	}
	//	会员过期检查
	public function check_vip($userId)
	{
		$uid  = $userId?$userId:I('session.userId');
		$vip_info = M('solution_vip')->field('uid,vip_level,vip_time')->where(['uid'=>$uid])->find();

		if(empty($vip_info)){
			return 0;/*非会员*/
		}elseif(!empty($vip_info)&&$vip_info['vip_level']==0){
			return 1;/*已过期*/
		}else{
			$time_temp = strtotime($vip_info['vip_time'])-time();
			if($time_temp>0){
				return 2;/*会员*/
			}else{/*过期了*/
				$data  = ['vip_level'=>0];
				$update_info = M('solution_vip')->where(['uid'=>$uid])->save($data);
				return 3;
			}
		}
	}
	//	会员检查2(用于页面时加载判断)
	public function check_vip2()
	{
		$uid  = I('session.userId');
		$vip_info = M('solution_vip')->where(['uid'=>$uid])->find();

		if(empty($vip_info)){
			$temp = 0;/*非会员*/
		}elseif(!empty($vip_info)&&$vip_info['vip_level']==0){
			$temp = 1;/*已过期*/
		}else{
			$time_temp = strtotime($vip_info['vip_time'])-time();
			if($time_temp>0){
				$temp =2;
				$data = $vip_info;/*会员*/
			}else{/*过期了*/
				$data = ['vip_level'=>0];
				$update_info = M('solution_vip')->where(['uid'=>$uid])->save($data);
				$temp = 3;
			}
		}
		$temp =  $this->check_vip();
		if($temp==2){
			$this->ajaxReturnStatus(1000,'您目前还不是会员',$data);
		}elseif($temp === 0){
			$this->ajaxReturnStatus(1001,'发布方案需要展示您的昵称和联系等基本信息,请补充');
		}else{
			$this->ajaxReturnStatus(1099,'您目前还不是会员');
		}
	}
	//	修改会员信息.参数是商户订单
	private function changeVipLevel($orderInfo)
	{
		$data = '';
		if(empty($orderInfo))return ['error'=>1,'msg'=>'参数错误'];
		if($orderInfo['uid']){
			$data['uid'] = $orderInfo['uid'];
		}else{
			//$data['uid'] = I('session.userId');
		}
		if(!$orderInfo['vip_level'])return['error'=>1,'msg'=>'参数错误'];
		$data['vip_level'] = $orderInfo['vip_level'];

		/*到期时间与会员等级的关系*/
		$time_arr = ['+0 month','+1 month','+3 month','+6 month','+12 month'];

		/*供应方案次数和洽谈次数*/
		$num_arr   = [
			['pro_num'=>0,'con_num'=>0],
			['pro_num'=>1,'con_num'=>5],
			['pro_num'=>5,'con_num'=>20],
			['pro_num'=>20,'con_num'=>40],
			['pro_num'=>50,'con_num'=>100]
		];
		$re = $this->check_vip($orderInfo['uid']);
		if( isset($re) && $re === 0){
			$data['pro_num'] = $num_arr[$orderInfo['vip_level']]['pro_num'];
			$data['con_num'] = $num_arr[$orderInfo['vip_level']]['con_num'];
			$data['vip_time']= date('Y-m-d H-i-s',strtotime($time_arr[$data['vip_level']]));
			$rez = M('solution_vip')->add($data);
			return $rez;
		}elseif( isset($re) && $re === 2){
			$vipInfo = M('solution_vip')->where(['uid'=>$data['uid']])->find();
			$data['pro_num'] = $vipInfo['pro_num']+$num_arr[$orderInfo['vip_level']]['pro_num'];
			$data['con_num'] = $vipInfo['con_num']+$num_arr[$orderInfo['vip_level']]['con_num'];
			$data['vip_time']= date('Y-m-d H-i-s',strtotime($vipInfo['vip_time'].$time_arr[2]));
			$rez = M('solution_vip')->where(['uid'=>$data['uid']])->save($data);
			return $rez;
		}elseif( isset($re)){
			$data['pro_num'] = $num_arr[$orderInfo['vip_level']]['pro_num'];
			$data['con_num'] = $num_arr[$orderInfo['vip_level']]['con_num'];
			$data['vip_time']= date('Y-m-d H-i-s',strtotime($time_arr[$data['vip_level']]));
			$rez = M('solution_vip')->where(['uid'=>$data['uid']])->save($data);
			return $rez;
		};

	}
	//	上传数据处理
	private function deal_data($data)
	{
		if($data['mobile']){/*验证手机号*/
			$check_mobile = new UserController();
			$check_mobile->checkMobile($data['mobile']);
		}
		$key_arr = ['mobile','nick_name','nick_picture','qq','wechat'];
		if(!is_array($data)) return false;
		foreach($data as $k=>$v){
			if(in_array($k,$key_arr)){
				if($k=='qq'||$k=='wechat'||$k=='nick_picture'){
					continue;
				}elseif(!empty($v)){
					$data['nick_picture'] = $data['nick_picture'];
					$data['mobile']   =$data['mobile'];
					$data['nick_name']=$data['nick_name'];
					$data['qq']       =$data['qq'];
					$data['wechat']  =$data['wechat'];
					return $data;
				}else{
					return false;
				}
			}else{
				return false;
			}
		}
	}
	//	检查订单草案/(会员订单列表功能占位).
	private function vipOrderList($order_sn)
	{
		$orderInfo = M('solution_vip_order')->where(['order_sn'=>$order_sn,'top_up_status'=>0])->find();
		//		getsql($orderInfo);
		if($orderInfo){
			return $orderInfo;
		}else{
			return false;
		}
	}

	//--------------------------------------------------------------------------------------
	//	支付模块(微信,支付宝,银联)
	//	支付宝
	public function alipay()
	{
		$order_sn= I('post.');
		$uid     = I('session.userId');
		$payInfo = [];
		if($order_sn){
			$orderInfo = $this->vipOrderList($order_sn['order_sn']);
			if($orderInfo===false) die('订单草案不存在');
			if($orderInfo['top_up_status']==0){
				$vip_z  =['无会员','月会员','季度会员','半年会员','年度会员'];
				$payInfo['subject'] ="天玖隆方案中心VIP:".$vip_z[$orderInfo['vip_level']];
				$payInfo['price']   = (int)$orderInfo['top_up'];
				$payInfo['order_sn']= $orderInfo['order_sn'];
			}
			$data=array(
				'out_trade_no'=>$payInfo['order_sn'],//订单号
//				'price'=>$payInfo['price'],//支付金额
				'price'=>0.01,//支付金额
				'subject'=>$payInfo['subject']
			);
		}
		alipay2($data);
	}

	//	微信wechatPay
	public function vipWechatPay()
	{
		$get=I('get.');
		$order_sn=isset($get['order_sn'])?$get['order_sn']:'';
		$QRcode_url='';
		if($order_sn){//商城订单微信扫码支付
			$orderInfo=$this->vipOrderList($order_sn);
			if($orderInfo===false) $this->error('订单草案不存在',U('solution/vipIndex'),3);
			$orderInfo['top_up']=sprintf('%01.2f',$orderInfo['top_up']);
			$orderInfo['product_id'] = $get['product_id'];
			$this->assign('orderInfo',$orderInfo);
		}else{
			$this->error('未定义的微信扫码支付',U('solution/vipIndex'));
		}
		//		dump($get['product_id']);print_e($orderInfo);die;
		$orderInfo['top_up'] = 1;//测试价格(分)
		$this->assign('order',$orderInfo);
		$this->assign('get',$get);
		$this->assign('isPlanCenter','1');
		$this->display('Solution/vipWechatPay');
	}
	//	微信二维码
	public function vipwechatPay_qrcode()
	{
		header('Content-Type:application/json; charset=utf-8');
		$get=I('get.');
		//		$time = time();//随机的时间导致刷新无码.
		//		$get['top_up']=$get['top_up']*100;
		$get['top_up']=$get['top_up'];
		$vip_z  =['无会员','月会员','季度会员','半年会员','年度会员'];
		$get['subject'] ="天玖隆方案中心VIP:".$vip_z[$get['vip_level']];
		$order=array(
			'body'=>"天玖隆方案中心VIP".$get['subject'],
			'total_fee'=>(int)$get['top_up'],
			//			'total_fee'=>(int)$get['top_up'],
			'out_trade_no'=>$get['order_sn'],
			'product_id'=>$get['product_id']
		);
		weixinpay2($order);
	}

	//	银联
	//银联网关支付
	public function wapPay(){
		$request=I('post.');
		$merId	=C('WAPPAY_CONFIG.MERID');
		$txnTime=date('Ymdhis',time());
		if($request['order_sn']){//订单支付
			$orderInfo = $this->vipOrderList($request['order_sn']);
			if($orderInfo===false) $this->error('订单草案不存在',U('Home/SolutionVip/vipIndex'),3);

		}else{
			die('未定义的支付宝扫码支付');
		}
		$post=[
			'merId' => $merId,		//商户代码，请改自己的测试商户号，此处默认取demo演示页面传递的参数
			'orderId' => $orderInfo['order_sn'],	//商户订单号，8-32位数字字母，不能含“-”或“_”，此处默认取demo演示页面传递的参数，可以自行定制规则
			'txnTime' => $txnTime,	//订单发送时间，格式为YYYYMMDDhhmmss，取北京时间，此处默认取demo演示页面传递的参数
			'txnAmt' => $orderInfo['top_up']*100,	//交易金额，单位分，此处默认取demo演示页面传递的参数
		];

		$this->wapPayExecute($post);
	}

	//银联网关支付execute
	public function wapPayExecute($post){

		$path__='/ThinkPHP/Library/Vendor/Wappay';
		header ( 'Content-type:text/html;charset=utf-8' );
		include_once $_SERVER ['DOCUMENT_ROOT'] .$path__ .'/upacp_demo_b2c/sdk/acp_service.php';
		/**
		 * 重要：联调测试时请仔细阅读注释！
		 *
		 * 产品：跳转网关支付产品<br>
		 * 交易：消费：前台跳转，有前台通知应答和后台通知应答<br>
		 * 日期： 2015-09<br>

		 * 版权： 中国银联<br>
		 * 说明：以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己需要，按照技术文档编写。该代码仅供参考，不提供编码性能规范性等方面的保障<br>
		 * 提示：该接口参考文档位置：open.unionpay.com帮助中心 下载  产品接口规范  《网关支付产品接口规范》，<br>
		 *              《平台接入接口规范-第5部分-附录》（内包含应答码接口规范，全渠道平台银行名称-简码对照表)<br>
		 *              《全渠道平台接入接口规范 第3部分 文件接口》（对账文件格式说明）<br>
		 * 测试过程中的如果遇到疑问或问题您可以：1）优先在open平台中查找答案：
		 * 							        调试过程中的问题或其他问题请在 https://open.unionpay.com/ajweb/help/faq/list 帮助中心 FAQ 搜索解决方案
		 *                             测试过程中产生的7位应答码问题疑问请在https://open.unionpay.com/ajweb/help/respCode/respCodeList 输入应答码搜索解决方案
		 *                          2） 咨询在线人工支持： open.unionpay.com注册一个用户并登陆在右上角点击“在线客服”，咨询人工QQ测试支持。
		 * 交易说明:1）以后台通知或交易状态查询交易确定交易成功,前台通知不能作为判断成功的标准.
		 *       2）交易状态查询交易（Form_6_5_Query）建议调用机制：前台类交易建议间隔（5分、10分、30分、60分、120分）发起交易查询，如果查询到结果成功，则不用再查询。（失败，处理中，查询不到订单均可能为中间状态）。也可以建议商户使用payTimeout（支付超时时间），过了这个时间点查询，得到的结果为最终结果。
		 */
		$params = array(

			//以下信息非特殊情况不需要改动
			'version' => \com\unionpay\acp\sdk\SDKConfig::getSDKConfig()->version,                 //版本号
			'encoding' => 'utf-8',				  //编码方式
			'txnType' => '01',				      //交易类型
			'txnSubType' => '01',				  //交易子类
			'bizType' => '000201',				  //业务类型
			'frontUrl' =>  \com\unionpay\acp\sdk\SDKConfig::getSDKConfig()->frontUrl,  //前台通知地址
			'backUrl' => \com\unionpay\acp\sdk\SDKConfig::getSDKConfig()->backUrl,	  //后台通知地址
			'signMethod' => \com\unionpay\acp\sdk\SDKConfig::getSDKConfig()->signMethod,	              //签名方法
			'channelType' => '08',	              //渠道类型，07-PC，08-手机
			'accessType' => '0',		          //接入类型
			'currencyCode' => '156',	          //交易币种，境内商户固定156

			//TODO 以下信息需要填写
			'merId' => $post["merId"],		//商户代码，请改自己的测试商户号，此处默认取demo演示页面传递的参数
			'orderId' => $post["orderId"],	//商户订单号，8-32位数字字母，不能含“-”或“_”，此处默认取demo演示页面传递的参数，可以自行定制规则
			'txnTime' => $post["txnTime"],	//订单发送时间，格式为YYYYMMDDhhmmss，取北京时间，此处默认取demo演示页面传递的参数
			'txnAmt' => $post["txnAmt"],	//交易金额，单位分，此处默认取demo演示页面传递的参数

			// 订单超时时间。
			// 超过此时间后，除网银交易外，其他交易银联系统会拒绝受理，提示超时。 跳转银行网银交易如果超时后交易成功，会自动退款，大约5个工作日金额返还到持卡人账户。
			// 此时间建议取支付时的北京时间加15分钟。
			// 超过超时时间调查询接口应答origRespCode不是A6或者00的就可以判断为失败。
			'payTimeout' => date('YmdHis', strtotime('+15 minutes')),

			// 请求方保留域，
			// 透传字段，查询、通知、对账文件中均会原样出现，如有需要请启用并修改自己希望透传的数据。
			// 出现部分特殊字符时可能影响解析，请按下面建议的方式填写：
			// 1. 如果能确定内容不会出现&={}[]"'等符号时，可以直接填写数据，建议的方法如下。
			//    'reqReserved' =>'透传信息1|透传信息2|透传信息3',
			// 2. 内容可能出现&={}[]"'符号时：
			// 1) 如果需要对账文件里能显示，可将字符替换成全角＆＝｛｝【】“‘字符（自己写代码，此处不演示）；
			// 2) 如果对账文件没有显示要求，可做一下base64（如下）。
			//    注意控制数据长度，实际传输的数据长度不能超过1024位。
			//    查询、通知等接口解析时使用base64_decode解base64后再对数据做后续解析。
			//    'reqReserved' => base64_encode('任意格式的信息都可以'),

			//TODO 其他特殊用法请查看 special_use_purchase.php
		);

		\com\unionpay\acp\sdk\AcpService::sign ( $params );
		$uri = \com\unionpay\acp\sdk\SDKConfig::getSDKConfig()->frontTransUrl;
		$html_form = \com\unionpay\acp\sdk\AcpService::createAutoFormHtml( $params, $uri );
		echo $html_form;
	}

	//	检测支付结果与定单是否一致//修改订单信息和会员信息
	/*
	 * $result支付返回的结果,$type支付方式
	 */
	public function scanPayResult($payData,$type)
	{
		$result = json_decode($payData,true);
		$order_sn = $result['out_trade_no'];//订单号
		//保存支付信息:
		$payCode  = M('solution_vip_pay')->where(['order_sn'=>$order_sn])->find();
		if($payCode){
			return json_encode(['error'=>0,'msg'=>'payInfo_is_existed']);die;
			//			M('solution_vip_pay')->where(['order_sn'=>$order_sn])->save($payData);
		}else{
			$pay_data = ['order_sn'=>$order_sn,
						'payInfo'  =>$payData];
			M('solution_vip_pay')->add($pay_data);
		}
		//修改会员信息
		$orderInfo =$this->vipOrderList($order_sn);
		if($orderInfo===false)
			return json_encode(['error'=>1,'msg'=>'order_not_exist','order_sn'=>$orderInfo]);

		if(!empty($type)){
			if($type ==1||$type=="alipay"){
				$result_total_fee=$result['price']*100;//金额(单位:分)
				$data['pay_sn']  = $result['trade_no'];/*????????????????????????*/
				$pay_name  = "支付宝";
				$type = 'alipay';
			}elseif($type ==2||$type =="weixinpay"){
				$result_total_fee=$result['total_fee'];//金额
				$data['pay_sn']  = $result['transaction_id'];
				$pay_name  = "微信支付";
				$type = 'alipay';
			}else{
				return json_encode(['error'=>1,'msg'=>'pay_type_error','order_sn'=>$orderInfo]);
			}
		}
		//		if((int)$orderInfo['top_up'] != (int)$result_total_fee )return ['error'=>1,'msg'=>'支付金额错误'];
		//		$data['order_sn'] = $orderInfo['order_sn'];
		$data['pay_name'] = $pay_name;//支付方式
		$data['top_up']   = $result_total_fee;//实际金额
		$data['top_up_status']= 1;

		//		$rez = $this->changeOrderInfo($data,$orderInfo);
		$rez = M('solution_vip_order')->where(['order_sn'=>$orderInfo['order_sn']])->save($data);
		if($rez === false ){
			return json_encode(['error'=>1,'msg'=>'order_update_error','order_sn'=>$orderInfo['order_sn']]);
		}else{
			$temp = $this->changeVipLevel($orderInfo);/*更改会员信息*/
			if($temp === false){
				return json_encode(['error'=>1,'msg'=>'vip_update_error','order_sn'=>$orderInfo['order_sn']]);
			}
			return json_encode(['error'=>0,'msg'=>'all_update_success','order_sn'=>$orderInfo['order_sn']]);
		}
		//		return $rez;
	}
	//	支付完成,更改订单状态
	//	private function changeOrderInfo($data)
	//	{
	//		$data['top_up_status']= 1;
	//		$rez = M('solution_vip_order')->where(['order_sn'=>$data['order_sn']])->save($data);
	//		if($rez === false ){
	//			return json_encode(['error'=>1,'msg'=>'order_update_error','order_sn'=>$data['order_sn']]);
	//		}else{
	//			$temp = $this->changeVipLevel($data['order_sn']);/*更改会员信息*/
	//			if($temp === false){
	//				return json_encode(['error'=>1,'msg'=>'vip_update_error','order_sn'=>$data['order_sn']]);
	//			}
	//			return json_encode(['error'=>0,'msg'=>'all_update_success','order_sn'=>$data['order_sn']]);
	//		}
	//	}
	//	-------------------------------------------------------------------------------------


}