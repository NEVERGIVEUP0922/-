<?php

// +----------------------------------------------------------------------
// | FileName:   PayController.class.php
// +----------------------------------------------------------------------
// | Dscription:
// +----------------------------------------------------------------------
// | Date:  2017/9/11 15:27
// +----------------------------------------------------------------------
// | Author: showkw <showkw@163.com>
// +----------------------------------------------------------------------
namespace  Home\Controller;

class PayController extends HomeController
{
	protected function _initialize()
	{
		parent::_initialize(); // TODO: Change the autogenerated stub
	}

    /**
     * 微信 扫描支付二维码
     */
    public function weixinpay_qrcode(){
        $get=I('get.');
        $order=array(
            'body'=>$get['body'],
            'total_fee'=>$get['total_fee'],
            'out_trade_no'=>$get['out_trade_no'],
            'product_id'=>$get['product_id']
        );
        weixinpay($order);
    }

    /**
     * 微信 扫码支付界面
     */
    public function wechatScanQRcodePay(){
        $get=I('get.');
        $order_sn=isset($get['order_sn'])?$get['order_sn']:'';
        $order_account_id=isset($get['order_account_id'])?$get['order_account_id']:'';
        $QRcode_url='';
        if($order_sn){//商城订单微信扫码支付
            $orderPay=$this->orderPay($order_sn);
            if($orderPay['error']!=0) $this->error($orderPay['msg'],U('order/myOrder'),3);
            $QRcode_url=$orderPay['data'];
            $orderinfo=$this->getOrderInfo($order_sn); //订单信息
            if($orderinfo['error']!=0) $this->error($orderinfo['msg'],U('order/myOrder'),3);
            parse_str($orderPay['data']);
            $orderinfo['order_balances']=$total_fee/100;
            $this->assign('orderinfo',$orderinfo);
        }else if($get['active']=='account'){//账期还款微信扫码支付
            $accountPay=$this->accountPay($get['orderSn_arr']);
            if($accountPay['error']!=0){
                $this->error('账期信息错误',U('Home/Order/myOrder'));
            }
            $QRcode_url=$accountPay['data']['RQcode_url'];
            $this->assign('user_order_account',$accountPay['data']['user_order_account']);
        }else{
            $this->error('未定义的微信扫码支付',U('Home/Order/myOrder'));
        }
        $accountPay=M('account_pay_history')->field('id')->where(['user_id'=>session('userId'),'step'=>1])->find();
        $get['order_account_id']=$accountPay['id'];
        $this->assign('order',$QRcode_url);
        $this->assign('get',$get);
        $this->display();
    }

    /**
     * 微信 扫码支付界面------账期还款支付
     */
    public function accountPay($orderSn_arr){
        $account=D('user')->orderToAccountInfo($orderSn_arr);
        if($account['error']!=0) return $account;
        $one=M('account_pay_history')->field('id')->where(['user_id'=>session('userId'),'step'=>1])->find();
        if(!$one) return ['error'=>1,'msg'=>'账期还款信息错误'];

        $time=time();
        $out_trade_no=$time.mt_rand(1000,9999).$one['id'].'2';//微信扫码订单号组成：时间挫-商城订单号-支付类型(长度小于等于32)
        $body='玖隆芯城账期：'.$out_trade_no;

        $total_fee=(int)($account['data']['total']*100);//未支付总金额
        $account_data=array(
            'body'=>$body,
            'total_fee'=>$total_fee,
            'out_trade_no'=>$out_trade_no,
            'product_id'=>$time
        );
        $return_data=http_build_query($account_data);
        return ['error'=>0,'data'=>['RQcode_url'=>$return_data,'user_order_account'=>$account['data']['total'],'out_trade_no'=>$out_trade_no]];
    }

    /**
     * 微信 扫码支付界面------订单支付
     */
    public function orderPay($order_sn){
        $info=$this->orderPayInfo($order_sn);
        if($info['error']!=0) $this->error($info['msg'],U('order/myOrder'),3);
        $data=$info['data'];

        $order=array(
            'body'=>$data['body'],
            'total_fee'=>$data['price'],
            'out_trade_no'=>$data['out_trade_no'],
            'product_id'=>$data['product_id']
        );
        $return_data=http_build_query($order);
        return ['error'=>0,'data'=>$return_data];
    }

    /**
     * @desc 订单支付信息
     */
    public function orderPayInfo($order_sn){
        if(!$order_sn) return ['error'=>1,'msg'=>'订单号错误'];
        $time=time();
        $out_trade_no=$time.$order_sn.'1';//微信扫码订单号组成：时间挫-商城订单号-支付类型(长度小于等于32)
        $body='玖隆芯城订单号：'.$order_sn;
        $order_info=$this->getOrderInfo($order_sn);
        if($order_info['error']!=0) return $order_info;
        $userOrder=$order_info['data']['order'][0];//未支付总金额

        if($userOrder['order_type']==1&&!(float)$userOrder['already_paid']) $order_balances=$userOrder['delivery_price']+$userOrder['total_deposits'];//选择支付定金未付定金的，支付定金
        else $order_balances=$userOrder['total']-$userOrder['already_paid'];//支付全部未付款

        if(!(float)$order_balances) $this->error('本次需要支付的金额0',U('order/myOrder'),3);
        $total_fee=round($order_balances*100,2);
        $total_fee=(int)$total_fee;

        return ['error'=>0,'data'=>['out_trade_no'=>$out_trade_no,'price'=>$total_fee,'body'=>$body,'product_id'=>$time]];
    }

    /**
     * 支付完成更改订单信息
     * $orderInfo           订单信息
     * $already_paid        已支付金额
     * $unpaid              未支付总额
     * $result_total_fee    本次支付金额
     */
    public function changeOrderInfo($orderInfo,$already_paid,$result_total_fee,$pay_name){
        $order_sn=$orderInfo['order']['order_sn'];
        $order_status=0;
        $is_deposits=0;

        $add=[];
        if((int)(round($orderInfo['order']['total'],2)*100)==(int)(round($already_paid,2)*100)){//全部支付
            $add=[
                'order_status'=>2,
                'already_paid'=>$already_paid,
                'pay_status'=>2,
            ];//待发货
        }else{//定金支付
            $is_deposits=1;
            $add=[
                'order_status'=>2,
                'already_paid'=>$already_paid,
                'deposits_pay_status'=>1,
                'pay_status'=>1,
            ];
        }

        $orderM=M('order');
        $orderM->startTrans();

        $order_status = $orderM->where(['order_sn' => $order_sn])->save($add);
        if ($order_status === false){
            $orderM->rollback();
            return ['error' => 1, 'msg' => '订单修改失败'];
        }
        //保存本次支付记录
        $pay_history_data = [
            'order_sn' => $order_sn,
            'order_total' => $orderInfo['order']['total'],
            'pay_amount' => $result_total_fee,//本次支付金额
            'pay_acount' => '',
            'type' => 1,
            'pay_name' => $pay_name,
        ];

        $pay_history = D('order_pay_history')->data($pay_history_data)->add($pay_history_data);//记录本次支付
        if(!$pay_history){
            $orderM->rollback();
            return ['error' => 1, 'msg' => '支付失败'];
        }
        //是否可以同步
        $isSyncArr=$orderInfo['order'];
        if((int)(round($orderInfo['order']['total'],2)*100)==(int)(round($already_paid,2)*100)){//全部支付
            $isSyncArr['pay_status']=2;
        }else{//定金支付
            $isSyncArr['deposits_pay_status']=1;
            $isSyncArr['pay_status']=1;
        }
        $isSync=isSync($isSyncArr);

        if((int)(round($orderInfo['order']['total'],2)*100)!=(int)(round($already_paid,2)*100)){//非全部支付
            if($orderInfo['order']['order_type']==1&&$isSync){//定金订单支付定金
                $toErp=(new \Home\Model\ErpModel())->orderToErp($orderInfo['order']['order_sn']);//订单同步到erp
                if($toErp['error']!=0){
                    $orderM->rollback();
                    return $toErp;
                }
            }
            $orderM->commit();//定金支付
            return ['error' => 0, 'msg' => '定金支付成功'];
        }

        $one_goods = $one_product = [];
        $one_goods_error = 0;
        $one_goods_error_sn = '';
        //改变订单商品库存
        $pId_type=[];
        foreach ($orderInfo['orderGoods'] as $k => $v) {
            $one_product = M('product')->where(['id' => $v['p_id']])->find();
            $one_goods = ['id' => $v['p_id'], 'sell_num' => $one_product['sell_num'] + $v['p_num']];
            $one_goods_result = M('product')->where(['id' => $v['p_id']])->data($one_goods)->save();//更新库存
            $one_erp_product=M('product','erp_')->where(['ftem'=>$one_product['fitemno']])->find();
//            $one_erp=['store'=>$one_erp_product['store']-$v['p_num']];
//            $one_erp_result=M('product','erp_')->where(['ftem'=>$one_product['fitemno']])->save($one_erp);
//            if (!$one_goods_result || !$one_erp_result ) {
            if ($one_goods_result===false) {
                $one_goods_error = 1;
                $one_goods_error_sn = $v['p_id'];
            }
        }

        if($isSync){//全款订单
            $toErp=(new \Home\Model\ErpModel())->orderToErp($orderInfo['order']['order_sn']);//订单同步到erp
            if($toErp['error']!=0){
                $orderM->rollback();
                return $toErp;
            }
        }

        if ($one_goods_error){
            $orderM->rollback();
            return ['error' => 1, 'msg' => $one_goods_error_sn . '----------商品库存更改失败'];
        }else{
            $orderM->commit();
            return ['error'=>0,'msg'=>'订单信息更新成功'];
        }
    }

    /**
     * 扫码支付结果操作
     */
    public function scanQRcodePayResult($result,$type='',$pay_name='微信支付'){
        //验证支付金额
        $order_sn=substr($result['out_trade_no'],10,-1);
        $pay_type=substr($result['out_trade_no'],-1,1);
        if( $pay_type==1) $pay_type='or';
        else if( $pay_type==2) $pay_type='ac';

        if($type=='alipay') $result_total_fee=$result['total_fee'];
        else $result_total_fee=$result['total_fee']/100;
    
        //订单信息
        $order_info=$this->getOrderInfo($order_sn);
        if($order_info['error']!=0) return $order_info;
        $userOrder=$order_info['data']['order'][0];
      

        $pay=(new \Home\Controller\OrderController)->userCurrentOnlinePay($order_sn);
        if($pay['error']!=0) return $pay;
        $order_balances=$pay['data']['one'];
       

        if((int)($result_total_fee*100)!=(int)($order_balances*100)) return ['error'=>1,'msg'=>'金额错误'];
        if(!in_array($userOrder['order_status'],[0,2])) return ['error'=>1,'msg'=>'订单状态不对'];

        //更改订单信息
        $already_paid=$order_balances+$userOrder['already_paid'];
        $orderInfo=[
            'order'=>$userOrder,
            'orderGoods'=>$userOrder['goodsList'],
        ];
        $order_status=$this->changeOrderInfo($orderInfo,$already_paid,$result_total_fee,$pay_name);
        if($order_status['error']!=0) return $order_status;
    

        return ['error'=>0,'msg'=>'扫码支付结果操作成功'];
    }

    /*
     *
     * 获取订单信息
     *
     */
    public function getOrderInfo($order_sn){
        $list=$this->orderList_admin(['order_sn'=>$order_sn,'order_status'=>['in',[0,2]]]);
        if($list['error']!=0) return $list;

        $data['order']=$list['data']['list'];
        $data['orderGoods']=$list['data']['list'][0]['goodsList'];
        return ['error'=>0,'data'=>$data];
    }

    /*
     *
     * 微信扫码支付回调记录
     *
     */
    public function wechatCallbackNotify($result=false,$order_change_msg='',$type='wechat'){
        $add_data=$add_result='';
        if($result){//支付成功
            $order_sn=substr($result['out_trade_no'],10,-1);
            $pay_type=substr($result['out_trade_no'],-1,1);
            if( $pay_type==1) $pay_type='or';
            else if( $pay_type==2) $pay_type='ac';

            if($type=='alipay'){
                $openid=$result['buyer_id'];
            }else if($type=='wappay'){
                $openid=$result['accNo'];
            }else{
                $openid=$result['openid'];
            }
            $add_data=[
                'out_trade_no'=>$result['out_trade_no'],
                'openid'=>$openid,
                'notify_type'=>$pay_type,
                'notify_code'=>$order_change_msg['error'],
                'notify_msg'=>$type.'---'.$order_change_msg['msg'],
                'notify_result_json'=>json_encode($result),
            ];
        }else{//支付失败
            $add_data=[
                'notify_type'=>'',
                'notify_code'=>1,
                'notify_msg'=>$type.'---'.'扫码支付失败',
            ];
        }
        $add_result=D('wechat_notify')->data($add_data)->add();
        if($add_result) return ['error'=>0,'msg'=>'微信扫码回调记录保存成功'];
        else  return ['error'=>1,'msg'=>'微信扫码回调记录保存失败'];
    }

    /*
     *
     * 微信扫码支付------前台查询支付结果
     *
     */
    public function frontCheckWechatQRcodePay(){
       $order_sn=I('get.order_sn')?I('get.order_sn'):I('get.order_account_id');
       $notify_error=I('get.notify_error');
       if(!$order_sn) die(json_encode(['error'=>1,'msg'=>'订单号错误']));
       if(S('wechat_notify_result')==$order_sn){
            S('wechat_notify_result',null);
            die(json_encode(['error'=>0,'msg'=>'支付成功']));
       }else{
            die(json_encode(['error'=>1,'msg'=>'支付未完成']));
       }
    }

    /*
     *
     * 微信扫码支付------回调账期还款改变账期
     *
     */
    public function QRcodeRepaymentAccountResult($result,$type='',$pay_name=''){
        //验证支付金额
        $accountId=substr($result['out_trade_no'],14,-1);
        if($type=='alipay') $result_total_fee=$result['total_fee'];
        else  $result_total_fee=$result['total_fee']/100;
        //订单信息
        $account=D('account_pay_history')->where(['id'=>$accountId])->find();
        if(!$account) return ['error'=>1,'msg'=>'账期信息错误'];
        if((int)($result_total_fee*100)!=(int)($account['total']*100)){//部分支付
            return ['error'=>1,'msg'=>'金额错误1'];
        }else{//全部支付
            $order_status=$this->changeOrderAccountInfo($result,$accountId,$type);
            if($order_status['error']!=0) return $order_status;
        }
        return ['error'=>0,'msg'=>$pay_name.'扫码支付结果操作成功'];
    }

    /**
     *
     * @desc 微信扫码支付------改变账期信息
     *
     */
    public function changeOrderAccountInfo($result,$accountId,$type=''){
        if($type=='alipay') $has_pay=$result['total_fee'];
        else  $has_pay=$result['total_fee']/100;

        $list=(new \Home\Model\UserModel())->accountPayInfo($accountId,'account_pay_selected');
        if($list['error']!=0) return $list;
        if($list['data']['account']['total']!=$has_pay) return ['error'=>1,'msg'=>'还款金额不对'];

        $orderSn_arr=[];
        foreach($list['data']['list'] as $k=>$v){
            $orderSn_arr[]=$v['order_sn'];
        }
        $accountErp=M('accounts','erp_')->where(['user_id'=>$list['data']['account']['user_id']])->find();
        if(!$accountErp) return ['error'=>1,'msg'=>'erp账期信息错误'];
        $used_quota=$accountErp['used_quota']-$list['data']['account']['total'];
        $m=M('account_pay_history');
        $m->startTrans();
        $result1=$m->where(['id'=>$accountId])->save(['step'=>2]);
        $result2=M('order_pay_history')->where(['account_pay_selected'=>$accountId])->save(['account_pay_id'=>$accountId]);
        $result3=M('order')->where(['order_sn'=>['in',$orderSn_arr],'pay_type'=>2,'ship_status'=>['in',[1,2,3]]])->save(['pay_status'=>2]);
        $result5=M('order')->where(['order_sn'=>['in',$orderSn_arr],'pay_type'=>2,'ship_status'=>4])->save(['pay_status'=>2,'is_comment'=>1,'order_status'=>3]);
        $result4=M('accounts','erp_')->where(['user_id'=>$list['data']['account']['user_id']])->save(['used_quota'=>$used_quota]);
        if($result1!==false&&$result2!==false&&$result3!==false&&$result4!==false&&$result5!==false){
            $m->commit();
            return ['error'=>0,'msg'=>'账期支付数据成功'];
        }else{
            $m->rollback();
            return ['error'=>1,'msg'=>'账期支付数据失败'];
        }
    }

    /*
     * 支付宝
     */
    public function alipay(){
        $post=I('post.');
        $order_account_id=isset($post['order_account_id'])?$post['order_account_id']:'';

        $payInfo=[];
        if($post['order_sn']){//商城订单支付
            $info=$this->orderPayInfo($post['order_sn']);
            if($info['error']!=0) $this->error($info['msg'],U('Home/order/myOrder'),3);
            $payInfo=$info['data'];

        }else if($post['active']=='account'){//账期还款支付
            $account=D('user')->orderToAccountInfo($post['orderSn_arr']);
            if($account['error']!=0) return $account;
            $one=M('account_pay_history')->field('id')->where(['user_id'=>session('userId'),'step'=>1])->find();
            if(!$one) return ['error'=>1,'msg'=>'账期还款信息错误'];

            $time=time();
            $out_trade_no=$time.mt_rand(1000,9999).$one['id'].'2';//微信扫码订单号组成：时间挫-商城订单号-支付类型(长度小于等于32)
            $body='玖隆芯城账期：'.$out_trade_no;
            $payInfo['out_trade_no']=$out_trade_no;
            $payInfo['price']=(int)($account['data']['total']*100);//未支付总金额
            $payInfo['body']= $body;
        }else{
            $this->error('未定义的支付宝扫码支付',U('Home/order/myOrder'),3);
        }

        $data=array(
            'out_trade_no'=>$payInfo['out_trade_no'],//订单号
            'price'=>round($payInfo['price'],0)/100,//支付金额
            'subject'=>$payInfo['body']
        );
        alipay($data);
    }

    /*
     * 支付宝
     */
    public function alipayQRcode(){
       $this->display();
    }


    /*
     * 银联网关支付
     */
    public function wapPay(){
        $request=I('post.');
        $order_account_id=isset($request['order_account_id'])?$request['order_account_id']:'';

        $merId=C('WAPPAY_CONFIG.MERID');
        $txnTime=date('Ymdhis',time());
        $payInfo=[];

        if($request['order_sn']){//商城订单支付
            $info=$this->orderPayInfo($request['order_sn']);
            if($info['error']!=0) $this->error($info['msg'],U('Home/order/myOrder'),3);
            $payInfo=$info['data'];

        }else if($request['active']=='account'){//账期还款支付
            $account=D('user')->orderToAccountInfo($request['orderSn_arr']);
            if($account['error']!=0) return $account;
            $one=M('account_pay_history')->field('id')->where(['user_id'=>session('userId'),'step'=>1])->find();
            if(!$one) return ['error'=>1,'msg'=>'账期还款信息错误'];

            $time=time();
            $out_trade_no=$time.mt_rand(1000,9999).$one['id'].'2';//微信扫码订单号组成：时间挫-商城订单号-支付类型(长度小于等于32)
            $body='玖隆芯城账期：'.$out_trade_no;
            $payInfo['out_trade_no']=$out_trade_no;
            $payInfo['price']=(int)($account['data']['total']*100);//未支付总金额
            $payInfo['body']= $body;

        }else{
            die('未定义的支付宝扫码支付');
        }

        $post=[
            'merId' => $merId,		//商户代码，请改自己的测试商户号，此处默认取demo演示页面传递的参数
            'orderId' => $payInfo['out_trade_no'],	//商户订单号，8-32位数字字母，不能含“-”或“_”，此处默认取demo演示页面传递的参数，可以自行定制规则
            'txnTime' => $txnTime,	//订单发送时间，格式为YYYYMMDDhhmmss，取北京时间，此处默认取demo演示页面传递的参数
            'txnAmt' => $payInfo['price'],	//交易金额，单位分，此处默认取demo演示页面传递的参数
        ];

        $this->wapPayExecute($post);
    }


    /*
     * 银联网关支付execute
     */
    public function wapPayExecute($post){

        $path__='/ThinkPHP/Library/Vendor/Wappay';
        header ( 'Content-type:text/html;charset=utf-8' );
        include_once $_SERVER ['DOCUMENT_ROOT'] .$path__ .'/upacp_demo_b2c/sdk/acp_service.php';


        /**
         * 重要：联调测试时请仔细阅读注释！
         *
         * 产品：跳转网关支付产品<br>
         * 交易：消费：前台跳转，有前台通知应答和后台通知应答<br>
         * 日期： 2015-09<br>

         * 版权： 中国银联<br>
         * 说明：以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己需要，按照技术文档编写。该代码仅供参考，不提供编码性能规范性等方面的保障<br>
         * 提示：该接口参考文档位置：open.unionpay.com帮助中心 下载  产品接口规范  《网关支付产品接口规范》，<br>
         *              《平台接入接口规范-第5部分-附录》（内包含应答码接口规范，全渠道平台银行名称-简码对照表)<br>
         *              《全渠道平台接入接口规范 第3部分 文件接口》（对账文件格式说明）<br>
         * 测试过程中的如果遇到疑问或问题您可以：1）优先在open平台中查找答案：
         * 							        调试过程中的问题或其他问题请在 https://open.unionpay.com/ajweb/help/faq/list 帮助中心 FAQ 搜索解决方案
         *                             测试过程中产生的7位应答码问题疑问请在https://open.unionpay.com/ajweb/help/respCode/respCodeList 输入应答码搜索解决方案
         *                          2） 咨询在线人工支持： open.unionpay.com注册一个用户并登陆在右上角点击“在线客服”，咨询人工QQ测试支持。
         * 交易说明:1）以后台通知或交易状态查询交易确定交易成功,前台通知不能作为判断成功的标准.
         *       2）交易状态查询交易（Form_6_5_Query）建议调用机制：前台类交易建议间隔（5分、10分、30分、60分、120分）发起交易查询，如果查询到结果成功，则不用再查询。（失败，处理中，查询不到订单均可能为中间状态）。也可以建议商户使用payTimeout（支付超时时间），过了这个时间点查询，得到的结果为最终结果。
         */

        $params = array(

            //以下信息非特殊情况不需要改动
            'version' => \com\unionpay\acp\sdk\SDKConfig::getSDKConfig()->version,                 //版本号
            'encoding' => 'utf-8',				  //编码方式
            'txnType' => '01',				      //交易类型
            'txnSubType' => '01',				  //交易子类
            'bizType' => '000201',				  //业务类型
            'frontUrl' =>  \com\unionpay\acp\sdk\SDKConfig::getSDKConfig()->frontUrl,  //前台通知地址
            'backUrl' => \com\unionpay\acp\sdk\SDKConfig::getSDKConfig()->backUrl,	  //后台通知地址
            'signMethod' => \com\unionpay\acp\sdk\SDKConfig::getSDKConfig()->signMethod,	              //签名方法
            'channelType' => '08',	              //渠道类型，07-PC，08-手机
            'accessType' => '0',		          //接入类型
            'currencyCode' => '156',	          //交易币种，境内商户固定156

            //TODO 以下信息需要填写
            'merId' => $post["merId"],		//商户代码，请改自己的测试商户号，此处默认取demo演示页面传递的参数
            'orderId' => $post["orderId"],	//商户订单号，8-32位数字字母，不能含“-”或“_”，此处默认取demo演示页面传递的参数，可以自行定制规则
            'txnTime' => $post["txnTime"],	//订单发送时间，格式为YYYYMMDDhhmmss，取北京时间，此处默认取demo演示页面传递的参数
            'txnAmt' => $post["txnAmt"],	//交易金额，单位分，此处默认取demo演示页面传递的参数

            // 订单超时时间。
            // 超过此时间后，除网银交易外，其他交易银联系统会拒绝受理，提示超时。 跳转银行网银交易如果超时后交易成功，会自动退款，大约5个工作日金额返还到持卡人账户。
            // 此时间建议取支付时的北京时间加15分钟。
            // 超过超时时间调查询接口应答origRespCode不是A6或者00的就可以判断为失败。
            'payTimeout' => date('YmdHis', strtotime('+15 minutes')),

            // 请求方保留域，
            // 透传字段，查询、通知、对账文件中均会原样出现，如有需要请启用并修改自己希望透传的数据。
            // 出现部分特殊字符时可能影响解析，请按下面建议的方式填写：
            // 1. 如果能确定内容不会出现&={}[]"'等符号时，可以直接填写数据，建议的方法如下。
            //    'reqReserved' =>'透传信息1|透传信息2|透传信息3',
            // 2. 内容可能出现&={}[]"'符号时：
            // 1) 如果需要对账文件里能显示，可将字符替换成全角＆＝｛｝【】“‘字符（自己写代码，此处不演示）；
            // 2) 如果对账文件没有显示要求，可做一下base64（如下）。
            //    注意控制数据长度，实际传输的数据长度不能超过1024位。
            //    查询、通知等接口解析时使用base64_decode解base64后再对数据做后续解析。
            //    'reqReserved' => base64_encode('任意格式的信息都可以'),

            //TODO 其他特殊用法请查看 special_use_purchase.php
        );

        \com\unionpay\acp\sdk\AcpService::sign ( $params );
        $uri = \com\unionpay\acp\sdk\SDKConfig::getSDKConfig()->frontTransUrl;
        $html_form = \com\unionpay\acp\sdk\AcpService::createAutoFormHtml( $params, $uri );
        echo $html_form;
    }



    public function test222(){
        S('wechat_notify_result',2017101900002);
    }



}