<?php

// +----------------------------------------------------------------------
// | FileName:   UserController.class.php
// +----------------------------------------------------------------------
// | Dscription: 会员模块控制器
// +----------------------------------------------------------------------
// | Date:  2017/7/31 14:35
// +----------------------------------------------------------------------
// | Author: showkw <showkw@163.com>
// +----------------------------------------------------------------------

namespace Home\Controller;

use Common\Controller\UploadController as upload;
use Common\Controller\SmsController as sms;

class UserController extends HomeController
{
	use upload;
	use sms;
	
	private $_model;
	
	//初始化
	protected function _initialize()
	{
		parent::_initialize(); // TODO: Change the autogenerated stub
		//		!is_login() && redirect(U('Home/Account/login'));
		$this->_model = D( 'User' );
		//dump(session());
		!is_login() && redirect( U( 'Home/Account/login' ) );
		$user_id = session( 'userId' );
		
		$userType = session('userType');
		if( $userType == 1 ){
			$key = 'ssid_'.$user_id;
			if(S($key)){
				$ssid = S($key);
				if( $this->ssid !== $ssid ){
					session(null);
					S($key,null);
					redirect(U('Home/Account/login', ['isRelogin'=>1]));
				}
			}
		}
		
		$order_m=new \Home\Controller\OrderController();//企业子账号信息
		$companySons=$order_m->companySons();
		if($companySons['error']==0){
			$users=$companySons['data'];
			$user_id=['in',$users];
		}
		
		//查询用户待付款订单条数
		$noPay_list = D( 'order' )->where( [ 'user_id' => $user_id, 'pay_status' => 0, 'order_status'=>['in',[0,1]] ] )->select();
		$noPayNum = count($noPay_list);
		$this->assign('noPayNum', $noPayNum);
		
		//查询待发货条数
		$noShip_list = D( 'order' )->where( [ 'user_id' => $user_id, 'ship_status' => 0, 'order_status'=>['in', [0,1,2]] ] )->select();
		$noShipNum = count($noShip_list);
		$this->assign('noShipNum', $noShipNum);
		
		//查询待收货条数
		$noDelivery_list = D( 'order' )->where( [ 'user_id' => $user_id,'order_status'=>['in', [0,1,2]], 'ship_status' =>['in', [1,2,3]]  ] )->select();
		$noDeliveryNum = count($noDelivery_list);
		$this->assign('noDeliveryNum', $noDeliveryNum);
		
		//查询待评价条数
		$noRelease_list = D( 'order' )->where( [ 'user_id' => $user_id, 'order_status' => 3, 'is_comment'=>1 ] )->select();
		$noReleaseNum = count($noRelease_list);
		$this->assign('noReleaseNum', $noReleaseNum);
	}
	
	/*
	 *  个人中心首页
	 */
	public function index()
	{
		//获取用户id
		$user_id = session( 'userId' );
		$user_id_origin=$user_id;
		$info = session('userInfo');
		$quotaData = D('user_account')->where(['user_id'=>$user_id])->find();
		if( $quotaData ){
			$orderQuota = D('user_order_account')->where(['user_account_id'=>$quotaData['id']])->order('id desc')->find();
			if( $orderQuota ){
				$quota = $orderQuota['quota']-$orderQuota['quota_used'];
			}else{
				$quota = $quotaData['quota'];
			}
		}else{
			$quota = '0.00';
		}
		$this->assign('quota',$quota);
		if ( session( 'userType' ) == 1 ) {
			$this->assign( 'type', session( 'userType' ) );
			$this->assign( 'info', $info );
		} else if ( session( 'userType' ) == 2 || session( 'userType' ) == 20 ) {
			
			if(session( 'userType' ) == 20){
				$user_son=D('user_son')->where(['user_id'=>$user_id])->find();
				$user_id=$user_son['p_id'];
			}
			//企业中心
			$company_info = D( 'user_company' )->where( [ 'user_id' => $user_id ] )->find();
			$user_account =  R('Home/Order/lastAccountInfo');
			$user_info = D( 'user' )->where( [ 'user_id' => $user_id_origin ] )->find();
			$account_quota = isset( $user_account[ 'quota' ] ) ? $user_account[ 'quota' ] : 0;
			$this->assign( 'last_login', $user_info[ 'last_time' ] );//最后登录时间
			$this->assign( 'quota', $account_quota );//账期额度
			$this->assign( 'company_info', $company_info );//公司信息
			
			$users='';
			$companySons=R('Home/Order/companySons');//企业子账号信息
			if($companySons['error']==0){
				$users=$companySons['data'];
			}
			$order_list = D( 'order' )->where( [ 'user_id' => ['in',$users], 'order_status' => [ 'eq', 3 ] ] )->order( 'id desc' )->limit( 0, 10 )->select();
			if ( $order_list ) {
				$order_sn_array = [];
				$order_kd_arr = [];
				foreach ( $order_list as $k => $v ) {
					$order_sn_array[] = $v[ 'order_sn' ];
					$order_kd_arr[ $v[ 'order_sn' ] ][ 'delivery_code' ] = $v[ 'delivery_code' ];
					$order_kd_arr[ $v[ 'order_sn' ] ][ 'delivery_num' ] = $v[ 'delivery_num' ];
					$order_kd_arr[ $v[ 'order_sn' ] ][ 'order_sn' ] = $v[ 'order_sn' ];
				}
				$order_goods = D( 'order_goods as og' )->field( 'og.*,prd.img' )->join( 'dx_product_detail as prd on prd.p_id=og.p_id' )->where( [ 'og.order_sn' => [ 'in', $order_sn_array ] ] )->select();
				$goods_sn = [];
				foreach ( $order_goods as $k => $v ) {
					$goods_sn[ $v[ 'order_sn' ] ] = $v;
				}
			}
		}
		
		$delivery = $this->myDelivery();
		$this->assign( 'delivery', $delivery );
		//浏览历史
		$hisArr = M('user_history')->where(['user_id'=>$user_id_origin])->find();
		$hisArr = json_decode($hisArr['his'], true );
		//截取6条
		$hisArr = array_slice( $hisArr, 0, 6 );
		$hisData = [];
		if( $hisArr ){
			if( !is_array($hisArr) ){
				$hisArr[] = $hisArr;
			}
			$productPrice = $this->productPrice( $hisArr );
			if( (int)$productPrice['error'] === 0){
				foreach( $productPrice['data'] as $k=>$v ){
					$last_price=array_pop($v);
					$field = 'p.id,p.p_sign,p.parameter,p.package';
					$where = [ 'p.id' => $k , 'is_online'=>1];
					$tmp = M( 'product' )->alias( 'p' )->field( $field )->where( $where )->find();
					if($tmp['package']){
						$cover=M('product_package_img')->where(['package'=>$tmp['package']])->find();
						$tmp['cover_image']=$cover['img'];
					}else{
						$tmp['cover_image']='';
					}
					$tmp['price'] =$last_price['price'];
					$hisData[] = $tmp;
				}
			}
		}
		if( empty( $hisData ) ){
			$pro = D('product');
			$field = 'p.id,p.p_sign,p.sell_num,p.parameter,p.cover_image,c.cate_name, b.brand_name,p.package';
			$join = '__CATEGORY__ as c On c.id = p.cate_id';
			$join2 = '__BRAND__ as b On b.id = p.brand_id';
			$data = $pro->alias('p')->field($field)->join($join, 'LEFT')->join($join2, 'LEFT')->where(['is_online'=>1])->order('p.sell_num DESC')->limit(6)->select();
			foreach( $data as $k=>$v ){
				print_r();
				$im=M('product_package_img')->where(['package'=> $data[$k]['package']])->find();
				if($im){
					$data[$k]['cover_image'] = $im['img'];
				}else{
					$data[$k]['cover_image'] = '';
				}
				$prices = M('product_price')->field('id,p_id,line,lft_num start,right_num end,price_ratio,unit_price price')->where(['p_id'=>$v['id']])->select();
				$last_prices = array_pop($prices);
				$data[$k]['price'] = $last_prices['price'];
			}
			$this->assign('hot',$data);
		}
		$this->assign( 'history', $hisData );
		$this->assign( 'isUserIndex', 1 );
		$this->display();
	}
	
	
	/*
	 * 我的物流
	 *
	 */
	public function myDelivery()
	{
		//查询当前用户的所有的待收货 或者已收货
		$user_id = session( 'userId' );
		$where['user_id'] = ['eq',$user_id];
		$where['ship_status'] = ['in', [1,2,3]];
		$where['ship_type'] = ['in',[1,2]];
		$orderList = M('order')->field('order_sn,ship_type')->where( $where )->select();
		//查询商品信息
		foreach ( $orderList as $key => $order ) {
			$join = '__PRODUCT__ as p ON p.id = g.p_id';
            $join1 = 'dx_product_package_img as ppi ON ppi.package= p.package';
			$goods = M( 'order_goods' )->alias( 'g' )->field('g.p_id,p.p_sign,ppi.img as cover_image,order_sn')->join( $join, 'left' )->join( $join1, 'left' )->where( [ 'order_sn' => $order[ 'order_sn' ] ] )->select();
			$orderList[ $key ][ 'goods' ] = $goods;
			$order_sn = $order[ 'order_sn' ];
			$kdList = M('order_sync_hy')->where(['order_no'=>$order_sn,'is_kd'=>1,'is_recive'=>0])->select();
			if( !$kdList ){
				unset( $orderList[ $key ] );
			}
			foreach( $kdList as $k=>$kd ){
				//查询物流信息
				$traces = A( 'kd' )->info( $kd['kd_code'], $kd['hy_num'], $order_sn );
				if ( !$traces ) {
					unset( $orderList[ $key ] );
				} else {
					$orderList[ $key ][ 'traces' ][] = [
						'kd_code'=>$kd['kd_code'],
						'kd_num'=>$kd['hy_num'],
						'kd_name'=>$kd['hy_name'],
						'traces'=>$traces['traces']
					];
				}
			}
		}
		return $orderList;
	}
	
	/*
	 * 用户资料
	 *
	 */
	public function info()
	{
		$user = M('user');
		$user_id = session( 'userId' );
		$session = session();
		
		$field = 'u.*,n.*';
		$join = '__USER_NORMAL__ AS n ON n.user_id = u.id';
		$info = $user->alias('u')->field($field)->join($join,'LEFT')->where(['u.id'=>$user_id])->find();
		
		if($info['company_self']&&$session['userType']==20){//企业子帐号
			$companySelf=json_decode($info['company_self']);
			$info=array_merge($info,$companySelf);
		}

		$userAccountChange=M('user_account_change')->where(['user_id'=>session('userId')])->find();
		
		$this->assign( 'info', $info );
        $this->assign( 'userAccountChange', $userAccountChange?1:2 );
		$this->assign('isInfo',1);
		if ( session( 'userType' ) == 1 ) {
			$this->display( 'info_normal' );
		} else {
			//企业个人中心
			$this->editCompanyInfo();
		}
	}
	
	/*
	 * 企业信息编辑
	 */
	public function editCompanyInfo()
	{
		$user_id = session( 'userId' );
		$session=session();
		$data = I( 'post.' );
		if($session['userInfo']['user_type']==20){
			
			if ( $data[ 'active' ] == 'edit' ) {
				$save_data=[
					'company_user_name'=>$data[ 'company_user_name' ],
					'company_user_sector'=>$data[ 'company_user_sector' ],
					'company_user_phone'=>$data[ 'company_user_phone' ],
					'user_email'=>$data[ 'user_email' ],
				];
				
				$save_data=['company_self'=>json_encode($save_data)];
				$company_self_result=M('user')->field('company_self')->where(['id'=>$user_id,'user_type'=>20])->save($save_data);
				if($company_self_result===false) die(json_encode(['error'=>1,'msg'=>'failed']));
				
				die(json_encode(['error'=>0,'msg'=>'success']));
			}
			
			$user_p=D('user_son')->where(['user_id'=>$user_id])->find();
			$company_info = D( 'user_company' )->where( [ 'user_id' => $user_p['p_id'] ] )->find();
			
			$userInfo=M('user')->field('company_self')->where(['id'=>$user_id])->find();
			$company_self=json_decode($userInfo['company_self'],true);
			if($company_self) $company_info=array_merge($company_info,$company_self);
			
			$this->assign( 'company_info', $company_info );
			$this->display( 'info_company' );
			die();
		}
		
		$old_avator = session('userInfo.avator');
		//		$data=[
		//			'company_name'=>'company_name',
		//			'company_area'=>'company_name',
		//			'company_address'=>'company_name1',
		//			'company_people_num'=>'company_name',
		//			'company_user_name'=>'company_name',
		//			'company_user_sector'=>'company_name',
		//			'company_user_mobile'=>'company_name',
		//			'company_user_email'=>'466395102@qq.com',
		//			'company_logo'=>'466395102@qq.com',
		//			'active'=>'edit'
		//		];
		if ( $data[ 'active' ] == 'edit' ) {
			//			$header_img = $this->upload();
			//			if ( $header_img[ 'error' ] ) $return = $header_img;
			$rules = [ [ 'company_name', 'require', '企业名称不能为空' ], [ 'company_area', 'require', '企业所在地不能为空' ], [ 'company_address', 'require', '企业详细地址不能为空' ], [ 'company_people_num', 'require', '企业人数不能为空' ], [ 'company_user_name', 'require', '联系人不能为空' ], [ 'company_user_sector', 'require', '所在部门不能为空' ], [ 'company_user_mobile', 'require', '企业联系人电话不能为空' ] ];
			$add_data = [ 'company_phone_num' => $data[ 'company_phone_num' ],'company_name' => $data[ 'company_name' ], 'company_area' => $data[ 'company_area' ], 'company_address' => $data[ 'company_address' ], 'company_people_num' => $data[ 'company_people_num' ], 'company_user_name' => $data[ 'company_user_name' ], 'company_user_sector' => $data[ 'company_user_sector' ], 'company_user_phone' => $data[ 'company_user_phone' ], 'company_user_email' => $data[ 'user_email' ] ];
			
			$userData = [ 'user_email' => $data[ 'user_email' ], 'avator' => $data['avator']];
			//			if ( $header_img[ 'data' ][ 'fullpath' ] ) $add_data[ 'company_logo' ] = $header_img[ 'data' ][ 'fullpath' ];
			//			$add_data[ 'company_logo' ] = $data['company_logo'];
			$company = M( 'user_company' );
			if ( !$company->validate( $rules )->create( $add_data ) ) die(json_encode( [ 'error' => 1, 'msg' => $company->getError() ]));
			$user_company=M('user_company')->where(['user_id'=>$user_id])->find();
			
			//企业名是否可修改
			$this->assign( 'isedit_user_name', (int)$session['userInfo']['isedit_user_name'] );
			if(!$session['userInfo']['isedit_user_name']){
				unset($add_data['company_name']);
			}
			
			if($user_company){
				$result = M( 'user_company' )->data( $add_data )->where( [ 'user_id' => $user_id ] )->save();
				$result_userInfo=M('user')->data($userData)->where( [ 'id' => $user_id ] )->save();
				//更新缓存
				$this->addUserToSession($user_id);
				if($result !== false){
					if( !empty($old_avator) && $old_avator != $data['avator'] ){
						if( pathinfo($old_avator,PATHINFO_BASENAME) != 'default.png' ){
							unlink(ROOT_PATH.$old_avator);
						}
					}
					die(json_encode(['error'=>0,'msg'=>'更新成功']));
				} else {
					//失败时删除上传的头像
					unlink(ROOT_PATH.$data['avator']);
					die(json_encode(['error'=>1,'msg'=>'更新失败']));
				}
			}else{
				$add_data['user_id']=$user_id;
				$result = M( 'user_company' )->data( $add_data )->add();
				M('user')->data($userData)->where( [ 'user_id' => $user_id ] )->save();
				//更新缓存
				$this->addUserToSession($user_id);
				if($result !== false){
					if( !empty($old_avator) && $old_avator != $data['avator'] ){
						if( pathinfo($old_avator,PATHINFO_BASENAME) != 'default.png' ){
							unlink(ROOT_PATH.$old_avator);
						}
					}
					die(json_encode(['error'=>0,'msg'=>'添加成功']));
				} else {
					//失败时删除上传的头像
					unlink(ROOT_PATH.$data['avator']);
					die(json_encode(['error'=>1,'msg'=>'更新失败']));
				}
			}
		}
		$company_info = M( 'user_company' )->where( [ 'user_id' => $user_id ] )->find();
		$this->assign( 'company_info', $company_info );
		$this->display( 'info_company' );
	}
	
	/*
     * 文件处理
     */
	public function upload( $path = 'header' )
	{
		$upload = new \Think\Upload();// 实例化上传类
		$upload->maxSize = 3145728;// 设置附件上传大小
		$upload->exts = [ 'jpg', 'gif', 'png', 'jpeg' ];// 设置附件上传类型
		$upload->rootPath = './Uploads/'; // 设置附件上传根目录
		$upload->savePath = $path . '/'; // 设置附件上传（子）目录
		// 上传文件
		$info = $upload->upload();
		if ( !$info ) return [ 'error' => 1, 'msg' => '上传失败' ];// 上传错误提示错误信息
		else $file_full_path = 'http://' . $_SERVER[ 'HTTP_HOST' ] . __ROOT__ . '/' . substr( $upload->rootPath, 2 ) . $info[ 'file' ][ 'savepath' ] . $info[ 'file' ][ 'savename' ];
		return [ 'error' => 0, 'msg' => '上传成功', 'data' => [ 'fullpath' => $file_full_path ] ];
	}
	
	/*
	 * 处理修改用户信息
	 *
	 */
	public function changeInfo()
	{
		$user_id = session( 'userId' );
		$old_avator = session('userInfo.avator');
		$post= I( 'post.' );
		$info = [
			'nick_name' => $post['nick_name'],
			'avator'    => $post['avator'],
		];
		if( !empty($post['user_email']) ){
			$info['user_email'] = $post['user_email'];
		}
		$user = M( 'user' );
		$user->startTrans();
		$res = $user->where(['id'=>$user_id])->save( $info );
		$normalData = [
			'real_name' =>$post['real_name'],
			'birthday_year'=>$post['birthday_year'],
			'birthday_mouth'=>$post['birthday_mouth'],
			'birthday_day'  =>$post['birthday_day'],
			'job'           => $post['job'],
			'now_addr'      => $post['now_addr'],
			'address'       => $post['address'],
		];
		foreach( $normalData as $k=>$v){
			if( !$v )
				unset( $normalData[$k] );
		}
		$normalData['sex'] = $post['sex'];
		$normalData[ 'user_id' ] = $user_id;
		
		$has_normal = M('user_normal')->field('user_id')->where(['user_id'=>$user_id])->find();
		
		//已存在信息
		if($has_normal){
			$re = M( 'user_normal' )->where( [ 'user_id' => $user_id ] )->save( $normalData );
		}else{
			$normalData['user_id']=$user_id;
			$re = M( 'user_normal' )->add( $normalData );
		}
		if ( $res !== false && $re !== false ) {
			$pinyin=[
				'customerId_arr'=>[$user_id]
			];
			$pinyin_result=D('Admin/Customer')->updateCompanyNameFirstString($pinyin);//更新拼音
			
			//更新缓存
			$user->commit();
			$this->addUserToSession($user_id);
			if( !empty($old_avator) && $old_avator != $post['avator'] ){
				if( pathinfo($old_avator,PATHINFO_BASENAME) != 'default.png' ){
					unlink(ROOT_PATH.$old_avator);
				}
			}
			$this->ajaxReturnStatus( 0000, '修改成功' );
		} else {
			$user->rollback();
			$avator = $info['avator'];
			//修改失败 删除上传的头像
			unlink(ROOT_PATH.$avator);
			$this->ajaxReturnStatus( 1002, '修改失败' );
		}
	}
	
	
	/*
	 * 个人中心 修改账号密码
	 *
	 */
	public function changePassword()
	{
		if ( IS_POST || IS_AJAX ) {
			$old_pass = I( 'old_pass' );
			$new_pass = I( 'new_pass' );
			$re_pass = I( 're_pass' );
			if ( $new_pass == $old_pass ) {
				$this->ajaxReturnStatus( 1005, '您没有任何修改' );
			}
			$user_id = session( 'userId' );
			$res = $this->_model->field( 'user_pass' )->where( [ 'id' => $user_id ] )->find();
			if ( !hash_check( $old_pass, $res[ 'user_pass' ] ) ) {
				$this->ajaxReturnStatus( 1001, '您输入的当前密码不正确' );
			} else {
				if ( empty( $new_pass ) || empty( $re_pass ) ) {
					$this->ajaxReturnStatus( 1004, '新密码不能为空哦' );
				}
				if ( $new_pass != $re_pass ) {
					$this->ajaxReturnStatus( 1002, '您输入的两次密码不一致' );
				} else {
					$data[ 'user_pass' ] = hash_string( $new_pass );
					$re = $this->_model->where( [ 'id' => $user_id ] )->save( $data );
					if ( $re !== false ) {
						session( null );
						$this->ajaxReturnStatus( 0000, '您的密码修改成功!请您重新登录' );
					} else {
						$this->ajaxReturnStatus( 1003, '系统繁忙!修改失败!' );
					}
				}
			}
		} elseif ( IS_GET ) {
			$this->assign('isChangePassword',1);
			$this->display( 'change_password' );
		}
	}
	
	/*
	 *  检查密码是否合法
	 */
	public function checkPwd()
	{
		$pass = I( 'pass' );
		return R( 'Home/Account/checkPwd', [''] );
	}
	
	/*
	 * 收货地址页面
	 */
	public function delivery_address()
	{
		$get=I('get.');
		$act = I( 'get.act' );
		$aid = I( 'aid' );
		$session = session();
		$user_id = $session['userId'];
		$all_user[]=$user_id;
		
		//子账号获取母账号账期
		if($session['userInfo']['user_type']==20){
			$user_p=M('user_son')->where(['user_id'=>$user_id])->find();
			$all_user[]=$user_p['p_id'];
		}
		
		$addr = M( 'user_order_address' )->where( [ 'user_id' => ['in',$all_user] ] )->order( 'status DESC' )->select();
		foreach ( $addr as $k => $v ) {
			$addr[ $k ][ 'area' ] = $this->getAddressByCode( $v[ 'area_code' ] );
		}
		if ( $act == 'edit' ) {
			$old = $addr[ $aid - 1 ];
			$this->assign( 'old', $old );
		} elseif ( $act == 'normal' ) {
			$data = [ 'status' => 1 ];

			$result1=M( 'user_order_address' )->where( ['user_id'=>$user_id]  )->setField( 'status', 0 );
			$result2=M( 'user_order_address' )->where( [ 'id' => $aid ] )->save( $data );

            if ( $result1 !== false && $result2 !== false){
				$this->ajaxReturnStatus( 0000, '成功' );
			}else{
				$this->ajaxReturnStatus( 1000, '失败' );
			}
		}
		$this->assign( 'addr', $addr );
		$this->assign( 'get', $get );
		$this->assign('isDelivery_address',1);
		$this->display();
	}
	
	
	/*
	 * 验证密码是否正确
	 *
	 */
	public function checkPass()
	{
		$pass = I( 'post.user_pass' );
		$user_id = session( 'userId' );
		$res = M( 'user' )->field( 'user_pass' )->where( [ 'id' => $user_id ] )->find();
		if ( hash_check( $pass, $res[ 'user_pass' ] ) ) {
			$this->ajaxReturnStatus( 0000, '密码正确' );
		} else {
			$this->ajaxReturnStatus( 1000, '密码错误' );
		}
	}
	
	
	/*
	 * 个人中心 修改绑定手机
	 *
	 */
	public function bindPhone()
	{
		$user_id = session( 'userId' );
		$info = $this->_model->field( 'id,user_pass, user_mobile' )->where( [ 'id' => $user_id ] )->find();
		if ( IS_POST || IS_AJAX ) {
			$new_mobile = floatval(I( 'new_mobile' ));
			$mobile_code = I( 'mobile_code' );
			$user_pass = I( 'user_pass' );
			if ( !$this->checkSms( $mobile_code ) ) {
				$this->ajaxReturnStatus( 1001, '验证码不正确' );
			}
			//查询新手机是否存在
			$res = $this->_model->where( [ 'user_mobile' => $mobile_code ] )->find();
			if ( $res ) {
				$this->ajaxReturnStatus( 1002, '手机号码已存在!请检查' );
			} else {
				if ( !hash_check( $user_pass, $info[ 'user_pass' ] ) ) {
					$this->ajaxReturnStatus( 1004, '密码错误!' );
				}
				$data[ 'user_mobile' ] = $new_mobile;
				$re = $this->_model->where(['id'=>$user_id])->data( $data )->save();
				if ( $re !== false ) {
					$this->addUserToSession($user_id);
					$this->ajaxReturnStatus( 0000, '修改成功!' );
				} else {
					$this->ajaxReturnStatus( 1003, '系统繁忙!修改失败!' );
				}
			}
		} else {
			$this->assign('isBindPhone',1);
			$this->assign( 'mobile', $info );
			$this->display( 'binding_phone' );
		}
	}
	
	/*
	 * ajax验证手机号是否注册
	 * @method  post
	 * @param  $user_mobile 手机号码
	 * @return json  返回状态与提示
	 */
	public function ajaxCheckMobile()
	{
		$user = M( 'user' );
		$mobile = floatval( I( 'user_mobile' ) );
		if ( $this->checkMobile( $mobile ) ) {
			$res = $user->field( 'id' )->where( [ 'user_mobile' => $mobile ] )->find();//查询手机号是否存在
			if ( $res ) {
				$this->ajaxReturnStatus( 1000, '手机号码已存在!' ); //存在
			} else {
				$this->ajaxReturnStatus( 0000 ); //不存在
			}
		}
	}
	
	/*
	 * 检查手机号码是否合法
	 */
	public function checkMobile( $mobile )
	{
		$bool = preg_match( '/^1[35789]+\d{9}$/', $mobile, $arr );
		if ( empty( $bool ) ) {
			$this->ajaxReturnStatus( 1000, '手机号码格式不正确' ); //存在
		}
		
		return true;
	}
	
	/*
	 *
	 * 个人中心 收藏夹页面
	 */
	public function favorite()
	{
		$user_id = intval( session( 'userId' ) );
		$data = M( 'user_collect' )->field( 'id,collect' )->where( [ 'user_id' => $user_id ] )->find();
		if ( empty( $data[ 'collect' ] ) ) { //收藏夹空
			$collect = null;
		} else {
			$idArr = json_decode( $data[ 'collect' ], true );
			if( !is_array($idArr) ){
				$idArr[] = $idArr;
			}
			$productPrice = $this->productPrice( $idArr );
			if($productPrice['error']!=0) return [];
			foreach( $productPrice['data'] as $k=>$v ){
				$last_price=array_pop($v);
				$field = 'p.id,p.p_sign,p.parameter,p.package';
				$where = [ 'p.id' => $k , 'is_online'=>1];
				$tmp = M( 'product' )->alias( 'p' )->field( $field )->where( $where )->find();
				if(!$tmp) continue;
				if($tmp['package']){
					$cover=M('product_package_img')->where(['package'=>$tmp['package']])->find();
					$tmp['cover_image']=$cover['img'];
				}else{
					$tmp['cover_image']='';
				}
				$tmp['price'] =$last_price['price'];
				$collect[] = $tmp;
			}
		}
		$page = I( 'get.page' ) ? : 1;
		$count = count( $collect );
		$Page = new \Think\Page( $count, 9 );// 实例化分页类 传入总记录数和每页显示的记录
		$collect = array_slice( $collect, ( ( $page - 1 ) * 9 ), ( ( $page * 9 ) + ( $page - 1 ) ) );
		$show = $Page->show();// 分页显示输出
		$count <= 9 && $show = null;
		$this->assign( 'page', $show );
		$this->assign( 'collect', $collect );
		$this->assign('isFavorite',1);
		$this->display();
	}
	
	/*
	 *
	 * 删除指定收藏夹中商品
	 */
	public function delFavorite()
	{
		$id = I( 'id' );
		$user_id = session( 'userId' );
		$re = M( 'user_collect' )->where( [ 'user_id' => $user_id ] )->find();
		if ( $re[ 'collect' ] ) {
			$collect = json_decode( $re[ 'collect' ], true );
			foreach ( $collect as $k => $v ) {
				if ( $v == $id ) {
					unset( $collect[ $k ] );
				}
				sort( $collect );
			}
			$save[ 'collect' ] = json_encode( $collect );
			//更新
			$res = M( 'user_collect' )->where( [ 'user_id' => $user_id ] )->save( $save );
			if ( $res !== false ) {
				$this->ajaxReturnStatus( 0000, '删除成功' );
			} else {
				$this->ajaxReturnStatus( 10001, '删除失败' );
			}
		} else {
			$this->ajaxReturnStatus( 1000, '指定商品不存在' );
		}
	}
	
	/*
	 * 浏览历史
	 *
	 */
	public function history()
	{
		$user_id = session('userId');
		//$key = 'history_'.$user_id;
		$res = M('user_history')->where(['user_id'=>$user_id])->find();
		$hisArr = json_decode($res['his'], true);
		$data = [];
		if( $hisArr ){
			if( !is_array($hisArr) ){
				$hisArr[] = $hisArr;
			}
			$productPrice = $this->productPrice( $hisArr );
			if( (int)$productPrice['error'] === 0){
				foreach( $productPrice['data'] as $k=>$v ){
					$last_price=array_pop($v);
					$field = 'p.id,p.p_sign,p.parameter,p.package';
					$where = [ 'p.id' => $k , 'is_online'=>1];
					$tmp = M( 'product' )->alias( 'p' )->field( $field )->where( $where )->find();
					if(!$tmp) continue;
					if($tmp['package']){
						$cover=M('product_package_img')->where(['package'=>$tmp['package']])->find();
						$tmp['cover_image']=$cover['img'];
					}else{
						$tmp['cover_image']='';
					}
					$tmp['price'] =$last_price['price'];
					$data[] = $tmp;
				}
			}
		}
		$page = I( 'get.page' ) ? : 1;
		$count = count( $data  )-1;
		$Page = new \Think\Page( $count, 12 );// 实例化分页类 传入总记录数和每页显示的记录
		$data = array_slice( $data, ( ( $page - 1 ) * ( 12 + 1 ) ), ( ( $page * 12 ) + ( $page - 1 ) ) );
		$show = $Page->show();// 分页显示输出
		$count > 12 && $this->assign( 'page', $show );
		$this->assign('history',$data);
		$this->assign('isHistory',1);
		$this->display();
	}
	
	/*
	 *  删除指定历史记录中商品
	 *
	 */
	public function delHistory()
	{
		$id = intval(I( 'id' ));
		$user_id = session( 'userId' );
		//$key = 'history_'.$user_id;
		$hisArr = M('user_history')->where(['user_id'=>$user_id])->find();
		//$hisArr = json_decode(session($key), true);
		if ( $hisArr ) {
			$hisArr_his=json_decode($hisArr['his'], true);
			foreach ( $hisArr_his as $k => $v ) {
				if ( $v == $id ) {
					unset( $hisArr_his[ $k ] );
				}
			}
			//            sort( $hisArr_his );
			$hisArr_his=json_encode($hisArr_his, true);
			//session($key, json_encode($hisArr));
			$res = M('user_history')->where(['user_id'=>$user_id])->save(['his'=>$hisArr_his]);
			if( $res !== false ){
				$this->ajaxReturnStatus( 0000, '删除成功' );
			}else{
				$this->ajaxReturnStatus(1000, '删除失败');
			}
		} else {
			$this->ajaxReturnStatus( 1000, '指定商品不存在' );
		}
	}
	
	/*
	 * 个人中心意见反馈
	 */
	public function feedback()
	{
		if( IS_POST && IS_AJAX ){
			$feed = I('');
			$content = $feed['content'];
			$user_id = session('userId');
			$re = M('feedback')->add(['content'=>$content, 'user_id'=>$user_id]);
			if( $re ){
				$this->ajaxReturnStatus( 000, '发送成功!感谢您宝贵的意见');
			}else{
				$this->ajaxReturnStatus(1000, '系统繁忙!反馈失败');
			}
		}else{
			$this->assign('isFeedback',1);
			$this->display();
		}
	}
	
	
	/*
	 * 绑定第三方账号页面
	 */
	public function bindAccount($act=0, $msg='')
	{
		//获取当前用户已经绑定的平台信息
		$oauth = D('user_oauth');
		$user_id = session('userId');
		$data = $oauth->field('type')->where('user_id='.$user_id)->select();
		foreach( $data as $k=>$v ){
			switch( $v['type'] ) {
				case 'qq':
					$this->assign('qq', 1);
					break;
				case 'wechat':
					$this->assign('wechat', 1);
					break;
				case 'sina':
					$this->assign('sina', 1);
					break;
			}
		}
		if( $act == 1  || $act == 2){
			$this->assign('success', $act);
			$this->assign('msg', $msg);
		}
		$this->assign('isBindAccount',1);
		$this->display('bind_account');
	}
	
	/*
	 * 解绑第三方账号操作
	 */
	public function cancleBind()
	{
		$user_id = session('userId');
		$type = I('type')?strtolower(I('type')):null;
		empty($type) && $this->ajaxReturnStatus(1000, '参数错误');
		$re = D('user_oauth')->where(['user_id'=>$user_id, 'type'=>$type])->delete();
		
		if( $re ){
			$this->bindAccount(1,'解绑成功');
			//$this->ajaxReturnStatus(0000, '解绑成功');
		}else{
			$this->bindAccount(2,'解绑失败');
			//$this->ajaxReturnStatus(1000, '解绑失败');
		}
	}
	
	/*
	 * 企业子账户列表
	 */
	public function bypassAccount()
	{
		$session = session();
		if($session['userInfo']['user_type']==2){
			$where=[
				"id in (select user_id from dx_user_son where p_id = $session[userId])"
			];
			$field="id,nick_name,user_mobile,(select is_delete from dx_user_son where dx_user.id = dx_user_son.user_id) as is_delete";
			$sons_info=M('user')->field($field)->where($where)->select();
			$this->assign('sons_info',$sons_info);
		}
		$this->assign('isBypassAccount',1);
		$this->display();
	}
	
	/**
	 * @desc 议价的报备信息列表
	 */
	public function productReportList(){
		$request=I('get.');
		$page=$request['page']?$request['page']:1;
		$pageSize=$request['pageSize']?$request['pageSize']:C('PAGE_PAGESIZE');
		$where='';
		if(isset($request['p_sign'])&&$request['p_sign']) $where['p_sign']=['like',"%$request[p_sign]%"];
		$where['user_id']=session('userId');
		
		$list=(new \Admin\Model\ProductbargainModel())->productReportList($where,$page,$pageSize,'',['sys_uid','check_man'],true);
		$list['data']['page'] = $page;
		$list['data']['pageSize'] = $pageSize;
		$this->assign('list',$list['data']);
		$this->assign('request',$request);
		$this->assign('isReport',1);
		$this->display();
	}
    /**
     * @desc 积分
     */
    public function points(){
        $request=I('get.');
        $page=$request['page']?$request['page']:1;
        $pageSize=$request['pageSize']?$request['pageSize']:C('PAGE_PAGESIZE');
        $where='';
        if(isset($request['p_sign'])&&$request['p_sign']) $where['p_sign']=['like',"%$request[p_sign]%"];
        $where['user_id']=session('userId');

        $list=(new \Admin\Model\ProductbargainModel())->productReportList($where,$page,$pageSize,'',['sys_uid','check_man'],true);
        $list['data']['page'] = $page;
        $list['data']['pageSize'] = $pageSize;
        $this->assign('list',$list['data']);
        $this->assign('request',$request);
        if($request["Bom"]){
            $this->assign('isPointsBom',1);
            $this->display("points/pointsBom");
        }else{
            $this->assign('isPoints',1);
            $this->display("points/points");
        }
    }
	
	/**
	 * @desc 前端测试账号切换
	 */
	public function userLoginChange(){
		if(IS_AJAX){
			if(!session('adminId')){
				die(json_encode(['error'=>1,'msg'=>'field']));
			}
			
			$must_where=[];
			$session=session();
			$userM=new \Admin\Model\UserModel();
			//业务部门
			$productPowers=$userM->departmentDataPower('order',$session['adminInfo']['department_id'],'','sys_uid');
			if($productPowers['error']!=0) return $productPowers;
			if(isset($productPowers['data']['must_where'])){
				$customers=$userM->adminSaleCustomerPower($productPowers['data']['must_where'],'id');
				if($customers['error']!=0) return $customers;
				$must_where['id']=['in',$customers['data']];
			}
			
			if(IS_POST){
				$request=I('post.');
				if($customers['error']!=0&&!in_array($request['user_id'],$customers['data'])){
					die(json_encode(['error'=>1,'msg'=>'权限设置']));
				}
				//session存储用户
				$this->addUserToSession($request['user_id']);
				die(json_encode(['error'=>0,'msg'=>'success']));
			}
			
			$get=I('get.');
			$page=$get['page']?$get['page']:1;
			$pageSize=$get['pageSize']?$get['pageSize']:C('PAGE_PAGESIZE');
			$where='';
			if(isset($get['name'])) $where=['user_name'=>['like',"%$get[name]%"],'fcustjc'=>['like',"%$get[name]%"],'nick_name'=>['like',"%$get[name]%"],'_logic'=>'or'];
			
			if($must_where) $where= $where?[$where,$must_where]:$must_where;
			$list=M('user')->where($where)->field('id,user_name,if(fcustjc="",nick_name,fcustjc) as nick_name')->limit(($page-1)*$pageSize,$pageSize)->select();
			die(json_encode($list));
		}
	}
	
	
	/**
	 * @desc 客户订单报表excel
	 */
	public function myStatement(){
		$request=I('get.');
		$session=session();
		$userId=$session['userId'];
		$request['page']=$page=isset($request['page'])?$request['page']:1;
		$request['pageSize']=$pageSize=isset($request['pageSize'])?$request['pageSize']:50;
		
		$user_id=[$userId];
		if($session['userType']==2){
			$order_m=new \Home\Controller\OrderController();//企业子账号信息
			$companySons=$order_m->companySons();
			if($companySons['error']==0){
				$user_id=$companySons['data'];
			}
		}
		
		$where=[
			'do.user_id'=>['in',$user_id],
		];
		
		if(isset($request['p_sign'])){
			$where[]="do.order_sn in (select order_sn from dx_order_goods where p_id in (select id from dx_product where p_sign like '%".$request['p_sign']."%' or order_sn like '%".$request['p_sign']."%') group by order_sn)";
		}
		if(isset($request['time_start'])||isset($request['time_end'])){
			$time_start=$request['time_start']?:'0000-00-00 00:00:00';
			$time_end=$request['time_end']?date('Y-m-d H:i:s',strtotime("$request[time_end] + 1 day")):'3000-00-00 00:00:00';
			$where['do.create_at']=['between',[$time_start,$time_end]];
		}
		
		if(isset($request['order_status'])&&$request['order_status']!=='') $where['do.order_status']=(int)$request['order_status'];
		if(isset($request['pay_status'])&&$request['pay_status']) $where['do.pay_status']=$request['pay_status'];
		if(isset($request['ship_status'])&&$request['ship_status']) $where['do.ship_status']=$request['ship_status'];
		
		$where[]=[
			'do.order_status'=>['in',[0,1,2,3]]
		];
		
		$field='do.order_sn,do.order_status,do.ship_status,do.create_at,do.pay_status,do.total_origin,do.total';
		$field.=',(dog.p_num-dog.knot_num-dog.retreat_num) as current_num,dog.erp_num,dog.p_id,dog.p_num,dog.knot_num,dog.pay_subtotal,dog.subtotal,(select p_sign from dx_product where id = dog.p_id) as p_sign';
		$list=M('order')->alias('do')
			->field($field)
			->join('left join dx_order_goods as dog on do.order_sn=dog.order_sn')
			->where($where)
			->order('do.create_at desc,do.order_sn')
			->select();
		
		$orderSn_arr=[];
		foreach($list as $k=>$v){
			$orderSn_arr[]=$v['order_sn'];
		}

		$orderPay_where=[//定单结算金额
						 [
							 'type'=>['neq',2],
							 [
								 'type'=>2,
								 'account_pay_id'=>['neq',0],
							 ],
							 '_logic'=>'or'
						 ],
						 'order_sn'=>['in',$orderSn_arr]
		];
		$orderPay=M('order_pay_history')->field('sum(pay_amount) as orderHasPay,order_sn')->where($orderPay_where)->group('order_sn')->select();
		$orderPay_arr=[];
		$orderPay_total=0;

        $hasOrderPay=hasOrderPay($orderSn_arr);//定单已付款
        if($hasOrderPay){
            foreach($orderSn_arr as $k=>$v){
                $orderPay_arr[$v]=$hasOrderPay[$k];
                $orderPay_total+=$hasOrderPay[$k];
            }
        }

		if(!$list){
			if(IS_AJAX){//表格下载
				if($request['excelDownload']=='excelDownload'){
					die(json_encode(['error'=>1,'msg'=>'没有数据']));
				}
			}
			
			$this->assign('orderData', []);
			$this->assign('request', $request);
			$this->assign('isStatement', 1);
			$this->display();
			die();
		}
		
		$pSign_total=[];
		$money_total=0;//总金额
		
		$shipStatus_arr=[//运输状态，0待发货，1已部分发货，2已全部发货，3已部分收货，4已全部收货，100初始值
						 0=>'待发货',
						 1=>'已部分发货',
						 2=>'已全部发货',
						 3=>'已部分收货',
						 4=>'已全部收货',
						 100=>'',
		];
		$orderStatus_arr=[//订单状态,0新单，1锁单（订单商品未进项，客户选开票，1订单进入人工审核），2部分完成（有付款），3完成（已收货），100已删除,101客户申请定单取消
						  0=>'新单',
						  1=>'锁单',
						  2=>'部分完成',
						  3=>'完成',
		];
		$payStatus_arr=[//支付状态,0未付款，1部分支付，2全部支付
						0=>'未付款',
						1=>'部分支付',
						2=>'全部支付',
		];
		
		$orderTotal=[];
		foreach($list as $k=>$v){
			foreach($v as $k2=>$v2){
				if($k2=='ship_status') $list[$k]['ship_status']=$shipStatus_arr[$v2];
				if($k2=='pay_status') $list[$k]['pay_status']=$payStatus_arr[$v2];
				if($k2=='order_status') $list[$k]['order_status']=$orderStatus_arr[$v2];
			}
			
			$orderTotal[$v['order_sn']]['show_total_current']+=$v['current_num']*$v['subtotal']/$v['p_num'];//显示
			$orderTotal[$v['order_sn']]['total_current']+=$v['current_num']*$v['pay_subtotal']/$v['p_num'];//实付
			
			$list[$k]['orderHasPay']=$orderPay_arr[$v['order_sn']]?:0;
			
			$pSign_total[$v['p_sign']]['num_total_current']+=$v['current_num'];//现在的数量
			$pSign_total[$v['p_sign']]['money_total_current']+=$v['current_num']*$v['pay_subtotal']/$v['p_num'];//现在要实付的
			$pSign_total[$v['p_sign']]['p_sign']=$v['p_sign'];
			$money_total+=$v['current_num']*$v['pay_subtotal']/$v['p_num'];//现在要实付的
		}
		
		foreach($list as $k=>&$v){
			$v['show_total_current']=$orderTotal[$v['order_sn']]['show_total_current'];
			$v['total_current']=$orderTotal[$v['order_sn']]['total_current'];
		}
		
		$orderData=[
			'pSign_total'=>$pSign_total,//型号统计
			'money_total'=>$money_total,//现在要付的总金额
			'money_total_has_pay'=>$orderPay_total,//已付总金额
			'list'=>$list,
		];
		
		if(IS_AJAX){//表格下载
			if($request['excelDownload']=='excelDownload'){
				Vendor('PHPExcel.PHPExcel');
				$Tool=D('ToolWare','Design');
				$result=$Tool->set('customerOrderExcel',D('CustomerOrderExcel','Design'),$orderData)->action(['customerOrderExcel'])->result;
				
				die(json_encode($result['customerOrderExcel'],JSON_UNESCAPED_SLASHES));
			}
		}
		
		$list_show=[];
		//        foreach($list as $v){//有问题的//order_sn=>1806281160037
		//            $list_show[$v['order_sn']][]=$v;
		//        }
		foreach($orderData['list'] as $v22){
			$list_show[$v22['order_sn']][]=$v22;
		}
		
		$Page = new \Think\Page( count($list_show), $pageSize );// 实例化分页类 传入总记录数和每页显示的记录数
		$Page->setConfig( 'prev', '<上一页' );
		$Page->setConfig( 'next', '下一页>' );
		$show = $Page->show();// 分页显示输出
		if ( count($list_show) > $pageSize ) $this->assign( 'page', $show );// 赋值分页输出
		
		$list_show=array_slice($list_show,($page-1)*$pageSize,$pageSize);//分页
		$orderData['list']=$list_show;
		
		$this->assign('orderData', $orderData);
		$this->assign('request', $request);
		$this->assign('isStatement', 1);
		$this->display();
	}
    /**
     * @desc 样品管理
     */
    public function sampleManage(){
        $request=I('get.');
        $session=session();
        $userId=$session['userId'];
        $request['page']=$page=isset($request['page'])?$request['page']:1;
        $request['pageSize']=$pageSize=isset($request['pageSize'])?$request['pageSize']:50;

        $this->assign('request', $request);
        $this->assign('isManage', 1);
        $this->display();
    }
    /**
	 * @desc 客户用户名更改
     * @param=[user_name]
	 */
    public function customerAccountChange(){
        if(IS_AJAX){
            $request=I('post.');

            $request['user_name']=trim($request['user_name']);
            if(!preg_match('/^\w{6,}$/',$request['user_name'])){
                die(json_encode(['error'=>1,'msg'=>'用户名格式错误']));
            }

            $user_id=session('userId');
            $change=M('user_account_change')->where(['user_id'=>$user_id])->find();
            if($change) return die(json_encode(['error'=>1,'msg'=>'限制更改']));

            $user_name=M('user')->field('user_name')->where(['user_name'=>$request['user_name']])->find();
            if($user_name)  return die(json_encode(['error'=>1,'msg'=>'用户名已被使用']));

            M('user_account_change')->startTrans();
            $result=M('user_account_change')->add(['user_id'=>$user_id,'change_num'=>1]);
            $result2=M('user')->field('user_name')->where(['id'=>$user_id])->save($request);
            if($result===false||$result2===false){
                M('user_name_change')->rollback();
                die(json_encode(['error'=>1,'msg'=>'failed']));
            }

            M('user_name_change')->commit();
            die(json_encode(['error'=>0,'msg'=>'success']));
        }
    }

	
	
}