<?php

// +----------------------------------------------------------------------
// | FileName:   HomeController.class.php
// +----------------------------------------------------------------------
// | Dscription:   前台基类控制器
// +----------------------------------------------------------------------
// | Date:  2017/7/31 13:32
// +----------------------------------------------------------------------
// | Author: showkw <showkw@163.com>
// +----------------------------------------------------------------------


namespace  Home\Controller;

use Admin\Controller\MsgController;
use Common\Controller\MQ;
use Home\Model\ErpModel;
use THink\Controller;
use Home\Controller\BasketController;
use Home\Controller\ProductController;
use Common\Controller\UploadController as Upload;
use Common\Controller\KdApiController as KdApi;
use think\Log;
use EES\System\Redis;

class OrderController extends BasketController
{

    use Upload;

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        if(!D('Home/OrderDisable','Design')->isDisable()){//定单功能限制
            if(IS_AJAX) die(json_encode(['error'=>1,'msg'=>'不是自已的定单,功能受限']));
            $this->error('不是自已的定单,功能受限',U('Home/Order/myOrder'));
        }

        $url_path=I('path.');
        if(!in_array($url_path[1],['search','basketDetail','notify','alipay_notify12','orderpaytest','orderPayTest'])){
            !is_login() && redirect(U('Home/Account/login'));
        }
        $user_id = session( 'userId' );
        $userType = session('userType');
        if( $userType == 1 ){
            $key = 'ssid_'.$user_id;
            if(S($key)){
                $ssid = S($key);
                if( $this->ssid !== $ssid ){
                    session(null);
                    S($key,null);
                    redirect(U('Home/Account/login', ['isRelogin'=>1]));
                }
            }
        }

        $companySons=$this->companySons();//企业子账号信息
        if($companySons['error']==0){
            $users=$companySons['data'];
            $user_id=['in',$users];
        }

        //查询用户待付款订单条数
        $noPayNum = D( 'order' )->where( [ 'user_id' => $user_id, 'pay_status' => 0, 'order_status'=>['in',[0,1,2]] ] )->count();
        $this->assign('noPayNum', $noPayNum?:0);

        //查询待发货条数
        $noShipNum = D( 'order' )->where( [ 'user_id' => $user_id, 'ship_status' => 0, 'order_status'=>['in', [0,1,2]] ] )->count();
        $this->assign('noShipNum', $noShipNum?:0);

        //查询待收货条数
        $noDeliveryNum = D( 'order' )->where( [ 'user_id' => $user_id,'order_status'=>['in', [0,1,2]], 'ship_status' =>['in', [1,2,3]]  ] )->count();
        $this->assign('noDeliveryNum',$noDeliveryNum?:0);

        //查询待评价条数
        $noReleaseNum = D( 'order' )->where( [ 'user_id' => $user_id, 'order_status' => 3, 'is_comment'=>1 ] )->count();
        $this->assign('noReleaseNum', $noReleaseNum?:0);
    }

    public function knotOrder(){
        if(IS_AJAX){
            M()->startTrans();
            $request=I('post.');
            $order_sn=$request['order_sn'];
            if(!$order_sn) die(json_encode(['error'=>1,'msg'=>'参数错误']));
            $order_sync=M('order_sync')->where(['order_sn'=>$order_sn,'sync_status'=>['IN',[0,2]]])->find();
            if($order_sync){
                M()->rollback();
                die(json_encode(['error'=>1,'msg'=>'请稍后再试']));
            }
            $order=M('order');
            $order_hy=M('order_sync_hy')->where(['order_no'=>$order_sn,'is_recive'=>0])->find();
            if($order_hy){
                M()->rollback();
                die(json_encode(['error'=>1,'msg'=>'未确认收货']));
            }
            $res=$order->where(['order_sn'=>$order_sn,'knot'=>0])->find();

            if($res){
                $user_id=$res['user_id'];
                $res=$order->where(['order_sn'=>$order_sn,'knot'=>0])->save(['knot'=>1]);
                if($res){
                    //写入结单redis knotOrder
                    $orderSync = M('knot_order');
                    if(!($orderSync->where(['order_sn'=>$order_sn])->find())){
                        $res = $orderSync->add([ 'order_sn'=>$order_sn ]);
                        if($res === false ){
                            M()->rollback();
                            die(json_encode(['error'=>1,'msg'=>$order_sn.'----结单信息同步写入数据库失败']));
                        }
                    }
                    $redis = Redis::getInstance();
                    $redRes = $redis->sAdd( 'knotOrder', $order_sn );
                    if((int)$redRes===0){
                        M()->rollback();
                        die(json_encode(['error'=>1,'msg'=>'该订单正在结单中......']));
                    }
                    M()->commit();
                    MsgController::writeMsgToUserSale( $user_id, '客户取消订单'.$order_sn, '订单编号:'.$order_sn.'{}取消时间:'.date('Y-m-d H:i:s') );
                    die(json_encode(['error'=>0,'msg'=>'结单提交成功']));
                }else{
                    M()->rollback();
                    die(json_encode(['error'=>1,'msg'=>'结单失败']));
                }
            }else{
                M()->commit();
                return die(json_encode(['error'=>1,'msg'=>'结单信息错误']));
            }
        }
    }

    /*
     *创建订单
     */
    public function createOrder()
    {
        $get = I('get.');
        $data = I('post.');
        $session=session();
        $user_id = $session['userId'];
        $parentId=0;//帐号的父帐号

        //子账号获取母账号账期
        if($session['userInfo']['user_type']==20){
            $user_p=D('user_son')->where(['user_id'=>$user_id])->find();
            $userAccount=D('user')->userAccountIsPass($user_p['p_id']);
            $parentId=$user_p['p_id'];
        }else{
            $userAccount=D('user')->userAccountIsPass($user_id);
        }

        $userOrderAddress = $this->userOrderAddress();
        $this->assign('userAccount',$userAccount);
        //        print_r($data);

        $is_invoice=isset($data['is_invoice'])?$data['is_invoice']:0;//是否开发票,1开，0不开
        $settlementProduct = $this->settlementProduct($get['pid'],$is_invoice,$get['sample']);//下单商品数据
        $basket_id=$settlementProduct['basket_id'];
        if($settlementProduct['error']!=0){
            if(IS_AJAX){
                die(json_encode($settlementProduct));
            }else{
                $this->error($settlementProduct['msg'],U('Home/Basket/basketDetail'));
            }
        }
        $orderProduct=$settlementProduct['data']['list'];//订单商品数据
        $order_status=$settlementProduct['data']['order_status']?:0;//订单是否要审核

        $samples=D('product')->customerProductExampleAction($user_id,$parentId);
        if($samples['error']===0){
            $sample_list=$this->productList(['id'=>['in',$samples['data']]]);
        }

        //        //个人钱包
        //        $wallet=D('Wallet/Wallet')->customerWallet($user_id);
        //        $this->assign('wallet',$wallet['data']);
        ////        print_r($wallet);
        //个人积分
        //        $integral=D('Wallet/Integral')->customerIntegral($user_id);
        //        $this->assign('integral',$integral['data']);

        $error = ['error' => 0, 'msg' => '正常'];
        if ($data['active'] == 'newOrder') {
            $pay_type = $data['pay_type']?:'';//1在线支付，2账期支付，3快递代收，4面对面付款，5银行转账，6线下支付
            if($pay_type==2&&$userAccount['error']!==0) die(json_encode($userAccount));

            $order_type = $data['order_type']?1:0;//0没有定金，1预付定金
            if (!in_array($pay_type, [1, 2, 3,4,5,6])) die(json_encode(['error' => 1, 'msg' => '支付方式不正确']));
            $ship_type = $data['ship_type'];//1快递，2物流，3自取，4送货
            if (!in_array($ship_type, [1, 2, 3,4,])) die(json_encode(['error' => 1, 'msg' => '运输方式不正确']));
            //            if( $order_status ==0 && $pay_type==2 ) $order_status=2;//账期支付，订单显示完全支付
            if (isset($data['deposits_pay_type'])&&!in_array($data['deposits_pay_type'], [1, 4, 5,6])) die(json_encode(['error' => 1, 'msg' => '定金支付方式不正确']));//定金支付方式（1在线支付，4面对面付款，5银行转账，6线下支付）
            $wxPay=C("wxpay_opinion");
            if($order_type==1&&!isset($wxPay[$data['ship_type']][$is_invoice][$pay_type][$data['deposits_pay_type']])){
                die(json_encode(['error' => 1, 'msg' => '请选择支付方式后再提交']));
            }elseif(!isset($wxPay[$data['ship_type']][$is_invoice][$pay_type])){
                die(json_encode(['error' => 1, 'msg' => '请选择支付方式后再提交']));
            }
            //            //钱包支付
            //            if(isset($data['wallet_type'])){
            //                if(!in_array($data['wallet_type'],[1,20])){
            //                    die(json_encode(['error' => 1, 'msg' => '钱包不正确']));
            //                }else{
            //                    if(isset($data['wallet'])&&$data['wallet']>$wallet['data'][$data['wallet_type']]['amount_allow_pay']){
            //                        die(json_encode(['error' => 1, 'msg' => '钱包支付不正确2']));
            //                    }
            //                }
            //            }
            //            //积分支付
            //            if(isset($data['integral'])){
            //                if($data['integral']>$integral['amount_allow_pay']){
            //                    die(json_encode(['error' => 1, 'msg' => '积分支付不正确']));
            //                }
            //            }

            //运费
            $delivery_type = ($data['delivery_type'] == 1) ? 1 : 2;//1,到付，2寄付
            $select_delivery_id = $data['delivery_id'];
            $delivery = $this->orderFreight(1,$delivery_type,$select_delivery_id);//运费
            if($delivery['error']==1) die(json_encode($delivery));
            $delivery_price=$delivery['data']['delivery_price'];
            //收货地址信息
            if(!$userOrderAddress&&$data['ship_type']!=3) die(json_encode(['error' => 1, 'msg' => '地址信息不正确']));
            $address_error=0;
            foreach($userOrderAddress as $k=>$v){
                if($v['id']==$data['address_id']){
                    $address_error=1;
                    $base_address=$v;
                }
            }
            if($data['ship_type']==3){
                $address_error=1;
                if(!$base_address){
                    if($userOrderAddress){
                        $base_address=$userOrderAddress[0];
                    }else{
                        $base_address['consignee']="";
                        $base_address['area_code']=0;
                        $base_address['address']="";
                        $base_address['mobile']="";
                    }
                }
            }
            if(!$base_address['area_code']){
//                die(json_encode(['error'=>1,'msg'=>'当前收贷地址信息不对，请重编辑地址信息后，再下单']));
                kelly_log('createCode-----area_code is null','kelly_error','ALTER');
            }
            if($address_error===0) die(json_encode(['error' => 1, 'msg' => '地址信息不正确']));
            //配送信息
            $where_delivery = ['user_id' => $user_id, 'id' => $select_delivery_id];
            $base_delivery = D('delivery')->where($where_delivery)->find();
            if (!$base_delivery) $error = ['error' => 1, 'msg' => '配送信息不正确'];
            //备注信息
            $base_note = $data['note'] ? $data['note'] : 'no';
            if($error['error']) die(json_encode($error));//用户信息验证结果
            //商品列表信息
            $base_product = [];
            //下单成功后商品库存信息
            $base_product_store=[];
            $goods_list = $data['goods'];
            if(!$goods_list) die(json_encode(['error' => 1, 'msg' => '没有商品']));

            $productId_arr=[];
            foreach ($goods_list as $k => $v) { $productId_arr[]=$v['pid']; }

            //基础数据处理
            $orderSn = $this->orderSn();
            if($orderSn['error']!=0) die(json_encode($orderSn));
            $order_sn=$orderSn['data']['one'];
            kelly_log(['query'=>$data,'order_sn'=>$order_sn,'userId'=>$user_id],'kelly__orderLog','INFO');//日志记录
            $add_data_goods = [];
            $total_origin = $total_deposits = $total = 0;

            $discountPriceIsPass=$this->discountPriceIsPass($is_invoice,$pay_type,$data['deposits_pay_type']);//优惠是否执行

            $exampleProductAction=[];
            $totalXianhuo=0;//现贷总额
            if($orderProduct){
                foreach ($orderProduct as $k => $v) {
                    $one_deposits_subtotal=0;//定金
                    //判断商品是否可拆
                    if($v['min_open']==0&&((int)$v['num']%(int)$v['min']!=0)) die(json_encode(['error' => 1, 'msg' =>$v['p_sign'].'---不可拆售']));
                    //+
                    //+
                    $p_t=$discountPriceIsPass?$v['price_true']:$v['price_show'];
                    $p_t=round($p_t,4);
                    $one_pay_total=$p_t*$v["num"];
                    $one_pay_total=round($one_pay_total,2);
                    //+
                    //$one_pay_total=$discountPriceIsPass?($v['subtotal']-$v['discount_subtotal']):$v['subtotal'];//优惠是否执行--实付小计

                    if($v['store']<$v['num']){//没有库存且设置了定金比例的
                        if((float)$v['earnest_scale']){
                            //+
                            $one_deposits_subtotal=round((float)$one_pay_total*(float)$v['earnest_scale'],2);//定金
                            //+
                            //$one_deposits_subtotal=(float)$one_pay_total*(float)$v['earnest_scale'];//定金
                        }
                    }else{
                        $totalXianhuo+=$one_pay_total;//现贷总额
                    }
                    //+
//                    $one_pay_total=$discountPriceIsPass?($v['subtotal']-$v['discount_subtotal']):$v['subtotal'];//优惠是否执行--实付小计
//
//                    if($v['store']<$v['num']){//没有库存且设置了定金比例的
//                        if((float)$v['earnest_scale']){
//                            $one_deposits_subtotal=(float)$one_pay_total*(float)$v['earnest_scale'];//定金
//                        }
//                    }else{
//                        $totalXianhuo+=$one_pay_total;//现贷总额
//                    }

                    $rule_info=$v['bargainInfo']?json_encode($v['bargainInfo']):'';//议价
                    $one_fitemno=$v['bargainInfo']['fitemno']?$v['bargainInfo']['fitemno']:$v['fitemno'];
                    $fitemno_erp=M('product','erp_')->field('fitemno')->where(['ftem'=>$one_fitemno])->find();

                    if(!$fitemno_erp['fitemno']) die(json_encode(['error'=>1,'msg'=>'型号错误，请联系私人客服及时修改,再下单']));
                    $add_data_goods[] = [
                        'order_sn' => $order_sn,
                        'rule_info'=>$rule_info,//议价
                        'fitemno' => $one_fitemno,
                        'fitemno_sync' => $fitemno_erp['fitemno'],//erp同步的型号转换
                        'earnest_scale' => $v['earnest_scale']?$v['earnest_scale']:0,
                        'p_id' => $v['id'],
                        'p_name' => $v['p_sign'],
                        'bargain_price_id' => isset($v['bargainInfo']['id'])?$v['bargainInfo']['id']:0,
                        'p_price_show' => $v['price_show'],
                        'is_discount_num' => $v['is_discount_num'],//折扣限比例
                        //+
                        'p_price_true' => $p_t,
                        //+
                        //'p_price_true' => $discountPriceIsPass?$v['price_true']:$v['price_show'],
                        'p_num' => $v['num'],
                        'subtotal' => $v['subtotal'],//显示小计
                        'discount_subtotal' => $v['discount_subtotal'],//优惠小计
                        'deposits_subtotal' =>$one_deposits_subtotal,//定金
                        'pay_subtotal' => $one_pay_total,//实付小计
                        'is_invoice_change'=>($is_invoice&&$v['bargainInfo']['price_invoice_change_pass'])?1:0,//是否换型号开票
                      //  'wa_intergral'=>$wa_intergral,
                    ];
                    $total_origin += $v['subtotal'];
                    $total += $one_pay_total;
                    $total_deposits += $one_deposits_subtotal;

                    $base_product_store[]=[//更新的产品库存数据
                        'id'=>$v['id'],
                        'fitemno'=>$v['fitemno'],
                        'store'=>$v['store']-$v['num'],
                        'sell_num'=>$v['sell_num']+$v['num'],
                    ];
                }
            }elseif(!$orderProduct&&!$sample_list['data']['list']){
                die(json_encode(['error' => $error, 'msg' => '购物车已空，请先添加至购物车']));
            }
            $order_type= D('order')->orderIsAllPay($pay_type,$total_deposits,$order_type);//是否全款支付

            $add_data_order = [//order表数据
                'order_sn' => $order_sn,
                'order_status' => $order_status,
                'order_type' => $order_type,
                'pay_type' => $pay_type,
                'ship_status' => 0,
                'ship_type' => $ship_type,
                'is_invoice' => $is_invoice,
                'user_id' => $user_id,
                'delivery_name' => $base_delivery['name'],
                'delivery_code' => $base_delivery['code'],
                'delivery_price' => $delivery_price,
                'total' =>$delivery_price + $total,//订单实付总价
                'pay_status'=>$settlementProduct['pay_status'],
                'total_origin' =>$delivery_price + $total_origin,
                'total_invoice' =>$delivery_price + $total,
                'total_deposits' =>$total_deposits,//定金
                'total_discount' =>$total_origin-$total,
                'deposits_pay_type' =>$data['deposits_pay_type'],
            ];


                $add_data_detail = [//order_detail表数据
                    'order_sn' => $order_sn,
                    'consignee' => $base_address['consignee'],
                    'area_code' => $base_address['area_code'],
                    'address' => $base_address['address'],
                    'mobile' => $base_address['mobile'],
                    'note' => $base_note,
                ];


            //定单样品数据user_product_example
            $order_example_data=$exampleProductAction=[];
            if(isset($sample_list['data']['list'])&&$sample_list['data']['list']){
                foreach($sample_list['data']['list'] as $k=>$v){

                    $one_sample=$samples['listId_arr'][$v['id']]['fitemno'];//erp同步的型号转换
                    $fitemno_erp=M('product','erp_')->field('fitemno')->where(['ftem'=>$one_sample])->find();

                    $exampleProductAction=$v['id'];
                    $add_data_goods[]=[
                        'order_sn' => $order_sn,
                        'rule_info'=>json_encode($samples['listId_arr'][$v['id']]),
                        'fitemno' => $one_sample,
                        'fitemno_sync' => $fitemno_erp['fitemno'],//erp同步的型号转换
                        'earnest_scale' => 0,
                        'p_id' => $v['id'],
                        'p_name' => $v['p_sign'],
                        'bargain_price_id' => 0,
                        'p_price_show' => 0,
                        'is_discount_num' => 1,//折扣限比例
                        'p_price_true' => 0,
                        'p_num' => $samples['listId_arr'][$v['id']]['buy_num'],
                        'subtotal' => 0,//显示小计
                        'discount_subtotal' => 0,//优惠小计
                        'deposits_subtotal' =>0,//定金小计
                        'pay_subtotal' => 0,//实付小计
                        'is_invoice_change'=>0,//是否换型号开票
                    ];
                }
            }

            $user_pay=[//本次支付
                'user_pay_step'=>[
                    'table_prefix'=>'dx_',
                    'field'=>'user_id,amount,index,type',
                    'data'=>[
                        'user_id'=>$user_id,
                        'amount'=>($order_type ? $total_deposits+$totalXianhuo:$delivery_price + $total)*100,//本次支付
                        'index'=>$order_sn,
                        'type'=>'1',
                    ]
                ]
            ];
            //			$result_pay_step=D('Home/OrderPay','Design')->set($user_pay)->add()->result;

            //账期支付
            $order_total = $add_data_order['total'];//订单金额
            $typePayNum = $this->typePayNum($pay_type, $order_total, $delivery_price, $total_deposits,$add_data_order['order_type'],$totalXianhuo,$data['deposits_pay_type']);
            $online_pay = $typePayNum['online_pay'];//在线支付金额
            $account_pay = $typePayNum['account_pay'];//账期支付金额
            //2018-10-18修改
            //$add_data_order['already_paid']=$account_pay?:0;
            $add_data_order['already_paid']=0;

            $user = $basket_id = D('basket')->where(['user_id' => $user_id])->find();
            $basket_id = $user['basket_id'];
            $log_sql='';

            //下单
            M('order')->startTrans();
            //            //下单成功,定单积分
            //            $integralResult=D('Wallet/Integral')->addIntegral(101,$order_sn,$add_data_goods);
            //            if($integralResult['error']!==0){
            //                M('order')->rollback();
            //                die(json_encode(['error' => $error, 'msg' => '订单提交失败8']));
            //            }
            //            $add_data_order['integral']=$integralResult['data']['integral_amount'];

            $order_result=D('order')->data($add_data_order)->add();
            $log_sql.=D()->getLastSql();//sql记录
            $order_detail_result=D('order_detail')->data($add_data_detail)->add();
            $log_sql.=D()->getLastSql();//sql记录
            $order_goods_result=D('order_goods')->addAll($add_data_goods);
            $log_sql.=D()->getLastSql();//sql记录
            //下单成功,清除购物车相应商品
            $basket_detail_result=D('basket_detail')->where(['basket_id' => $basket_id, 'status' => 1])->delete();
            $log_sql.=D()->getLastSql();//sql记录

            if ($account_pay){
                if($userAccount['error']!=0) die(json_encode($userAccount));
                if($userAccount['data']<$account_pay) die(json_encode(['error'=>1,'msg'=>'账期可用余额不足']));
                $accountPayResult=$this->orderAccountPay($user_id, $order_sn, $order_total, $account_pay,$userAccount);//账期支付
            }

            $product_result=1;
            $toErp_result=0;
            if( $total_deposits==0 && in_array($pay_type,[2,3,4,5,6]) ){

                foreach($base_product_store as $k=>$v){
                    $sell_num=(int)$v['sell_num'];
                    $one_id=(int)$v['id'];
                    $dataErp=[
                        'store'=>$v['store'],
                    ];

                    $Model = new \Think\Model(); // 实例化一个model对象 没有对应任何数据表
                    $one_store_result=$Model->execute("update dx_product set sell_num=$sell_num where id=$one_id");

                    if( !$one_store_result){
                        $product_result=0;//更新库存
                        break;
                    }
                }
            }

            //样品更新
            $example_result=0;
            if($exampleProductAction){
                $oneWhere=[
                    'pid'=>['in',$exampleProductAction],
                    'uid'=>$parentId?:$user_id,
                ];
                $sample_result=M('basket_detail_sample')->where(['basket_id'=>$basket_id,'pid'=>['in',$exampleProductAction],'status'=>1])->delete();
                $log_sql.=D()->getLastSql();//sql记录
                $sample_result2=M('user_product_example')->where($oneWhere)->save(['step'=>0]);
                $log_sql.=D()->getLastSql();//sql记录
                if($sample_result===false||$sample_result2===false){
                    $example_result=1;
                }
            }

            $error=0;
            if(!$order_result){
                $error=1;
            }else if(!$order_detail_result){
                $error=2;
            }else if(!$order_goods_result){
                $error=3;
            }else if($basket_detail_result===false){
                $error=4;
            }else if(!$product_result){
                $error=5;
            }else if(isset($accountPayResult['error'])&&$accountPayResult['error']!=0){
                $error=7;
            }else if($example_result){
                $error=9;
            }

            if($error==0){

                //                if( $total_deposits==0 && in_array($pay_type,[2,3,4,5,6]) ){
                if( in_array($pay_type,[2,3,4,5,6]) || $add_data_order['pay_status']==2){
                    $isSyncArr=$add_data_order;
                    $$isSyncArr['deposits_pay_status']=0;
                    $isSync=isSync($isSyncArr);
                    //审核不同步
                    if($order_status!=1&&$isSync){
                        $toErp=(new \Home\Model\ErpModel())->orderToErp($order_sn);//订单同步到erp
                        if($toErp['error']!=0) $error=8;
                        //发送消息通知
                        MsgController::writeMsgToUserSale( $user_id, '新订单'.$order_sn, '新订单编号:'.$order_sn.'{}
                 订单总金额:'.$order_total.'{}在线支付金额:'.$online_pay.'{}账期支付金额:'.$account_pay.'{}下单时间:'.date('Y-m-d H:i:s') );
                        //审核不同步
                    }else{
                        //$toErp=(new \Home\Model\ErpModel())->orderToErp($order_sn);//订单同步到erp
                        //if($toErp['error']!=0) $error=8;
                        //发送消息通知
                        MsgController::writeMsgToUserSale( $user_id, '新订单'.$order_sn, '新订单编号:'.$order_sn.'{}
                 订单总金额:'.$order_total.'{}在线支付金额:'.$online_pay.'{}账期支付金额:'.$account_pay.'{}下单时间:'.date('Y-m-d H:i:s') );
                    }
                }

                //首单减20,在线支付
                //				$FirstOrder_result=D('Home/Order')->customerFirstOrder();

                M('order')->commit();
                $return_data=['order_sn'=>$order_sn,'online_pay'=>$online_pay];
                $error = ['error' => $error, 'msg' => '订单提交成功','data'=>$return_data];
                kelly_log('user:'.$user_id.';-------order_sn:'.$order_sn.';-------sql_log:'.$log_sql.';-------error:'.$error.';------error_sql:'.D()->getDbError(),'kelly__orderLog');//日志记录
            }else{
                kelly_log('user:'.$user_id.';-------order_sn:'.$order_sn.';-------sql_log:'.$log_sql.';-------error:'.$error.';------error_sql:'.D()->getDbError(),'kelly__orderLog');//日志记录

                M('order')->rollback();
                $error = ['error' => $error, 'msg' => '订单提交失败'];
                die(json_encode($error));
            }

            //有账期未还下单提示
            if($pay_type!=1&&(int)($userAccount['one']['used_debt']*100)>0){//在线支付的时候不提示
                $error['error']=300;
                $error['msg']="订单已提交成功，您有".$userAccount['one']['used_debt']."欠款，请及时与您的客服沟通，以免影响发货！ ";
            }

            $error['order_status']=$order_status;
            die(json_encode($error));
        }

        $product_list=$settlementProduct['data']['list'];
        if($sample_list['data']['list']){
            foreach($sample_list['data']['list'] as $k=>$v){
                $v['sample']=1;
                $v['num']=$samples['listId_arr'][$v['id']]['buy_num'];
                $product_list[]=$v;
            }
        }

        $notOnlinePayment=$this->notOnlinePayment();
        $userOrderInvoice = $this->userOrderInvoice();
        $userOrderPayment = $this->userOrderPayment();
        $userDelivery = $this->userDelivery();

        $this->assign('notOnlinePayment', $notOnlinePayment);//非在线支付方式
        $this->assign('address', $userOrderAddress);
        $this->assign('invoice', $userOrderInvoice);
        $this->assign('payment', $userOrderPayment);//在线支付方式
        $this->assign('delivery', $userDelivery);
        $this->assign('product_list', $product_list);
        $this->display();
    }

    /*
     * 判断是否能执行优惠价
     * 支付方式（1在线支付，2账期支付，5银行转账，3快递代收，4面对面付款，6线下支付）
     * 定金支付方式（1在线支付，4面对面付款，5银行转账，6线下支付）
     */
    public function discountPriceIsPass($is_invoice,$pay_type,$deposits_pay_type){
        $pass=true;
        if($is_invoice==1){//开票
            $pass=false;
        }else{//不开票
            if( in_array($pay_type,[1,5]) || in_array($deposits_pay_type,[1,5]) ) $pass=false;
        }
        return $pass;
    }

    /*
     * 计算支付金额:在线支付，帐期支付,货到付款
     * params=
     *      type:1帐期支付 ,2在线支付，3货到付款，
     *      order_total:订单总额
     *      account_pay:账期支付金额,
     *      delivery_price:运费,
     *      goods_deposit:商品定金,
     *      order_type:1定金支付，0没有选择定金支付,
     *      totalXianhuo：现贷金额，
     *      deposits_pay_type:定金支付方式
     */
    public function typePayNum($type, $order_total, $delivery_price, $goods_deposits,$order_type,$totalXianhuo,$deposits_pay_type)
    {
        //1在线支付，2账期支付，3快递代收，4面对面付款,5银行转账，6线下支付
        $return = [];
        if ($type == 1) {
            if($order_type==1){
                if($deposits_pay_type==1) $return['online_pay'] = $goods_deposits + $totalXianhuo+ $delivery_price;
                else $return['online_pay'] = 0;
            }else{
                $return['online_pay'] = $order_total + $delivery_price;
            }
            $return['account_pay'] = 0;
            $return['credit_pay'] = 0;
        } else if ($type == 2) {
            $return['account_pay'] = $order_total + $delivery_price-$goods_deposits;
            if($deposits_pay_type==1){
                $return['online_pay'] = $goods_deposits;
            }
            $return['credit_pay'] = 0;
        } else if ($type == 3 || $type == 4 || $type == 5|| $type == 6) {
            $return['account_pay'] = 0;
            if($deposits_pay_type==1){
                $return['online_pay'] = $goods_deposits;
            }
            $return['credit_pay'] = $order_total + $delivery_price;
        }
        //		if ($return['online_pay'] < $goods_deposits) die(json_encode(['error' => 1, 'msg' => '在线支付金额不能少于产品定金']));
        return $return;
    }

    /*
     * @desc 用户本次在线支付金额
     */
    public function userCurrentOnlinePay($orderSn){
        $currentPay=0;//本次在线支付金额
        $list=$this->orderList_admin(['order_sn'=>$orderSn]);
        if($list['error']!=0) return $list;
        $data=$list['data']['list'][0];

        $currentHasProductTotal=0;//现贷金额
        foreach($data['goodsList'] as $k=>$v){//现贷金额
            if($v['store']>=$v['p_num']){
                $currentHasProductTotal+=$v['pay_subtotal'];
            }
        }

        if($data['pay_status']!=2){//未全部支付
            if((float)$data['total_deposits']||$currentHasProductTotal){//有定金
                if($data['order_type']==1){//预付定金
                    if($data['deposits_pay_status']==0) {//定金未付
                        if($data['deposits_pay_type']==1){//在线支付
                            if($data['pay_type']==1){//在线支付
                                $currentPay = round($currentHasProductTotal+$data['total_deposits'],2);
                            }elseif($data['pay_type']==5||$data['pay_type']==2){//银行转帐,帐期支付
                                $currentPay = round($data['total_deposits'],2);
                            }
                        }
                    }else{
                        $currentPay = round($data['total']-$data['already_paid'],2);
                    }
                }else if($data['order_type']==0){//支付全款
                    $currentPay = round(($data['total']-$data['already_paid']),2);
                }
            }else{//没有定金
                if($data['pay_type']==1){//在线支付
                    $currentPay = round($data['total']-$data['already_paid'],2);
                }
            }
        }
        if(!$currentPay) return ['error'=>1,'msg'=>'本次在线支付金额为0'];
        return ['error'=>0,'data'=>['one'=>$currentPay]];
    }

    /*
     * 用户本次账期信息
     */
    public function userAccount($user_id)
    {
        $return = '';
        $user_order_account = '';
        $where = ['user_id' => $user_id, 'status' => 1];
        $user_account = D('user_account')->where($where)->find();
        if ($user_account) {
            $today = date('Y-m-d', time());
            $user_account_id = $user_account['id'];
            $where_order_account = ['user_account_id' => $user_account_id];
            $user_order_account = D('user_order_account')->where($where_order_account)->order('id desc')->find();//取出最后一个账期
            $start_time = $user_order_account['start_time'];
            $end_time = $user_order_account['end_time'];
            if (!$user_order_account || ($today > $end_time && $user_order_account['quota_used_true']==0)) {//没有账期历史，生成第一个账期
                $return = $this->createUserAccount($user_id);
            } else {//有账期
                if ($user_order_account['status'] == 2) {//上次账期已结清,创建本次账期
                    $return = $this->createUserAccount($user_id);
                } else {
                    if ($today >= $start_time && $today < $end_time) {//账期正在使用中
                        $return = $user_order_account;
                    } else {//账期时间已过期
                        if($user_order_account['quota_used_true'] == 0) $return = $this->createUserAccount($user_id);//有账期订单未发货
                        else $return = ['error' => 1, 'msg' => $user_order_account['id'] . '-------上期账期未结清'];
                    }
                }
            }
        }
        return $return;
    }

    /*
     * 生成用户本次账期
     */
    public function createUserAccount($user_id)
    {
        $user_account = D('user_account')->where(['user_id' => $user_id])->find();
        if(!$user_account) return ['error'=>1,'msg'=>'用户没有账期信息'];
        $day_type = $user_account['day_type'];
        //查看最近的账期使用
        $last_order_account=D('user_order_account')->where(['user_account_id'=>$user_account['id']])->order('id desc')->find();
        $order_account_data=[ 'user_account_id' => $user_account['id'], 'quota' =>  $user_account['quota'], ];
        if( isset($last_order_account['status']) && $last_order_account['status']==1 && $last_order_account['quota_used_true']!=0 )  return ['error'=>1,'msg'=>'最近账期未结清'];
        $new_account_time = $this->userAccountStartEndTime($user_account['day_type']);
        $order_account_data['start_time']=$new_account_time['start_time'];
        $order_account_data['end_time']=$new_account_time['end_time'];
        $order_account_data['pay_end']=$new_account_time['pay_end'];
        $order_account_data['quota_used']=$last_order_account['quota_used']-$last_order_account['quota_used_true'];
        $result = D('user_order_account')->data($order_account_data)->add();
        if (!$result) return ['error' => 1, 'msg' => '新账期生成失败'];
        $data['id'] = $result;
        $data['error'] = 0;
        return $data;
    }

    /*
     * 生成账期时间
     */
    public function userAccountStartEndTime($day_type)
    {
        $start_time = $end_time = '';
        $account_types=$this->getBaseAccountTypes($day_type); //账期类型
        if($account_types['error']!=0) $account_types;
        $account_type=$account_types['data'][0];

        $date = new \DateTime();
        $first_day=date('Y-m-01', strtotime(date("Y-m-d")));//当月第一天
        $next_month=date('Y-m', strtotime('+1 month'));//下个月
        $last_month=date('Y-m', strtotime('-1 month'));//上个月
        $this_month=date('Y-m', time());//上个月
        $today_day = $date->format('Y-m-d');
        if($account_type['account_code']=='one_week'){//周结
            $date->modify('this week');
            $start_time = $date->format('Y-m-d');
            $date->modify('this week +7 days');
            $end_time = $date->format('Y-m-d');
            $date->modify("this week +".( $account_types['data'][0]['pay_end']-1 )." days");
            $pay_end = $date->format('Y-m-d');
        }else if($account_type['account_code']=='half_month'){//半月结
            if(substr($today_day,-2)>=16){
                $start_time=substr($first_day,0,7).'-16';
                $end_time=date('Y-m-d', strtotime("$first_day +1 month -1 day"));
                $pay_end=date('Y-m-d',strtotime($end_time)+(3600*24)*($account_types['data'][0]['pay_end']));
            }else{
                $start_time=$first_day;
                $end_time=substr($first_day,0,7).'-16';
                $pay_end=date('Y-m-d',strtotime($end_time)+(3600*24)*($account_types['data'][0]['pay_end']));
            }
        }else if($account_type['account_code']=='one_month25'){//当月结（25）
            $start_time=$last_month.'-26';
            $end_time=$this_month.'-26';
            $pay_end=date('Y-m-t', time());
        }else if($account_type['account_code']=='one_month31'){//当月结（31）
            $start_time=$this_month.'-01';
            $end_time=date('Y-m-d', strtotime("$first_day +1 month -1 day"));
            $pay_end=date('Y-m-d',strtotime($end_time)+(3600*24)*($account_types['data'][0]['pay_end']));
        }

        return ['start_time' => $start_time, 'end_time' => $end_time, 'pay_end' => $pay_end];
    }


    /*
     * 账期支付
     * params=[
     *              user_id:用户id,
     *              order_sn:订单编号,
     *              $order_total:订单总金额,
     *              $account_pay:账期支付金额,
     * ]
     */
    public function orderAccountPay($user_id, $order_sn, $order_total, $account_pay,$userAccount)
    {
        $type = 2;//账期支付
        $pay_history_data = [
            'order_sn' => $order_sn,
            'order_total' => $order_total,
            'pay_amount' => $account_pay,
            'type' => $type,
            'user_order_account_id' =>0,
            'pay_name' => '账期支付',
        ];
        $quota_used = $userAccount['one']['used_quota'] + $account_pay;

        $m=M('order_pay_history');
        //        $m->startTrans();
        $result1=$m->data($pay_history_data)->add();//记录本次支付
        $result2=M('accounts','erp_')->data(['used_quota' => $quota_used])->where(['id' => $userAccount['one']['id']])->save();//更新账期记录
        if($result1&&$result2!==false){
            //            $m->commit();
            $error = ['error' => 0, 'msg' => '账期支付成功'];
        }else{
            //            $m->rollback();
            $error = ['error' => 1, 'msg' => '账期支付失败'];
        }
        return $error;
    }

    /*
     * 选择商品去结算
     * $pid=[1,2,3,4]
     */
    public function settlementProduct($pid,$is_invoice,$sample_pid=[])
    {
        if($pid){
            $isCreateOrder=D('order')->isCreateOrder($pid);//是否能继续下单
            if($isCreateOrder['error']!==0) return $isCreateOrder;
        }

        $sample_pid=(is_array($sample_pid)&&$sample_pid)?$sample_pid:[];
        $user_id = session('userId');
        $user = D('basket')->where(['user_id' => $user_id])->find();
        $basket_id = $user['basket_id'];
        if(IS_GET){
            if(!$sample_pid){
                $result3=0;
                $result4 = D('basket_detail_sample')->data(['status' => 0])->where(['basket_id' => $basket_id])->save();
            }else{
                $result3 = D('basket_detail_sample')->data(['status' => 1])->where(['basket_id' => $basket_id, 'pid' => ['in', $sample_pid]])->save();
                $result4 = D('basket_detail_sample')->data(['status' => 0])->where(['basket_id' => $basket_id, 'pid' => ['not in', $sample_pid]])->save();
            }
            if ($pid) {
                D('basket_detail')->startTrans();
                $result1 = D('basket_detail')->data(['status' => 1])->where(['basket_id' => $basket_id, 'pid' => ['in', $pid]])->save();
                $result2 = D('basket_detail')->data(['status' => 0])->where(['basket_id' => $basket_id, 'pid' => ['not in', $pid]])->save();
                if($result1!==false&&$result2!==false&&$result3!==false&&$result4!==false){
                    D('basket_detail')->commit();
                    $return = ['error' => 0, 'msg' => '操作成功'];
                }else{
                    D('basket_detail')->rollback();
                    $return = ['error' => 1, 'msg' => '操作失败'];
                }
            }else{
                $result1 = D('basket_detail')->data(['status' => 0])->where(['basket_id' => $basket_id])->save();
            }
        }
        $where = ['basket_id' => $basket_id, 'status' => 1];
        $basket_detail = D('basket_detail')->where($where)->select();
        $pay_status=0;
        if(!$basket_detail) $pay_status=2;
        $field_pid = $basket_num = [];
        $productId_arr=[];
        foreach ($basket_detail as $k => $v) {
            $field_pid[$k]['id'] = $v['pid'];
            $basket_num[$v['pid']] = $v['num'];
            $productId_arr[]=$v['pid'];
        }

        $producResult=$this->productList(['id'=>['in',$productId_arr]]);
        $product_list=($producResult['error']==0)?$producResult['data']['list']:'';

        foreach($product_list as $k=>$v){ $product_list[$k]['num']=$basket_num[$v['id']]; }

        $productList=$this->goodsPrice($product_list,$is_invoice);

        $productList['basket_id']=$basket_id;
        $productList['pay_status']=$pay_status;//支付状态
        return $productList;
    }

    /*
     *商品价格
     * $product_list=[
     *      [
     *           id=>1,
     *           num=>1,
     *           .......
     *      ]
     * ]
     */
    public function goodsPrice($product_list,$is_invoice){ //开票和优惠的逻辑分开
        $priceCustomerId=session('userId');
        if(session('userType')==20){
            $parent=M('user_son')->where(['user_id'=>$priceCustomerId])->find();
            $priceCustomerId=$parent['p_id'];
        }
        $list=$this->customerProductPrice($priceCustomerId,$product_list);
        if($list['error']==0){ $list_discount=$list['data']['list']; }
        $order_status=0;//订单是否审核,0不审核，1审核

        foreach($product_list as $k=>$v){
            $product_list[$k]['bargainInfo']='';
            $onePrice=[];
            $onePrice['subtotal']=0;//小计
            $onePrice['discount_subtotal']=0;//优惠小计
            $onePrice['is_discount_num']=1;//折扣限额比例

            //判断是否可执行优惠价
            $oneProduct=$list_discount[$v['id']];

            if( $is_invoice && !$v['is_tax'] && !$oneProduct['price_invoice_change_pass']) $order_status=1;//开票，未进项，没有议价或换型号开票没启用---订单需要审核

            if($oneProduct){//有议价
                $product_list[$k]['bargainInfo']=$oneProduct;
                if($v['num']>=$oneProduct['min_buy']){//大于最小购买量
//                    if(isset($_POST['active'])&&$_POST['active']=='newOrder'){
//                        $discountPriceIsPass=$this->discountPriceIsPass($is_invoice,$_POST['pay_type'],$_POST['deposits_pay_type']);//优惠是否执行
//                        if($discountPriceIsPass){
//                            $is_invoice=0;
//                        }else{
//                            $is_invoice=1;
//                        }
//                    }
                    if($oneProduct['price_pass']&&$oneProduct['price_tax_pass']){//含税和不含税都有议价
                        if($is_invoice==1&&$oneProduct['price_tax_pass']==1){//开票

                            $onePrice['price_show']=$oneProduct['discount_price_tax'];//显示价格
                            $onePrice['price_true']=$oneProduct['discount_price_tax'];//计算单价

                        }else if(!$is_invoice&&$oneProduct['price_pass']==1){//不开票
                            //$onePrice['price_true']=$oneProduct['discount_price']*$v['tax'];//计算单价
                            $onePrice['price_show']=$oneProduct['discount_price_tax'];//显示价格
                            $onePrice['price_true']=$oneProduct['discount_price'];//计算单价

                            $onePrice['discount_subtotal']=$oneProduct['discount_price']*($v['tax']-1)*$v['num'];//优惠小计

                            if(isset($_POST['active'])&&$_POST['active']=='newOrder'){
                                $discountPriceIsPass=$this->discountPriceIsPass($is_invoice,$_POST['pay_type'],$_POST['deposits_pay_type']);//优惠是否执行
                                if($discountPriceIsPass){
                                    //$onePrice['price_show']=$oneProduct['discount_price']*$v['tax'];//显示价格
                                    $onePrice['price_show']=$oneProduct['discount_price_tax'];//显示价格
                                    $onePrice['price_true']=$oneProduct['discount_price'];//计算单价

                                    $onePrice['discount_subtotal']=($oneProduct['discount_price_tax']-$oneProduct['discount_price'])*$v['num'];//优惠小计
                                }else{
                                    $onePrice['price_show']=$oneProduct['discount_price_tax'];//显示价格
                                    $onePrice['price_true']=$oneProduct['discount_price'];//计算单价

                                    $onePrice['discount_subtotal']=($oneProduct['discount_price_tax']-$oneProduct['discount_price'])*$v['num'];//优惠小计
                                }
                            }

                        }


                    }else if(!$oneProduct['price_pass']&&$oneProduct['price_tax_pass']){//只含税有议价

                        $onePrice['price_show']=$oneProduct['discount_price_tax'];//显示价格
                        $onePrice['price_true']=$oneProduct['discount_price_tax'];//计算单价

                        //折扣限
                        if($is_invoice!=1&&$oneProduct['price_tax_pass']==1 && $oneProduct['discount_price_tax']*$v['num']>=$v['discount_num']){//不开票
                            if($oneProduct['price_invoice_change_pass']==1) $v['tax']=1.1;//换型号的计算优惠时税率固定1.1
                            $onePrice['discount_subtotal']=$oneProduct['discount_price_tax']*$v['num']*(1-1/$v['tax']);
                            $onePrice['is_discount_num']=0.9;

                            $onePrice['price_true']=$oneProduct['discount_price_tax']/$v['tax'];//计算单价
                        }
                    }else if($oneProduct['price_pass']&&!$oneProduct['price_tax_pass']){//只不含税有议价

                        $onePrice['price_show']=$oneProduct['discount_price']*$v['tax'];//显示价格

                        if($is_invoice==1&&$oneProduct['price_pass']==1){//开票

                            $onePrice['price_true']=$oneProduct['discount_price']*$v['tax'];//计算单价

                        }else if($is_invoice!=1&&$oneProduct['price_pass']==1){//不开票

                            $onePrice['price_true']=$oneProduct['discount_price'];//计算单价

                            $onePrice['discount_subtotal']=$oneProduct['discount_price']*($v['tax']-1)*$v['num'];//优惠小计
                        }
                    }
                }
                $onePrice['subtotal']=$onePrice['price_show']*$v['num'];//小计
//
                $dataB = I('post.');
                if (isset($dataB['active'])&&$dataB['active'] == 'newOrder'&&!$onePrice['subtotal']) {
                    $product_list[$k]['bargainInfo']=$oneProduct;
                }

            }

            if(!$onePrice['subtotal']){//商品没有议价
                foreach($v['price_section'] as $k2=>$v2){
                    if(!$v['num']) return ['error'=>1,'msg'=>'商品数量num没有设置'];
                    if($v['num']<$v2['end']){
                        $product_list[$k]['price_true']=$product_list[$k]['price_show']=$v2['price'];break;//根据区间选中的价格
                    }
                }
                if(!$product_list[$k]['price_true']){
                    $last_price=array_pop($v['price_section']);
                    $product_list[$k]['price_true']=$product_list[$k]['price_show']=$last_price['price'];//根据区间选中的价格
                }

                $onePrice['subtotal']=$product_list[$k]['price_true']*$v['num'];//小计
                if(!$is_invoice){//不开票达到折扣限
                    if( $onePrice['subtotal']>=$v['discount_num'] ){
                        $onePrice['discount_subtotal']=$onePrice['subtotal']*(1-1/$v['tax']);
                        $onePrice['is_discount_num']=0.9;

                        $product_list[$k]['price_true']=$product_list[$k]['price_true']/$v['tax'];//实付价格20180718
                    }
                }
            }

            $product_list[$k]=array_merge($product_list[$k],$onePrice);
        }

        return ['error'=>0,'data'=>['list'=>$product_list,'order_status'=>$order_status]];
    }

    /*
     *用户收货地址列表
     */
    public function userOrderAddress()
    {
        $address_list = [];
        $user_id = session('userId');
        $where=[
            'user_id' => $user_id,
        ];
        if(session('userType')==20){//企业子帐号
            $where[]=[
                "user_id = (select p_id from dx_user_son where user_id=$user_id)",
            ];
            $where['_logic']='or';
        }
        $address_list = D('user_order_address')->where($where)->select();
        return $address_list;
    }

    /*
     *用户发票地址列表
     */
    public function userOrderInvoice()
    {
        $address_list = [];
        $user_id = session('userId');
        $invoice_list = D('user_order_invoice')->where(['user_id' => $user_id])->select();
        $key='';
        $value='';
        foreach($invoice_list as $k=>$v){
            if($v['invoice_status']==1){
                $key=$k;
                $value=$v;
            }
            $invoice_list[$k]['area_code_name']=$this->getAddressByCode($v['area_code']);
            $invoice_list[$k]['company_area_code_name']=$this->getAddressByCode($v['company_area_code']);
        }
        if($value){
            unset($invoice_list[$key]);
            array_unshift($invoice_list,$value);
        }
        return $invoice_list;
    }

    /*
     *用户在线支付列表
     */
    public function userOrderPayment()
    {
        $payment_list = [];
        $user_id = session('userId');
        $where['user_id'] = ['in', [0, $user_id]];
        $where['status'] = 1;
        $payment_list = D('user_order_payment')->where($where)->select();
        return $payment_list;
    }

    /*
     *用户非在线支付列表
     */
    public function notOnlinePayment(){
        $payment_list = D('user_order_payment')->where('user_id is null')->select();
        return $payment_list;
    }

    /**
     *
     * @desc 用户支付平台信息
    1在线支付，2账期支付，3快递代收，4面对面付款,5银行转账，6线下支付
     */
    public function userPayPlatform(){
        $data=I('get.');
        $user_id=session('userId');
        $pay_type=$data['pay_type']?$data['pay_type']:1;
        $orderSn_arr=$data['orderSn_arr'];
        $payment=$this->userOrderPayment();//支付方式
        $is_delete=$data['is_delete'];//取消还款
        if($data['active']=='account'){//账期支付平台
            $account=D('user')->orderToAccountPay($orderSn_arr,$pay_type,$is_delete);
            if(IS_AJAX) die(json_encode($account));
            if($account['error']!=0){
                $this->error($account['msg'],'accountOrderList/account_true/1');
            }
            $this->assign('account',$account['data']['total']);
            if($pay_type==5){
                $this->error($account['msg'],'publicAccount/account_select_id/'.$account['data']['accountId']);
            }else if($pay_type==6){
                $this->error( '请找客服索要付款信息支付订单','accountOrderList/account_true/1');
            }
        }else{//订单支付平台
            $order_sn=$data['order_sn'];
            $return=[];
            $order_total=0;//订单总额
            $order_balances=0;//本次支付金额
            if(session('userType')==2){
                $user_id=$this->companySons(session('userId'));
                $user_id=[ 'in',$user_id['data'] ];
            }
            $userOrder=D('order')->where(['user_id'=>$user_id,'order_sn'=>$order_sn])->find();
            if(!$userOrder){//用户没有这个订单
                die(json_encode(['error'=>1,'msg'=>'订单信息错误']));
            }else{
                if($userOrder['order_status']==1){ $this->error('订单有未进项的商品，开票需要进入人工审核',U('myOrder'),3); }
                $goods_list=D('order_goods')->where(['order_sn'=>$order_sn])->select();
            }

            $pay=$this->userCurrentOnlinePay($order_sn);
            if($pay['error']!=0) $this->error($pay['msg'],U('myOrder'),3);
            $order_balances=$pay['data']['one'];

            $return=[
                'order_sn'=>$order_sn,
                'order_total'=>$userOrder['total'],
                'order_payHistory'=>$userOrder['already_paid'],
                'order_balances'=>$order_balances,
                'payment'=>$payment,
            ];
            $this->assign('goods_list',$goods_list);//商品列表
            $this->assign('goods_num',count($goods_list));//商品类量
            $this->assign('orderinfo',$return);
        }
        $this->assign('get',$data);
        $this->assign('payment',$payment);
        $this->display();
    }

    /*
     *最近一次账期信息
     */
    public function lastAccountInfo($user_id=''){
        $session=session();
        if(!$user_id) $user_id=$session['userId'];
        if($session['userInfo']['user_type']==20){
            $user_p=D('user_son')->where(['user_id'=>$user_id])->find();
            $user_id=$user_p['p_id'];
        }
        $user_account=D('user_account')->where(['user_id'=>$user_id])->find();
        if(!$user_account) return ['error'=>1,'msg'=>'用户没有账期'];
        $last_account=D('user_order_account')->where(['user_account_id'=>$user_account['id']])->order('id desc')->find();
        return $last_account;
    }

    /*
     *物流列表
     */
    public function userDelivery()
    {
        $delivery_list = [];
        $user_id = session('userId');
        $where['status'] = 1;
        $delivery_list = D('delivery')->where($where)->select();
        $delivery_level = $delivery_result = [];
        foreach ($delivery_list as $k => $v) {
            $delivery_level[$v['parent_id']][$v['id']] = $v;
        }
        foreach ($delivery_level[0] as $k => $v) {
            $delivery_result[$v['id']] = $delivery_level[$v['id']];
        }
        return ['level1' => $delivery_level[0], 'level2' => $delivery_result];
    }

    /*
     *保存用户支付方式,添加或更新或删除
     * params[
     *      edit='delete',删除
     *      'id', 有id更新，没有为添加
     * ]
     */
    public function editUserOrderPayment()
    {
        if (IS_AJAX) {
            $return = [];
            $data = I('post.');
            $user_id = session('userId');
            $add_data = [
                'user_id' => $user_id,
                'bank_name' => $data['bank_name'],
                'bank_acount' => $data['bank_acount'],
            ];
            if ($data['edit'] == 'delete') {//删除
                $where = ['id' => $data['id']];
                if (D('user_order_payment')->where($where)->delete())
                    $return = ['error' => 0, 'msg' => '删除成功'];
                else $return = ['error' => 1, 'msg' => '删除失败'];
            } else {
                if ($data['id']) {//更新
                    $add_data['id'] = $data['id'];
                    if (D('user_order_payment')->save($add_data))
                        $return = ['error' => 0, 'msg' => '更新成功'];
                    else $return = ['error' => 1, 'msg' => '更新失败'];
                } else {//添加
                    if (D('user_order_payment')->data($add_data)->add())
                        $return = ['error' => 0, 'msg' => '添加成功'];
                    else $return = ['error' => 1, 'msg' => '添加失败'];
                }
            }
            die(json_encode($return));
        }
        $this->display();
    }

    /*
     *保存用户收货地址,添加或更新或删除
     * params[
     *      edit='delete',删除
     *      'id', 有id更新，没有为添加
     * ]
     */
    public function editUserOrderAddress()
    {
        if (IS_AJAX) {
            $return = [];
            $data = I('post.');
            $act = I('get.');
            $user_id = session('userId');
            if ($act['act'] == 'del') {//删除
                $where = ['id' => $data['id']];
                if (D('user_order_address')->where($where)->delete())
                    $return = ['error' => 0, 'msg' => '删除成功'];
                else $return = ['error' => 1, 'msg' => '删除失败'];
            } else {
                $must_key=['area_code','address','consignee','mobile'];
                foreach($must_key as $k=>$v){
                    if(!$data[$v]) die(json_encode(['error'=>-1,'msg'=>'参数错误']));
                }
                $add_data = [
                    'user_id' => $user_id,
                    'consignee' => $data['consignee'],
                    'area_code' => $data['area_code'],
                    'address' => $data['address'],
                    'zipcode' => $data['zipcode']?$data['zipcode']:0000000,
                    'mobile' => $data['mobile'],
                    'status' => $data['status']?$data['status']:0,
                ];
                if ($act['id'] && $act['act'] == 'edit' ) {//更新
                    //查询 是否已存在默认
                    $res = D('user_order_address')->where('status=1 and user_id='.$user_id)->find();
                    if( $res && $data['status'] == 1 ){
                        D('user_order_address')->where(['id'=>$res['id']])->setField('status',0);
                    }
                    if(M('user_order_address')->field('id')->where(['id'=>$act['id'],'user_id'=>$add_data['user_id']])->find()){
                        $address_result=M('user_order_address')->where(['id'=>$act['id']])->save($add_data);
                    }else{
                        $address_result=M('user_order_address')->add($add_data);
                    }
                    if ($address_result !== false) $return = ['error' => 0, 'msg' => '更新成功'];
                    else $return = ['error' => 1, 'msg' => '更新失败'];
                } else {//添加
                    $data['status'] && D( 'user_order_address' )->where( [ 'user_id' => $user_id  ] )->setField( 'status', 0 );
                    if (D('user_order_address')->data($add_data)->add()) {
                        $address_id = D('user_order_address')->getLastInsId();
                        $return_data = ['address_id' => $address_id];
                        $return = ['error' => 0, 'msg' => '添加成功', 'data' => $return_data];
                    } else {
                        $return = ['error' => 1, 'msg' => '添加失败'];
                    }
                }
            }
            die(json_encode($return));
        }
        $this->display();
    }

    /*
     *保存用户发票,添加或更新或删除
     * params[
     *      edit='delete',删除
     *      'invoice_type',1为专票,2为普票
     *      'id', 有id更新，没有为添加
     * ]
     */
    public function editUserOrderInvoice()
    {
        if (IS_AJAX) {
            $return = [];
            $data = I('post.');
            $user_id = session('userId');
            $invoice_type = ($data['invoice_type'] == 2) ? 2 : 1;
            $invoice_status=($data['invoice_status']==1)?1:0;
            $add_data = [//普票
                'user_id' => $user_id,
                'invoice_type' => $invoice_type,
                'invoice_header' => $data['invoice_header'],
                'invoice_owner' => $data['invoice_owner'],
                'mobile' => $data['mobile'],
                'area_code' => $data['area_code'],
                'address' => $data['address'],
                'invoice_status' => $invoice_status,
            ];
            if ($invoice_type == 1) {//专票
                $add_data_2 = [
                    'company_area_code' => $data['company_area_code'],
                    'company_address' => $data['company_address'],
                    'company_phone' => $data['company_phone'],
                    'company_tax_code' => $data['company_tax_code'],
                    'company_bank_name' => $data['company_bank_name'],
                    'company_bank_acount' => $data['company_bank_acount']
                ];
                $add_data = array_merge($add_data, $add_data_2);
            }
            if ($data['edit'] == 'delete') {//删除
                $where = ['id' => $data['id']];
                if (D('user_order_invoice')->where($where)->delete())
                    $return = ['error' => 0, 'msg' => '删除成功'];
                else $return = ['error' => 1, 'msg' => '删除失败'];
            } else {
                foreach($add_data as $k=>$v){
                    if($k=='invoice_status') continue;
                    else if(!$v) die(json_encode(['error'=>1,'msg'=>$k.'参数不能为空']));
                }
                if ($data['id']&&M('user_order_invoice')->where(['id'=>$data['id'],'user_id'=>$user_id])->find()) {//更新
                    $add_data['id'] = $data['id'];
                    if (D('user_order_invoice')->save($add_data))
                        $return = ['error' => 0, 'msg' => '更新成功'];
                    else $return = ['error' => 1, 'msg' => '更新失败'];
                } else {//添加
                    if ($invoice_id = D('user_order_invoice')->data($add_data)->add()) {
                        $return_data = ['invoice_id' => $invoice_id];
                        $return = ['error' => 0, 'msg' => '添加成功', 'data' => $return_data];
                    } else {
                        $return = ['error' => 1, 'msg' => '添加失败'];
                    }
                }
                if($return['error']==0){
                    if($invoice_status==1){
                        if($add_data['id']) $invoice_id=$add_data['id'];//更新的invoice_id
                        D('user_order_invoice')->where(['user_id'=>$user_id,'id'=>['neq',$invoice_id]])->data(['invoice_status'=>0])->save();
                    }
                }
            }
            die(json_encode($return));
        }
        $this->display();
    }

    /*
     *运费
     * params=[
     * 1,到付，2寄付
     * ]
     */
    public function orderFreight($is_return=0,$type = 1,$select_delivery_id='')
    {
        $get=I('get.');
        if(!$is_return){
            $type = $get['type'];
            $select_delivery_id=$get['select_delivery_id'];
        }
        $error=['error'=>0,'msg'=>'运费'];
        if ($type == 1) {//到付
            $error['data']=['delivery_price'=>0];
        } else if($type == 2) {//寄付
            if($select_delivery_id){
                $delivery=D('delivery')->where(['id'=>$select_delivery_id])->find();
                if( !$delivery ){
                    $error=['error'=>1,'msg'=>'快递没有此项选择'];
                }else if($delivery['name']=='同城自取'){
                    $error['data']=['delivery_price'=>0];
                }else{//运费计算
                    $error['data']=['delivery_price'=>0];
                }
            }else{
                $error=['error'=>1,'msg'=>'快递没有此项选择'];
            }
        }
        if(!$is_return) die(json_encode($error));
        return $error;
    }

    /**
     * @desc 用户账期订单
     *
     */
    public function accountOrderList()
    {
        $get=I('get.');
        $this->assign('isAccountOrderList',1);

        $session=session();
        $user_id = $session['userId'];
        $this->userAccount($user_id);
        $this->assign('user_info', $session);

        $userId_arr=[];//账期的用户
        $lastAccountId='';//最后一次账期
        $masterUserId=$user_id;//账期的主人

        if($session['userType']==2){//企业用户
            $userSons=$this->companySons($user_id);
            $userId_arr=$userSons['data'];
        }else if($session['userType']==1){//个人用户
            $userId_arr=[$user_id];
        }else if($session['userType']==20){//子账号
            $user_father=M('user_son')->where(['user_id'=>$user_id])->find();
            $masterUserId=$user_father['p_id'];
            $userId_arr=[$user_id];
        }

        $userAccount=M('accounts','erp_')->where(['user_id'=>$masterUserId])->find();
        if($userAccount){
            $where_invoice_order=[
                'user_id'=>['in',$userId_arr],
                'ship_status'=>['neq',0],
                'pay_type'=>2,
                'pay_status'=>['neq',2],
                'order_sn not in (
                    select order_sn from (
	                    select order_sn,sum((p_num-knot_num-retreat_num)*pay_subtotal/p_num) as current_total from dx_order_goods group by order_sn
                    ) as ot where ot.current_total=0
                )'
            ];
            $orderList=$this->orderList_admin($where_invoice_order,'','','is_invoice desc,create_at desc');
            if($orderList['error']===0){
                $orderSn_arr=$invoiceOrder_arr=[];
                foreach($orderList['data']['list'] as $k=>$v){
                    $orderSn_arr[]=$v['order_sn'];
                    if($v['is_invoice']){
                        $invoiceOrder_arr['invoice'][]=$v;
                    }else{
                        $invoiceOrder_arr['invoice_no'][]=$v;
                    }
                }
                $payHistory=M('order_pay_history')->field('order_sn,account_pay_selected')->where(['order_sn'=>['in',$orderSn_arr],'type'=>2])->select();
                $payHistory_arr=$accountPayHistory_arr=[];
                foreach($payHistory as $k=>$v){
                    $payHistory_arr[$v['order_sn']]=$v['account_pay_selected'];
                    $accountPayHistory_arr[]=$v['account_pay_selected'];
                }

                $time=time();

                if(!empty($accountPayHistory_arr)){
                    $accountPayHistory_arr=array_unique($accountPayHistory_arr);
                    $accountPaySelected_arr=$account_pay_type=[];
                    $accountPaySelected=M('order_pay_history')->alias('oph')
                        ->field('aph.update_at,aph.id,oph.order_sn,aph.pay_type')
                        ->join('left join dx_account_pay_history as aph on aph.id=oph.account_pay_selected')
                        ->where(['aph.id'=>['in',$accountPayHistory_arr]])->select();
                    foreach($accountPaySelected as $k=>$v){
                        $lastTime=$time-strtotime($v['update_at']);
                        $show_time=0;
                        if($lastTime<7200){
                            $lastTime=7200-$lastTime;
                            $h=(int)($lastTime/3600);
                            if($h==1) $lastTime=$lastTime-3600;
                            $i=(int)($lastTime/60);
                            $s=str_pad((int)($lastTime%60),2,'0',STR_PAD_LEFT);
                            $show_time="$h:$i:$s";
                        }
                        $accountPaySelected_arr[$v['order_sn']]=$show_time;
                        $account_pay_type[$v['order_sn']]=$v['pay_type'];
                    }
                }

                if($invoiceOrder_arr['invoice']){
                    $invoice=[];
                    foreach($invoiceOrder_arr['invoice'] as $k=>$v){
                        $account_pay_selected=$payHistory_arr[$v['order_sn']]?$payHistory_arr[$v['order_sn']]:0;
                        $v['account_time']=$accountPaySelected_arr[$v['order_sn']];
                        $v['account_pay_type_select']=$account_pay_type[$v['order_sn']];
                        $invoice[$account_pay_selected][]=$v;
                    }
                }
                if($invoiceOrder_arr['invoice_no']){
                    $invoice_no=[];
                    foreach($invoiceOrder_arr['invoice_no'] as $k=>$v){
                        $account_pay_selected=$payHistory_arr[$v['order_sn']]?$payHistory_arr[$v['order_sn']]:0;
                        $v['account_time']=$accountPaySelected_arr[$v['order_sn']];
                        $v['account_pay_type_select']=$account_pay_type[$v['order_sn']];
                        $invoice_no[$account_pay_selected][]=$v;
                    }
                }
            }
        }
        $invoiceOrder_arr['invoice']=$invoice;
        $invoiceOrder_arr['invoice_no']=$invoice_no;
        $this->assign('userAccount', $userAccount);
        $this->assign('orderList', $invoiceOrder_arr);
        $this->display();
    }

    /*
     *本次确认账期支付总额
     */
    public function account_pay_true($user_order_account_id){
        $order_pay_history=D('order_pay_history as oph')->join('left join dx_order as o on o.order_sn=oph.order_sn')
            ->where(['oph.user_order_account_id'=>$user_order_account_id,'o.order_status'=>['neq',1]])->select();
        $account_pay_true=0;
        foreach($order_pay_history as $k=>$v){
            $account_pay_true+=$v['pay_amount'];
        }
        return $account_pay_true;
    }

    /*
     *用户账期----个人申请
     */
    public function accountOneRequest()
    {
        $return = ['error' => 0, 'msg' => '申请成功'];
        $data = I('post.');
        $user_id = session('userId');
        //		$account_file=$this->accountCompanyRequest();//账期协议
        //		if($account_file['error']==1) return $account_file;
        //		$add_data['com_quota_img']=$account_file['data']['path'];


        $type = 1;//账期类别，1个人，2企业
        if ($data['active'] == 'oneRequest') {
            //			$result=$this->accountRequestCondition($data['day_type']);
            //			if($result['error']!=0) die(json_encode($result));

            $add_data['user_id'] = $user_id;
            $add_data['type'] = $type;
            $add_data['status'] = 3;//提交审核
            $add_data['mobile'] = $data['mobile'];
            $add_data['quota'] = $data['quota'];
            $add_data['day_type'] = $data['day_type'];
            $add_data['human_id'] = $data['human_id'];
            $add_data['bank_acount'] = $data['bank_acount'];
            $add_data['com_quota_img']=$data['com_quota_img'];
            $add_data['com_human_id_img1']=$data['com_human_id_img1'];
            $add_data['com_human_id_img2']=$data['com_human_id_img2'];
            foreach ($add_data as $k => $v) {
                if (!$v) die(json_encode(['error' => 1, 'msg' => '参数不能为空']));
            }
            $user_account=M('user_account')->where(['user_id'=>$user_id])->find();
            $user_account_temp=M('user_account_temp')->where(['user_id'=>$user_id])->find();
            $add_data_zhanwei=$add_data;
            $add_data_zhanwei['status']=3;
            if($user_account_temp){
                if(!$user_account){
                    M('user_account')->data($add_data_zhanwei)->add();
                }
                $result=M('user_account_temp')->data($add_data)->where(['user_id'=>$user_id])->save();
                if($result!==false) $error=['error'=>0,'msg'=>'更新成功'];
                else $error=['error'=>1,'msg'=>'更新失败'];
            }else{
                $add_data['user_id']=$user_id;
                $result=M('user_account_temp')->data($add_data)->add();
                if(!$user_account){
                    M('user_account')->data($add_data_zhanwei)->add();
                }
                if($result){
                    $error=['error'=>0,'msg'=>'添加成功'];
                    session('user_account_status',$add_data['status']);
                }else{
                    $error=['error'=>1,'msg'=>'添加失败'];
                }
            }
            if(IS_AJAX) die(json_encode($error));
            return $error;
        }
    }

    /*
     *用户账期----企业申请
     */
    public function accountCompanyRequest()
    {
        $data = I('post.');
        $user_id = session('userId');
        $savePath=$data['path']?$data['path'].'/':'account/';
        $type = 2;//账期类别，1个人，2企业
        $upload = new \Think\Upload();// 实例化上传类
        $upload->maxSize = 3145728;// 设置附件上传大小
        $upload->exts = array('jpg', 'gif', 'png', 'jpeg', 'doc', 'docx','pdf');// 设置附件上传类型
        $upload->rootPath = './Uploads/'; // 设置附件上传根目录
        $upload->savePath = $savePath; // 设置附件上传（子）目录
        // 上传文件
        $info = $upload->upload();
        if (!$info) return ['error' => 1, 'msg' => '上传失败'];// 上传错误提示错误信息
        // 保存当前数据对象
        $active = $data['active'];//更新哪个字段
        //		$file_full_path = 'http://' . $_SERVER['HTTP_HOST'] .__ROOT__. '/' . substr($upload->rootPath, 2) . $info['file']['savepath'] . $info['file']['savename'];
        $file_full_path =  '/' . substr($upload->rootPath, 2) . $info['file']['savepath'] . $info['file']['savename'];
        $add_data = [$active => $file_full_path, 'type' => $type];
        $has_account = D('user_account')->where(['user_id' => $user_id])->find();
        return ['error' => 0, 'msg' => '上传成功', 'data' => ['path' => $file_full_path]];
    }

    /*
     *用户账期企业申请提交按钮
     */
    public function accountCompany(){
        $data=I('post.');
        $user_id=session('userId');

        if(IS_AJAX){
            //			$result=$this->accountRequestCondition($data['day_type']);
            //			if($result['error']!=0) die(json_encode($result));

            $rules = [
                ['com_quota_img', 'require','月结协议不能为空'],
                ['com_business_img', 'require','营业执照不能为空'],
                ['com_bank_img', 'require','银行账号申请许可不能为空'],
                ['com_human_id_img1', 'require','法人身份证正面不能为空'],
                ['com_human_id_img2', 'require','法人身份证反面不能为空'],
                ['account_agreement', 'require','账号使用协议'],
            ];
            $add_data=[
                'status' => 3,//提交审核
                'day_type'=>$data['day_type'],
                'com_quota_img'=>$data['com_quota_img'],
                'com_business_img'=>$data['com_business_img'],
                'com_bank_img'=>$data['com_bank_img'],
                'com_human_id_img1'=>$data['com_human_id_img1'],
                'com_human_id_img2'=>$data['com_human_id_img2'],
                'account_agreement'=>$data['account_agreement'],
            ];
            if( !M('user_account_temp')->validate($rules)->create($add_data) ){
                $error=['error'=>1,'msg'=>D('user_account')->getError()];
                $this->error($error['msg']);
            }
            $user_account=M('user_account_temp')->where(['user_id'=>$user_id])->find();
            if($user_account){
                $result=M('user_account_temp')->data($add_data)->where(['user_id'=>$user_id])->save();
                if($result!==false) $error=['error'=>0,'msg'=>'更新成功'];
                else $error=['error'=>1,'msg'=>'更新失败'];
            }else{
                $add_data['user_id']=$user_id;
                $result=M('user_account_temp')->data($add_data)->add();
                if($result){
                    $error=['error'=>0,'msg'=>'添加成功1'];
                    session('user_account_status',3);
                } else {
                    $error=['error'=>1,'msg'=>'添加失败'];
                }
            }
            die(json_encode($error));
        }

        //子账号获取母账号账期
        $session=session();
        if($session['userInfo']['user_type']==20){
            $user_p=D('user_son')->where(['user_id'=>$user_id])->find();
            $user_id=$user_p['p_id'];
        }
        $accountRequestInfo=M('user_account')->where(['user_id'=>$user_id])->find();
        if(!$accountRequestInfo) redirect(U('Home/Order/accountRequest'));
        $userAccount=D('user')->userAccountIsPass($user_id);

        $this->assign('accountRequestInfo',$accountRequestInfo);
        $this->assign('userAccount',$userAccount);
        $this->assign('isAccountCompany',1);
        $this->display();
    }

    /*
     * 账期说明
     * */
    public function accountExplain(){
        $user_id=session('userId');
        $user_account=D('user_account')->where(['user_id'=>$user_id])->find();
        $this->assign('user_account',$user_account);
        $this->assign('isAccountExplain',1);
        $this->display();
    }

    /*
     *用户账期申请
     */
    public function accountRequest()
    {
        $user_id = session('userId');
        $user = D('user')->where(['id' => $user_id])->find();
        $data = I('post.');
        if ($data['active']) {
            //			$is_edit_status=D('user_account')->where(['user_id'=>$user_id])->find();
            //            if(in_array($is_edit_status['status'],[1,3])) die(json_encode(['error'=>1,'msg'=>'帐期使用中']));
            $error = [];
            $error = $this->accountCompanyRequest();
            die(json_encode($error));
        }
        $session=session();
        if($session['userInfo']['user_type']==20){
            $user_p=D('user_son')->where(['user_id'=>$user_id])->find();
            $user_id=$user_p['p_id'];
        }
        $user_account = D('user_account')->where(['user_id' => $user_id])->find();
        $account_types=$this->getBaseAccountTypes(); //账期类型
        $this->assign('isAccountCompany',1);
        $this->assign('user_account', $user_account);
        $this->assign('account_types',$account_types['data']);
        $this->assign('user_type', $user['user_type']);
        $this->display();
    }

    /*
     *
     *获取账期类型
     */
    public function getBaseAccountTypes($id='',$is_disabled=0){
        $accounts='';
        $session=session();
        $user_type=($session['userInfo']['user_type']==20)?2:$session['userInfo']['user_type'];

        if(!$id) $accounts = D('account_type')->where(['is_disabled'=>$is_disabled,'user_type'=>$user_type])->select();
        else $accounts = D('account_type')->where(['id'=>$id,'is_disabled'=>$is_disabled])->select();
        if($accounts) return ['error'=>0,'data'=>$accounts];
        else return ['error'=>1,'data'=>'','msg'=>'没有数据'];
    }

    /*
     * 我的所有订单
     *
     */
    public function myOrder()
    {
        !is_login() && redirect(U('Home/Account/login'));
        $get=I('get.');
        $user_id = session('userId');
        $order_by='create_at desc';
        $where=[];

        $search_more = 0;
        //搜索条件
        if( isset($get['action']) && !is_null($get['action']) ){
            $search_more=1;
            switch( (int)$get['action'] ){
                case 0: //待付款
                    $where['order_status'] = ['in', [0,1,2]]; //订单为新单或审核
                    $where['pay_status'] = 0;
                    break;
                case 1://待发货
                    $where['order_status'] = ['in', [0,1,2]]; //订单为新单或审核或部分付款
                    $where['ship_status'] = 0;
                    break;
                case 2://待收货
                    $where['order_status'] = ['in', [0,1,2]];//订单为新单或审核或部分付款
                    $where['ship_status'] = ['in',[1,2,3]];//部分发货 全部发货 部分收货
                    break;
                case 3://待评价
                    $where['order_status'] = 3;
                    $where['is_comment'] =1;
                    break;
                case 4://已取消
                    $where['order_status'] = 101;
                    break;
            }
        }
        //其他参数
        //支付方式搜索
        if( isset($get['pay_type']) && !is_null($get['pay_type']) ){
            $where['pay_type'] = (int)$get['pay_type'];
            $search_more=1;
        }
        //下单时间搜索
        if( isset( $get['create_at_start']) && !is_null( $get['create_at_start'] )  ){
            $where[] = ['create_at'=>['gt', date( 'Y-m-d 00:00:00',strtotime($get['create_at_start']) )]];
            $search_more=1;
        }
        if( isset( $get['create_at_end']) && !is_null( $get['create_at_end'] )  ){
            $where[] = ['create_at'=>[ 'lt',  date( 'Y-m-d 00:00:00',strtotime($get['create_at_end'].' +1 day') ) ]];
            $search_more=1;
        }
        if( isset( $get['is_comment'] ) && !is_null( $get['is_comment'] )  ){
            $where['is_comment'] = (int)$get['is_comment'];
            $search_more=1;
        }

        if( isset( $get['order_status'] ) && !is_null( $get['order_status'] )  ){
            $where['order_status'] = (int)$get['order_status'];
            $search_more=1;
        }

        $companySons=$this->companySons($user_id);//企业子账号信息
        $users=$companySons['data'];
        if(isset($get['user_id'])&&$get['user_id']&&in_array($get['user_id'],$users)){
            $where['user_id']=$get['user_id'];
        }else{
            $where['user_id']=['in',$users];
        }
        $this->assign('search_more',$search_more);//前端显示效果的要求
        if(isset($get['p_sign'])){
            $where[]="order_sn in (select order_sn from dx_order_goods where p_id in (select id from dx_product where p_sign like '%".$get['p_sign']."%' or order_sn like '%".$get['p_sign']."%') group by order_sn)";
        }

        $page=$get['page']?$get['page']:1;
        $pageSize=$get['pageSize']?$get['pageSize']:C('PAGE_PAGESIZE');

        $list=$this->orderList_admin($where,$page,$pageSize,$order_by);
        if($list['error']==0){
            foreach ($list['data']['list'] as &$v){
                $hyres=M('order_sync_hy')->where(['order_no'=>$v['order_sn'],'is_recive'=>0])->select();
                if($hyres){
                    if (count($hyres)>1){
                        $v['is_receipt']=2;
                    }else{
                        $v['is_receipt']=1;
                    }
                    $v['display_kont']=0;
                }else{
                    $v['is_receipt']=0;
                    if($v['pay_type']==1&&$v['pay_status']==2&&$v['ship_status']==0&&$v['total']!=0){
                        $v['display_kont']=1;
                    }elseif ($v['ship_status']==3&&$v['total']!=0){
                        $v['display_kont']=1;
                    }elseif ($v['ship_status']==0&&$v['total']==0){
                        $v['display_kont']=1;
                    }elseif(($v['ship_status']==0&&$v['pay_status']==2)||($v['order_type']==1&&$v['deposits_pay_type']==1&&$v['pay_type']!=1&&$v['ship_status']==0&&$v['pay_status']==1)){
                        $v['display_kont']=1;
                    }elseif($v['pay_type']!=1&&$v['pay_status']==1&&$v['ship_status']==0){
                        $v['display_kont']=1;
                    }else{
                        $v['display_kont']=0;
                    }
                }
                //                $where_pay_history=[//定单实付金额
                //                    [
                //                        'type'=>['neq',2],
                //                        [
                //                            'type'=>2,
                //                            'account_pay_id'=>['neq',0]
                //                        ],
                //                        '_logic'=>'or'
                //                    ],
                //                    'order_sn'=>$v['order_sn'],
                //                ];
                $pay=M('order_pay_history')->field('sum(pay_amount) as pay_amount_total')->where(['order_sn'=>$v['order_sn']])->find();
                //echo M()->getLastSql();

                $pay['pay_amount_total']=$pay['pay_amount_total']?:0;
                $erpPay=M('order_sync_hy')->field('sum(fcxacount) as fcxacount_total')->where(['order_no'=>$v['order_sn']])->find();
                //echo M()->getLastSql();
                $erpPay['fcxacount_total']=$erpPay['fcxacount_total']?:0;
                if($v['pay_type']==2){
                    $pay1=M('order_pay_history')->where(['order_sn'=>$v['order_sn']])->select();

                    $my=0.00;
                    if ($pay1){
                        foreach ($pay1 as $p1){
                            if($p1['type']!=2){
                                $my+=$p1['pay_amount'];
                            }else{
                                if ($p1['account_pay_id']!=0){
                                    $my+=$p1['pay_amount'];
                                }
                            }
                        }
                    }
                    if($my>$erpPay['fcxacount_total']){
                        $v['order_has_pay']=$my;
                    }else{
                        $v['order_has_pay']=$erpPay['fcxacount_total'];
                    }
                }else{
                    if($erpPay['fcxacount_total']>$pay['pay_amount_total']){
                        $v['order_has_pay']=$erpPay['fcxacount_total'];
                    }else{
                        $v['order_has_pay']=$pay['pay_amount_total'];
                    }
                }
            }
        }
        $sonList=D('user')->userSonInfo($user_id);
        $this->assign( 'sonList', $sonList['data']['list'] );

        $this->assign( 'get', $get );
        $this->assign( 'orderList', $list['data']['list'] );// 赋值数据集
        $Page = new \Think\Page( $list['data']['count'], $pageSize );// 实例化分页类 传入总记录数和每页显示的记录数
        $Page->setConfig( 'prev', '<上一页' );
        $Page->setConfig( 'next', '下一页>' );
        $show = $Page->show();// 分页显示输出
        if ( $list['data']['count'] > $pageSize ) $this->assign( 'page', $show );// 赋值分页输出
        $this->assign('order_status_list', C('ORDER_STATUS'));//订单所有状态
        $this->assign('isMyOrder', 1);
        $this->display();
    }

    /*
     * 订单详情
     */
    public function detail()
    {
        $request=I('get.');
        $orderList=$this->orderList_admin(['order_sn'=>$request['order_sn']]);
        $data = $orderList['data']['list'][0];
        $hyInfo = [];
        if( $data['ship_status'] > 0 ) {
            //查询货运信息
            $mapdetail['order_no']=array('eq',$request[ 'order_sn' ]);
            $mapdetail['is_lock']=array('neq',0);
            $hyInfo = M( 'order_sync_hy' )->where($mapdetail)->select();
        }
        //查询快递信息
        foreach( $hyInfo as $k=>$v ){
            if( (int)$v['is_kd'] === 1 ){
                $kdNum = $v['hy_num'];
                $kdCode = $v['kd_code'];
                if( !$kdCode || empty($kdCode)  ){
                    $kd = KdApi::getInit();
                    $kdArr= $kd::getKdCodeByKdNum( $kdNum, true );
                    if( $kdArr ){
                        $kdCode = $kdArr['kdCode'];
                        $hyInfo[$k]['kd_code'] = $kdCode;
                        $hyInfo[$k]['hy_name'] = $kdArr['kdName'];
                        M('order_sync_hy')->where([ 'order_no' => $request[ 'order_sn' ], 'erp_th_no'=>$v['erp_th_no']])
                            ->save([
                                'kd_code'=>$kdCode,
                                'is_kd'=>1,
                            ]);
                        $hyInfo[$k]['traces'] = $kdArr['Traces'];
                    }
                }else{
                    //查询货运资料
                    $kd = new KdController();
                    $kdInfoData = $kd->info($kdCode, $kdNum, $request['order_sn']);
                    $hyInfo[$k]['traces'] = $kdInfoData['traces'];
                }
            }
        }
        $data['pay_name'] = C( 'SHOP_ORDER_PAY_TYPE.' . $data[ 'pay_type' ] );
        if( (int)$data['ship_type'] === 2  || (int)$data['ship_type'] === 1 ){
            if( floatval($data['total']) > 1000 ){
                $data['shipvia'] = '快递/物流寄付';
            }else{
                $data['shipvia'] = '快递/物流到付';
            }
        }
        $data['hyInfo'] = $hyInfo;
        $this->assign('data', $data);
        $this->display('orderDetail');
    }

    /*
     * 取消订单操作
     */
    public function cancleOrder()
    {
        if(IS_AJAX){
            $request=I('post.');
            $order_sn=$request['order_sn'];
            if(!$order_sn) return ['error'=>1,'msg'=>'参数错误'];
            $orderList=$this->orderList_admin(['order_sn'=>$order_sn]);
            if($orderList['error']!=0) return ['error'=>1,'msg'=>'订单信息错误'];
            $orderGoods=$orderList['data']['list'][0]['goodsList'];

            $orderres=M('order')->where(['order_sn'=>$order_sn])->find();
            if ($orderres['order_status']==2||$orderres['order_status']==3||$orderres['order_status']==101||$orderres['order_status']==100||$orderres['pay_status']==1||$orderres['pay_status']==2){
                if(!($orderres['pay_status']==1&&$orderres['ship_status']==0)){
                    die(json_encode(['error'=>1,'msg'=>'订单不允许删除']));
                }
                //die(json_encode(['error'=>1,'msg'=>'订单不允许删除']));
                //return ['error'=>1,'msg'=>'订单允许删除'];
            }
            $order_sync=M('order_sync')->where(['order_sn'=>$order_sn])->find();
            //print_r($order_sync);
            if($order_sync&&($order_sync['sync_status']==0||$order_sync['sync_status']==4)){
                die(json_encode(['error'=>1,'msg'=>'订单暂时不允许删除,请稍后再试']));
                //return ['error'=>1,'msg'=>'订单暂时不允许删除,请稍后再试'];
            }
            $error=0;
            $m=M('product','erp_');
            $m->startTrans();

            //将订单同步状态改为订单取消/删除状态
            $sModel = M('order_sync');
            $sModel->where(['order_sn'=>$order_sn])->save(['order_status'=>3]);
            $where=['order_sn'=>$order_sn,'order_status'=>['in',[0,1]]];
            $result=D('order')->changeOrderStatus($where,100);//订单信息

            if($result['error']!=0){
                $m->rollback();
                $delete_request=D('order')->changeOrderStatus(['order_sn'=>$order_sn,'order_status'=>['neq',3]],101);//取消订单申请
                if($delete_request ){
                    die(json_encode(['error'=>0,'msg'=>'订单申请取消成功,等待工作人员确认']));
                }else{
                    die(json_encode(['error'=>1,'msg'=>'订单申请取消失败,请联系客服']));
                }
            }elseif($result['error']==0){
                //$redis=Redis::getInstance();

                if($order_sync&&$order_sync['sync_status']!=2){
                    if($order_sync['sync_status']!=3){
                        $sres=M('order')->where(['order_sn'=>$order_sn])->save(['delstatus'=>3]);
                        if($sres===false){
                            $m->rollback();
                            die(json_encode(['error'=>1,'msg'=>'订单申请取消失败,请联系客服']));
                        }
                        $key='delOrderSyncList';
                        $res = Redis::getInstance()->sAdd($key, $order_sn);
                        if($res===false){
                            $m->rollback();
                            die(json_encode(['error'=>1,'msg'=>'订单申请取消失败,请联系客服']));
                        }
                    }
                }
            }

            //            foreach($orderGoods as $k=>$v){//库存信息
            //                if(!$v['fitemno']){
            //                    $m->rollback();
            //                    $error=3;
            //                    break;
            //                }
            //                $oneErp=$m->where(['ftem'=>$v['fitemno']])->find();
            //                if(!$oneErp){
            //                    $error=1;
            //                    break;
            //                }
            //                $oneGoods=[
            //                    'ftem'=>$v['fitemno'],
            //                    'store'=>$oneErp['store']+$v['p_num'],
            //                ];
            //                $oneResult=$m->where(['ftem'=>$v['fitemno']])->save($oneGoods);
            //                if(!$oneResult){
            //                    $error=2;
            //                    break;
            //                }
            //            }
            if($error){
                $m->rollback();
                $result = ['error'=>$error,'msg'=>'订单删除失败'];
            }else{
                $user_id=session('userId');
                //发送消息通知
                MsgController::writeMsgToUserSale( $user_id, '客户取消订单'.$order_sn, '订单编号:'.$order_sn.'{}取消时间:'.date('Y-m-d H:i:s') );

                $m->commit();

                $result = ['error'=>$error,'msg'=>'订单删除成功'];
            }
            die(json_encode($result));
        }
    }

    /*
     * 待付款列表
     *
     */
    public function payment()
    {
        $user_id = session('userId');
        $users='';
        $companySons=$this->companySons();//企业子账号信息
        if($companySons['error']==0){
            $users=$companySons['data'];
        }
        $where = 'pay_statsu = 0 and pay_type in(1,5,6)';
        $data = $this->orderList($where,$users);
        $orderList = $data['order'];
        //查询订单中的商品
        foreach ($orderList as $key => $order) {
            $field = 'g.id,g.order_sn, g.p_id, g.p_name, g.p_price,g.p_num, g.p_subtotal, p.name,p.p_sign, p.cate_id, p.brand_id, p.model,p.store,p.spec
					, p.min, p.package, p.batch, p.delivery, p.is_earnest, p.earnest_scale,d.img,r.retreat_type, r.retreat_money, r.retreat_desc, r.retreat_img
					, r.handle_status, r.cargo_status';
            $join = '__PRODUCT__ as p ON p.id = g.p_id';
            $join2 = '__PRODUCT_DETAIL__ as d ON d.p_id = g.p_id';
            $join3 = '__ORDER_RETREAT__ as r ON r.p_id = g.p_id AND r.order_sn = g.order_sn';
            $goods = D('order_goods')->alias('g')->field($field)->join($join, 'LEFT')->join($join2,'LEFT')->join($join3,'LEFT')->where(['g.order_sn' => $order['order_sn']])->select();
            $orderList[$key]['goods'] = $goods;
            if ($goods['is_earnest'] == 0) {
                $orderList[$key]['goods'] = $goods;
            } else {
                unset($orderList[$key]);
            }
        }
        //print_r($orderList);
        $show = $data['page'];// 分页显示输出
        $this->assign('page', $show);// 赋值分页输出
        $this->assign('orderList', $orderList);
        $this->assign('isPayment',1);
        $this->display();
    }

    /*
     *  待发货
     */
    public function ship()
    {
        $user_id = session('userId');
        $users='';
        $companySons=$this->companySons();//企业子账号信息
        if($companySons['error']==0){
            $users=$companySons['data'];
        }
        $where = ['ship_status' => 0];
        $data = $this->orderList($where,$users,1,'o.id DESC');
        $orderList = $data['order'];
        //查询订单中的商品
        foreach ($orderList as $key => $order) {
            $field = 'g.id,g.order_sn, g.p_id, g.p_name, g.p_price,g.p_num, g.p_subtotal, p.name,p.p_sign, p.cate_id, p.brand_id, p.model,p.store,p.spec
					, p.min, p.package, p.batch, p.delivery, p.is_earnest, p.earnest_scale,d.img,r.retreat_type, r.retreat_money, r.retreat_desc, r.retreat_img
					, r.handle_status, r.cargo_status';
            $join = '__PRODUCT__ as p ON p.id = g.p_id';
            $join2 = '__PRODUCT_DETAIL__ as d ON d.p_id = g.p_id';
            $join3 = '__ORDER_RETREAT__ as r ON r.p_id = g.p_id AND r.order_sn = g.order_sn';
            $goods = D('order_goods')->alias('g')->field($field)->join($join, 'LEFT')->join($join2,'LEFT')->join($join3,'LEFT')->where(['g.order_sn' => $order['order_sn']])->select();
            $orderList[$key]['goods'] = $goods;
            if ($goods['is_earnest'] == 0) {
                $orderList[$key]['goods'] = $goods;
            } else {
                unset($orderList[$key]);
            }
        }
        $show = $data['page'];// 分页显示输出
        $this->assign('page', $show);// 赋值分页输出
        $this->assign('orderList', $orderList);
        $this->assign('isShip',1);
        $this->display();
    }


    /*
     *
     *  母账号的子账号
     */
    public function companySons($user_id){
        $session=session();
        $user_id=isset($user_id)?$user_id:session('userId');
        $where='';
        $company_users_id[]=$user_id;
        if($session['userInfo']['user_type']==2){//企业账号
            //            $user_sons=M('user_son')->where(['p_id'=>$session['userId'],'is_delete'=>0])->select();
            $user_sons=M('user_son')->where(['p_id'=>$session['userId']])->select();
            foreach($user_sons as $k=>$v){
                $company_users_id[]=$v['user_id'];
            }
        }
        return ['error'=>0,'data'=>$company_users_id];
    }

    /*
     *
     *  待收货列表
     */
    public function delivery()
    {
        $user_id = session('userId');
        $session=session();
        $where='';
        if($session['userInfo']['user_type']==2){//企业账号
            $user_sons=D('user_son')->where(['p_id'=>$user_id,'is_delete'=>0])->select();
            $company_users_id=[];
            foreach($user_sons as $k=>$v){
                $company_users_id[]=$v['user_id'];
            }
            $company_users_id[]=$user_id;
        }
        $data = $this->orderList(['order_status'=>3],$company_users_id);
        $orderList = $data['order'];
        //查询订单中的商品
        foreach ($orderList as $key => $order) {
            $field = 'g.id,g.order_sn, g.p_id, g.p_name, g.p_price,g.p_num,p.name, g.p_subtotal, p.p_sign, p.cate_id, p.brand_id, p.model,p.store,p.spec
					, p.min, p.package, p.batch, p.delivery, p.is_earnest, p.earnest_scale,d.img,r.retreat_type, r.retreat_money, r.retreat_desc, r.retreat_img
					, r.handle_status, r.cargo_status';
            $join = '__PRODUCT__ as p ON p.id = g.p_id';
            $join2 = '__PRODUCT_DETAIL__ as d ON d.p_id = g.p_id';
            $join3 = '__ORDER_RETREAT__ as r ON r.p_id = g.p_id AND r.order_sn = g.order_sn';
            $goods = D('order_goods')->alias('g')->field($field)->join($join, 'LEFT')->join($join2, 'LEFT')->join($join3,'LEFT')->where(['g.order_sn' => $order['order_sn']])->select();
            $orderList[$key]['goods'] = $goods;
        }
        $show = $data['page'];// 分页显示输出
        $this->assign('page', $show);// 赋值分页输出
        $this->assign('orderList', $orderList);
        $this->assign('isDelivery',1);
        $this->display();
    }
    public function allDelivery(){
        $order_sn = I('order_sn');
        if (empty($order_sn)){
            $this->ajaxReturn(['error'=>1,'msg'=>'缺少参数!请检查']);
        }
        //查询当前订单是否属于用户
        $order = M('order');
        $user_id = session('userId');
        M()->startTrans();
        $info = $order->field('user_id,pay_status,ship_status')->where(['order_sn'=>$order_sn,'user_id'=>$user_id])->find();
        if(!$info){
            M()->rollback();
            $this->ajaxReturn(['error'=>1,'msg'=>'订单数据不存在!']);
        }else{
            $hysave = M( 'order_sync_hy' )->where(['order_no'=>$order_sn])->save(['is_recive'=>1,'c_recive'=>1]);
            if($hysave===false){
                M()->rollback();
                $this->ajaxReturn(['error'=>1,'msg'=>'订单货运数据不存在!']);
            }else{
                $ordersave=orderStatus($order_sn);
                $res=$order->where(['order_sn'=>$order_sn])->save($ordersave);
                if($res===false){
                    M()->rollback();
                    $this->ajaxReturn(['error'=>1,'msg'=>'订单收货有误,请联系客服!']);
                }else{
                    M()->commit();
                    MsgController::writeMsgToUserSale( $user_id, '订单'.$order_sn.'已确认收货', '订单编号:'.$order_sn.'{}确认收货时间:'.date('Y-m-d H:i:s') );
                    $this->ajaxReturn(['error'=>0,'msg'=>'收货操作成功!']);
                }
            }
        }
    }
    /*
     * 确认收货操作
     * @param varchar  order_sn 订单编号
     *
     */
    public function doDelivery()
    {
        $order_sn = I('order_sn');
        $erp_th_no = I('partid');

        if (empty($order_sn) && empty( $erp_th_no )){
            $this->ajaxReturn(['error'=>1,'msg'=>'缺少参数!请检查']);
        }
        //查询当前订单是否属于用户
        $order = M('order');
        $user_id = session('userId');
        $model=M();
        M()->startTrans();
        $info = $order->field('user_id,pay_status,ship_status')->where(['order_sn'=>$order_sn])->find();
        if( !$info ){
            M()->rollback();
            $this->ajaxReturn(['error'=>1,'msg'=>'订单数据不存在!']);
        }
        $syncHy = M( 'order_sync_hy' )->where(['order_no'=>$order_sn, 'erp_th_no'=>$erp_th_no])->find();
        if( !$syncHy ){
            M()->rollback();
            $this->ajaxReturn(['error'=>1,'msg'=>'订单货运数据不存在!']);
        }else{
            $hysave = M( 'order_sync_hy' )->where(['order_no'=>$order_sn, 'erp_th_no'=>$erp_th_no])->save(['is_recive'=>1,'c_recive'=>1]);
            if($hysave===false){
                M()->rollback();
                $this->ajaxReturn(['error'=>1,'msg'=>'订单收货有误,请联系客服!']);
            }else{
                $ordersave=orderStatus($order_sn);
                $res=$order->where(['order_sn'=>$order_sn])->save($ordersave);
                if($res===false){
                    M()->rollback();
                    $this->ajaxReturn(['error'=>1,'msg'=>'订单收货有误,请联系客服!']);
                }else{
                    M()->commit();
                    MsgController::writeMsgToUserSale( $user_id, '订单'.$order_sn.'已确认收货', '订单编号:'.$order_sn.'{}确认收货时间:'.date('Y-m-d H:i:s') );
                    $this->ajaxReturn(['error'=>0,'msg'=>'收货操作成功!']);
                }
            }
        }
    }
    /*
     *  待评价列表
     *
     * @return 待评价列表展示
     *
     */
    public function appraise()
    {
        !is_login() && redirect(U('Home/Account/login'));
        $where = ['order_status' => 4];
        $users='';
        $companySons=$this->companySons();//企业子账号信息
        if($companySons['error']==0){
            $users=$companySons['data'];
        }
        $data = $this->orderList($where,$users);
        $orderList = $data['order'];
        //查询订单中的商品
        foreach ($orderList as $key => $order) {
            $field = 'g.id,g.order_sn, g.p_id, g.p_name, g.p_price,g.p_num,p.name,g.p_subtotal,p.p_sign, p.cate_id, p.brand_id, p.model,p.store,p.spec
					, p.min, p.package, p.batch, p.delivery, p.is_earnest, p.earnest_scale,d.img,r.retreat_type, r.retreat_money, r.retreat_desc, r.retreat_img
					, r.handle_status, r.cargo_status';
            $join = '__PRODUCT__ as p ON p.id = g.p_id';
            $join2 = '__PRODUCT_DETAIL__ as d ON d.p_id = g.p_id';
            $join3 = '__ORDER_RETREAT__ as r ON r.p_id = g.p_id AND r.order_sn = g.order_sn';
            $goods = D('order_goods')->alias('g')->field($field)->join($join, 'LEFT')->join($join2, 'LEFT')->join($join3,'LEFT')->where(['g.order_sn' => $order['order_sn']])->select();
            $orderList[$key]['goods'] = $goods;
        }
        //print_r($orderList);
        $show = $data['page'];// 分页显示输出
        $this->assign('page', $show);// 赋值分页输出
        $this->assign('orderList', $orderList);
        $this->assign('isAppraise',1);
        $this->display();
    }

    /*
     * 我的评价
     * @return 评价列表展示
     */
    public function myAppraise()
    {
        $user_id = session('userId');
        $field = 'c.id, c.star, c.content, c.create_at, p.p_sign, d.img_path ,pimg.img as cover_image';
        $where = ['user_id' => $user_id];
        $join = '__PRODUCT_DETAIL__ as d ON d.p_id = c.p_id';
        $join2 = '__PRODUCT__ as p ON p.id = c.p_id';
        $join3='LEFT JOIN dx_product_package_img as pimg on p.package=pimg.package';
        $count = M('user_comment')->where($where)->count();
        $Page = new \Think\Page($count, 10);// 实例化分页类 传入总记录数和每页显示的记录
        $data = M('user_comment')->alias('c')->join($join,'LEFT')->join($join2,'LEFT')->join($join3)->field($field)->where($where)->order('c.create_at DESC')->limit($Page->firstRow . ',' . $Page->listRows)->select();

        $show = $Page->show();// 分页显示输出
        if ($count <= 10) {
            $show = null;
        }
        $this->assign('page', $show);
        $this->assign('data', $data);
        $this->assign('isMyAppraise',1);
        $this->display();
    }

    /*
     * 发表评价
     * @access  get 方式 返回发布评价页面
     *
     * @access post 方式 :
     * @param varchar $order_sn [订单id]
     * @return response
     *
     */
    public function comment()
    {
        $order_sn = I('order_sn');
        empty($order_sn) && $this->error('参数错误!', '', 2);

        $user_id = session('userId');

        $where = ['order_sn' => $order_sn];

        $bool = M('order')->field('order_status')->where($where)->find();
        $bool['order_status'] != 3 && $this->error('订单状态错误', '', 2);

        $field = 'g.p_id,g.p_name,d.img_path';
        $join = '__PRODUCT_DETAIL__ as d ON d.p_id = g.p_id';
        $goods = M('order_goods')->alias('g')->join($join,'LEFT')->field($field)->where($where)->select();
        if (IS_POST && IS_AJAX) {
            $data = I('post.data');
            $num = count($goods);

            foreach ($data as $key => $value) {
                $data[$key] = [
                    'p_id' => intval($value['id']),
                    'order_sn' => $order_sn,
                    'user_id' => intval($user_id),
                    'star' => intval($value['star']),
                    'content' => !empty($data[$key]['content'])?$data[$key]['content']:'',
                ];
            }
            $comment = M('user_comment');
            $comment->startTrans();
            $re = $comment->addAll($data);
            $res = M('order')->where(['order_sn'=>$order_sn])->setField('is_comment', 2);
            if ($re && $res !== false) {
                $comment->commit();
                //更新缓存数据
                S('noRelease_'.$user_id, null);
                //消息通知对应业务员
                MsgController::writeMsgToUserSale( $user_id, '订单'.$order_sn.'发表评价', '订单编号:'.$order_sn.'{}评价时间:'.date('Y-m-d H:i:s') );

                $this->ajaxReturnStatus(0000,'发布成功');
            } else {
                $comment->rollback();
                $this->ajaxReturnStatus(1000,'发布失败');
            }
        } else {
            //商品名称,商品图片
            $this->assign('order_sn', $order_sn);
            $this->assign('goods', $goods);
            $this->assign('count', count($goods));
            $this->display();
        }
    }

    /*
    * 删除评价
    * @param int id  评价id
    * @return json  response
    */
    public function delComment()
    {
        $id = I('id');//评价id
        empty($id) && $this->error('参数错误!', '', 2);
        //查询当前订单是否属于用户
        $info = M('order')->field('user_id')->where('id=' . $id)->find();
        $re = M('user_comment')->where('id=' .$id)->delete();
        if ($re) {
            $this->ajaxReturnStatus(0000, '删除成功!');
        } else {
            $this->ajaxReturnStatus(1000, '删除失败!');
        }
    }

    /*
     * 已收到的发票
     *
     */
    public function hasInvoice()
    {
        $invoice = M('user_order_invoice');
        $user_id = session('userId');
        $companySons=$this->companySons();//企业子账号信息
        $users='';
        if($companySons['error']==0) $users=$companySons['data'];
        $where = [ 'order_status' => ['in', [4, 5]], 'invoice_type' => ['gt', 0], 'invoice_status' => ['eq', 2]];
        $data = $this->orderList($where,$users);
        $orderList = $data['order'];
        //查询订单中的商品
        foreach ($orderList as $key => $order) {
            $field = 'g.id,g.order_sn, g.p_id, g.p_name, g.p_price,g.p_num,g.p_subtotal,p.name,p.p_sign, p.cate_id, p.brand_id, p.model,p.store,p.spec
					, p.min, p.package, p.batch, p.delivery, p.is_earnest, p.earnest_scale,d.img,r.retreat_type, r.retreat_money, r.retreat_desc, r.retreat_img
					, r.handle_status, r.cargo_status';
            $join = '__PRODUCT__ as p ON p.id = g.p_id';
            $join2 = '__PRODUCT_DETAIL__ as d ON d.p_id = g.p_id';
            $join3 = '__ORDER_RETREAT__ as r ON r.p_id = g.p_id AND r.order_sn = g.order_sn';
            $goods = M('order_goods')->alias('g')->field($field)->join($join, 'LEFT')->join($join2, 'LEFT')->join($join3,'LEFT')->where(['g.order_sn' => $order['order_sn']])->select();
            $orderList[$key]['goods'] = $goods;
        }
        $show = $data['page'];// 分页显示输出
        $this->assign('page', $show);// 赋值分页输出
        $this->assign('list', $orderList);
        $this->assign('isHasInvoice',1);
        $this->display();
    }

    /*
     *
     * 未收到的发票
     */
    public function noInvoice()
    {
        $invoice = M('user_order_invoice');
        $user_id = session('userId');
        $companySons=$this->companySons();//企业子账号信息
        $users='';
        if($companySons['error']==0) $users=$companySons['data'];
        $where = [ 'order_status' => ['in', [4, 5]], 'invoice_type' => ['gt', 0], 'invoice_status' => ['in', [0, 1]]];
        $data = $this->orderList($where,$users);
        $orderList = $data['order'];
        //查询订单中的商品
        foreach ($orderList as $key => $order) {
            $field = 'g.id,g.order_sn, g.p_id, g.p_name, g.p_price,g.p_num,g.p_subtotal,p.name,p.p_sign, p.cate_id, p.brand_id, p.model,p.store,p.spec
					, p.min, p.package, p.batch, p.delivery, p.is_earnest, p.earnest_scale,d.img,r.retreat_type, r.retreat_money, r.retreat_desc, r.retreat_img
					, r.handle_status, r.cargo_status';
            $join = '__PRODUCT__ as p ON p.id = g.p_id';
            $join2 = '__PRODUCT_DETAIL__ as d ON d.p_id = g.p_id';
            $join3 = '__ORDER_RETREAT__ as r ON r.p_id = g.p_id AND r.order_sn = g.order_sn';
            $goods = M('order_goods')->alias('g')->field($field)->join($join, 'LEFT')->join($join2, 'LEFT')->join($join3,'LEFT')->where(['g.order_sn' => $order['order_sn']])->select();
            $orderList[$key]['goods'] = $goods;
        }
        //dd($orderList);
        $show = $data['page'];// 分页显示输出
        $this->assign('page', $show);// 赋值分页输出
        $this->assign('list', $orderList);
        $this->assign('isNoInvoice',1);
        $this->display();
    }


    /*
     *   增值税普票设置 新增收票
     *
     */
    public function setGeneral()
    {
        $num = C('ORDER_INVOICE_NUMBER'); //最多保存数量
        $invoice = M('user_order_invoice');
        $user_id = session('userId');
        $data = $invoice->where(['user_id' => $user_id, 'invoice_type' => 2])->order('invoice_status DESC')->select();
        foreach( $data as $k=>$v ){
            $data[$k]['area_code'] = $this->getAddressByCode($v['area_code']);
        }
        //dd($data);
        $nowNum = count($data);
        $count = $nowNum < $num ? $num - $nowNum : 0;
        if (IS_POST || IS_AJAX) {
            if ($nowNum >= $num) {
                $this->ajaxReturnStatus(1000, '您的收票地址数量已达到限制!');
            }
            $data = I('post.');
            if ($invoice->add($data)) {
                $this->ajaxReturnStatus(0000, '添加成功');
            } else {
                $this->ajaxReturnStatus(1001, '添加失败');
            }
        } elseif (IS_GET) {
            $get=I('get.');
            $id=$get['id'];
            $one_invoice=M('user_order_invoice')->where(['id'=>$id,'user_id'=>$user_id])->find();
            $this->assign('one_invoice',$one_invoice);
            $this->assign('nowNum', $nowNum);
            $this->assign('count', $count);
            $this->assign('data', $data);
            $this->assign('isSetGeneral',1);
            $this->display();
        }
    }


    /*
     *
     * 设为默认 增值普票
     *
     */
    public function trueGeneral()
    {
        $invoice = M('user_order_invoice');
        $user_id = session('userId');
        $invoice_id = intval(I('invoice_id'));
        $invoice->startTrans();
        $res = $invoice->where(['user_id'=>$user_id, 'invoice_type'=>2])->setField('invoice_status',0);
        $re = $invoice->where(['id'=>$invoice_id])->setField('invoice_status', 1);

        if ( $re !== false && $res !== false ) {
            $invoice->commit();
            $this->ajaxReturnStatus(0000, '成功');
        }else{
            $invoice->rollback();
            $this->ajaxReturnStatus(1000,'失败');
        }
    }


    /*
     * 增值税专票设置 新增收票
     *
     */
    public function setSpecial()
    {
        $get=I('get.');
        $this->assign('get', $get);
        $num = C('ORDER_INVOICE_NUMBER'); //最多保存数量
        $invoice = M('user_order_invoice');
        $user_id = session('userId');
        $all_user=[$user_id];
        if(session('userType')==20){
            $parent=M('user_son')->where(['user_id'=>$user_id])->find();
            $all_user[]=$parent['p_id'];
        }
        $data = $invoice->where(['user_id' => ['in',$all_user], 'invoice_type' => 1])->order('invoice_status DESC')->select();
        foreach( $data as $k=>$v ){
            $data[$k]['company_area_code'] = $this->getAddressByCode($v['company_area_code']);
            $data[$k]['area_code'] = $this->getAddressByCode($v['area_code']);
        }
        $nowNum = count($data);
        $count = $nowNum < $num ? $num - $nowNum : 0;
        if (IS_POST || IS_AJAX) {
            if ($nowNum >= $num) {
                $this->ajaxReturnStatus(1000, '您的收票地址数量已达到限制!');
            }
            $data = I('post.');
            if ($invoice->add($data)) {
                $this->ajaxReturnStatus(0000, '添加成功');
            } else {
                $this->ajaxReturnStatus(1001, '添加失败');
            }
        } elseif (IS_GET) {
            $id=$get['id'];
            $one_invoice=M('user_order_invoice')->where(['id'=>$id,'user_id'=>['in',$all_user]])->find();
            $this->assign('one_invoice',$one_invoice);
            $this->assign('nowNum', $nowNum);
            $this->assign('count', $count);
            $this->assign('data', $data);
            $this->assign('isSetSpecial',1);
            $this->display();
        }
    }

    /*
     *
     * 设为默认 增值专票
     *
     */
    public function trueSpecial()
    {
        $invoice = M('user_order_invoice');
        $user_id = session('userId');
        $invoice_id = intval(I('invoice_id'));
        $invoice->startTrans();
        $res = $invoice->where(['user_id'=>$user_id, 'invoice_type'=>1])->setField('invoice_status',0);
        $re = $invoice->where(['id'=>$invoice_id])->setField('invoice_status', 1);

        if ( $re !== false && $res !== false ) {
            $invoice->commit();
            $this->ajaxReturnStatus(0000, '成功');
        }else{
            $invoice->rollback();
            $this->ajaxReturnStatus(1000,'失败');
        }
    }

    /*
     * 用户收到发票操作
     *
     */
    public  function trueInvoice()
    {
        $order_sn = I('order_sn');
        empty($order_sn) && $this->ajaxReturnStatus(1001, '缺少参数');
        $detail = M('order_detail');
        $re = $detail->where(['order_sn'=>$order_sn, 'invoice_type'=>['in', [1,2]]])->setField('invoice_status', 2);
        if( $re ){
            $this->ajaxReturnStatus(0000, '收票成功');
        }else{
            $this->ajaxReturnStatus(1000, '系统繁忙!收票失败');
        }
    }



    /*
     * 根据订单id和商品id 查询订单已及商品的信息
     */
    protected  function retreatInfo($order_sn, $p_id)
    {
        if (empty( $order_sn ) || empty( $p_id ))  return false;
        $where = ['g.order_sn'=>$order_sn, 'p_id'=>$p_id];
        $join = '__PRODUCT__ AS p ON p.id = g.p_id';
        $join2 = '__ORDER__ AS o ON o.order_sn = g.order_sn';
        $data = M('order_goods')->alias('g')->join($join, 'LEFT')->join($join2, 'LEFT')->where($where)->find();
        if(empty($data))  return false;
        $imgData = M('product_detail')->field('img')->where(['p_id'=>$p_id])->find();
        $data['p_img'] = $imgData['img'];
        return  $data;
    }

    /*
     *
     * 检查订单商品库存
     *
     */
    public function checkStore()
    {
        $order_sn = I('post.order_sn');
        empty($order_sn) && $this->ajaxReturnStatus(1000,'订单编号为空');
        //查询订单商品
        $goodList = M('order_goods')->where(['order_sn'=>$order_sn])->select();
        if( !empty($goodList) ){
            foreach( $goodList as $k=>$v ){
                $re = M('product')->field('store')->where(['id'=>$v['p_id']])->find();
                $data[$v['p_id']] = $re['store'];
            }
            $this->ajaxReturnStatus(0,$data);
        }else{
            $this->ajaxReturnStatus(0,null);
        }
    }


    /**
     *
     * @desc 专票列表
     *
     */
    public function invoiceList(){
        $request=I('get.');
        $this->assign('isInvoiceList',1);

        $session=session();
        $userType=$session['userInfo']['user_type'];
        $masterId_arr=[$session['userId']];

        $whereUser='';
        if($userType==20){
            $son=M('user_son')->where(['user_id'=>$session['userId']])->find();
            $companySons=$this->companySons($son['p_id']);//企业子账号信息
            if($companySons['error']==0){
                $masterId_arr=$companySons['data'];
                $masterId_arr[]=$session['userId'];
            }

            $whereUser=$session['userId'];
        }else if($userType==2){
            $companySons=$this->companySons($session['userId']);//企业子账号信息
            if($companySons['error']==0)$masterId_arr=$companySons['data'];
        }

        $page = $request[ 'page' ] ? $request[ 'page' ] : 1;
        $pageSize = $request[ 'pageSize' ] ? $request[ 'pageSize' ] : C( 'PAGE_PAGESIZE' );
        $where = ['user_id'=>['in',$masterId_arr],'implment_status'=>1];
        $list=(new \Admin\Model\OrderModel())->invoiceList($where,$page,$pageSize,'','','',$whereUser);
        $this->assign('invoice_list',$list['data']['list']);

        $this->display();
    }


    /*
     *
     * 开票订单列表
     *
     */
    public function invoiceOrders(){
        $request=I('get.');
        $this->assign('is_invoiceOrders',1);

        $session=session();
        $userType=$session['userInfo']['user_type'];
        $masterId_arr=[$session['userId']];

        $whereUser='';
        if($userType==20){
            //            $son=M('user_son')->where(['user_id'=>$session['userId']])->find();
            //            $companySons=$this->companySons($son['p_id']);//企业子账号信息
            //            if($companySons['error']==0)$masterId_arr=$companySons['data'];

            //            $whereUser=$session['userId'];
        }else if($userType==2){
            $companySons=$this->companySons($session['userId']);//企业子账号信息
            if($companySons['error']==0)$masterId_arr=$companySons['data'];
        }

        $page = $request[ 'page' ] ? $request[ 'page' ] : 1;
        $pageSize = $request[ 'pageSize' ] ? $request[ 'pageSize' ] : C( 'PAGE_PAGESIZE' );
        $where = [
            'user_id'=>['in',$masterId_arr],
            'pay_status'=>2,
            'is_invoice'=>1,
            //            'user_invoice_id'=>0,
            'order_sn not in (
                    select order_sn from (
	                    select order_sn,sum((p_num-knot_num-retreat_num)*pay_subtotal/p_num) as current_total from dx_order_goods group by order_sn
                    ) as ot where ot.current_total=0
                )',
            'user_invoice_id not in (select id from dx_user_invoice where implment_status=1)'
        ];

        $list=$this->orderList_admin($where,$page,$pageSize);

        $this->assign('list',$list['data']['list']);
        $this->display();
    }


    //查询账期申请的要求
    public function executeAccountRequestCondition(){
        $get=I('get.');
        $account_type_id=$get['account_type_id'];
        if(!$account_type_id) die(json_encode(['error'=>1,'msg'=>'参数错误']));

        $result=$this->accountRequestCondition($account_type_id);
        die(json_encode($result));
    }

    /*
     *
     *
     * 账期申请的要求：
            个人周结：达到月2W及以上
            企业周结：达到月3W及以上
            企业半月结：达到月5W及以上
            企业月结：达到月7W及以上
            个人半年平均销售额，企业最近2个月平均销售
     *
     */
    public function accountRequestCondition($account_type_id){
        $session=session();
        if(!$account_type_id) return ['error'=>1,'msg'=>'参数错误2'];

        $account_type=M('account_type')->where(['id'=>$account_type_id])->find();
        if(!$account_type) return ['error'=>1,'msg'=>'账期类型不对'];
        $account_code=$account_type['account_code'];
        $must_has_pay_total=0;//销售额度

        $users='';
        $companySons=$this->companySons();//企业子账号信息
        if($companySons['error']==0) $users=$companySons['data'];

        $where = [ 'order_status' => ['egt',2], 'user_id'=>['in',$users] ];

        if($session['userType']==1){//个人
            $start_time=date('Y-m-00 00:00:00',strtotime('-6 month'));
            $end_time=date('Y-m-00 00:00:00',time());
            if($account_code!='one_week') return ['error'=>1,'msg'=>'当前账期类型不对'];
            $must_has_pay_total=20000*6;
        }else if($session['userType']==2){//企业
            $start_time=date('Y-m-00 00:00:00',strtotime('-2 month'));
            $end_time=date('Y-m-00 00:00:00',time());
            if($account_code=='one_week') $must_has_pay_total=30000*2;
            else if($account_code=='half_month') $must_has_pay_total=50000*2;
            else if($account_code=='one_month25'||$account_code=='one_month31') $must_has_pay_total=70000*2;
        }else{
            return ['error'=>1,'msg'=>'非法账户'];
        }

        $where['create_at']=['between',[$start_time,$end_time]];
        $where['must_has_pay_total']=['egt',$must_has_pay_total];

        $mast_has_pay_total_sql=M('order')->field('sum(already_paid) as must_has_pay_total')->where($where)->find();
        $mast_has_pay_total_sql['must_has_pay_total']=$mast_has_pay_total_sql['must_has_pay_total']?$mast_has_pay_total_sql['must_has_pay_total']:0;
        if($mast_has_pay_total_sql['must_has_pay_total']>=$must_has_pay_total) return ['error'=>0,'msg'=>'验证通过','data'=>['has_pay_total'=>$mast_has_pay_total_sql,'must_pay_total'=>$must_has_pay_total]];
        else  return ['error'=>1,'msg'=>'你的近期累计销售额为'.$mast_has_pay_total_sql['must_has_pay_total'].'元，没有达到指定要求','data'=>['has_pay_total'=>$mast_has_pay_total_sql['must_has_pay_total'],'must_pay_total'=>$must_has_pay_total]];
    }


    //    /**
    //     * @desc 我的订单页面--定金的支付方式更改
    //     */
    //    public function myOrderDepositsEdit(){
    //        $request=I('post.');
    //        $request=[
    //            'order_sn'=>1801041036463,
    //            'deposits_pay_type'=>1
    //        ];
    //        $order_sn=$request['order_sn'];
    //        $deposits_pay_type=$request['deposits_pay_type'];
    //        $list=$this->orderList_admin(['order_sn'=>$order_sn]);
    //        if($list['error']!=0) die(json_encode($list));
    //        $oneOrder=$list['data']['list'][0];
    //        if((float)$oneOrder['total_deposits']&&!in_array($deposits_pay_type,[1,2,3,4])){
    //
    //        }
    //        print_r($oneOrder);die();
    //        $data=[
    //            'id'=>$oneOrder['id'],
    //            'deposits_pay_type'=>$deposits_pay_type,
    //        ];
    //        $result=M('order')->save($data);
    //        if($result===false) return ['error'=>1,'msg'=>'更新失败'];
    //        else return ['error'=>0,'msg'=>'更新成功'];
    //    }


    /**
     *
     * @desc 水单上传页
     *
     */
    public function publicAccount(){
        if(IS_AJAX){//支付水单上传
            $request=I('post.');
            if($request['pay_type']==1){//帐期还款
                $accountResult=D('order')->accountPayImg($request);
                die(json_encode($accountResult));
            }
            if(is_array($request)) $request=array_merge($request,['user_id'=>session('userId')]);
            //定金还是尾款
            $order=M('order')->field('order_type,total_deposits,deposits_pay_status')->where(['order_sn'=>$request['order_sn']])->find();
            if(!$order) die(json_encode(['error'=>1,'msg'=>'订单信息错误']));
            if($order['order_type']==1&&$order['total_deposits']>0&&$order['deposits_pay_status']==0){
                $request['img_type']=1;
            }else{
                $request['img_type']=2;
            }

            $result=(new \Admin\Model\OrderpayhistoryModel())->orderPayImg($request);
            $caiwu=M("","sys_user")->where(['department_id'=>32])->select();
            $caiwu=array_column($caiwu,'uid');
            $recive_id=implode(',',$caiwu);
            $sys = new \Admin\Model\SysModel();
            $dpList = $sys->getDepartment(32);
            if( $dpList['error'] !== 0 ){
                $dplist_id='';
            }else{
                if( !empty( $dpList['data'] ) ){
                    $dplist_id = ','.implode($dpList['data'],',');
                }
            }
            MQ::getInstance()->writeMsg(session('userId'),false,0, 0, $recive_id, $dplist_id,'订单'.$request['order_sn'].'已上传水单', '订单编号:'.$request['order_sn'].'{}上传水单时间:'.date('Y-m-d H:i:s'));
            die(json_encode($result));
        }
        $get=I('get.');
        if(isset($get['account_select_id'])){
            $account_select=M('account_pay_history')->field('account_pay_sn,total')->where(['id'=>$get['account_select_id'],'step'=>1])->find();
            $get['account_pay_total']=$account_select['total'];
            $get['account_pay_sn']=$account_select['account_pay_sn'];
        }else{
            $list=$this->orderList_admin(['order_sn'=>$get['order_sn']]);
            $this->assign('order',$list['data']['list'][0]);
        }
        $this->assign('get',$get);
        $this->display();
    }


    public function test(){
        //        $order_sn=I('get.order_sn');
        //        $toErp=(new \Home\Model\ErpModel())->orderToErp($order_sn);//订单同步到erp
        //        if($toErp['error']!=0) $error=8;
        //        //发送消息通知
        //        MsgController::writeMsgToUserSale( $user_id, '新订单'.$order_sn, '新订单编号:'.$order_sn.'{}
        //                 订单总金额:'.$order_total.'{}在线支付金额:'.$online_pay.'{}账期支付金额:'.$account_pay.'{}下单时间:'.date('Y-m-d H:i:s') );
    }
    //抽奖
    public function checkCode(){
        $save['code']=I('code');
        if(!$save['code']){
            die(json_encode(['error'=>1,'msg'=>"中奖码不能为空"]));
        }
        $save['user_id']=$_SESSION['userId'];
        if(!$save['user_id']){
            die(json_encode(['error'=>1,'msg'=>"请先登录"]));
        }
        if($_SESSION['user_type']==20){
            die(json_encode(['error'=>1,'msg'=>"您是子账号,暂时不能参与"]));
        }
        $save['create_time']=date("Y-m-d H:i:s");

        $fres=M('code_goods')->where(['code'=>$save['code'],'status'=>['neq',2]])->find();
        if($fres){
            die(json_encode(['error'=>1,'msg'=>"您的抽奖码已经存在,请检查后再提交"]));
        }
        $fres=M('code_goods')->where(['user_id'=>$save['user_id'],'status'=>['neq',2]])->find();
        if($fres){
            die(json_encode(['error'=>1,'msg'=>"您已经提交过中奖码"]));
        }
        $add=M('code_goods')->add($save);
        if($add===false){
            die(json_encode(['error'=>1,'msg'=>"提交失败"]));
        }else{
            die(json_encode(['error'=>0,'msg'=>"提交成功,请等待审核"]));
        }
    }
    public function codeIndex(){
        /*if( session("userId")) {
            die(json_encode(['error'=>1,'msg'=>"您没权限,请先登录"]));
        }*/
        $res=M('code_goods')->where(['user_id'=>$_SESSION['userId']])->order("create_time desc")->select();
        $this->assign('res',$res);
        $this->assign('isCode',true);
        $this->display("Code/codeWinning");
    }











}